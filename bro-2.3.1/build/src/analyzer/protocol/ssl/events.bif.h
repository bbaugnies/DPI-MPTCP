// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ssl/events.bif (plugin mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_ssl_events_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_ssl_events_bif
#define _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_ssl_events_bif
#include "bro-bif.h"
#endif
#endif

extern EventHandlerPtr ssl_client_hello; 
namespace BifEvent {  void generate_ssl_client_hello(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t version, double possible_ts, StringVal* client_random, StringVal* session_id, Val* ciphers);  } 
extern EventHandlerPtr ssl_server_hello; 
namespace BifEvent {  void generate_ssl_server_hello(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t version, double possible_ts, StringVal* server_random, StringVal* session_id, bro_uint_t cipher, bro_uint_t comp_method);  } 
extern EventHandlerPtr ssl_extension; 
namespace BifEvent {  void generate_ssl_extension(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t code, StringVal* val);  } 
extern EventHandlerPtr ssl_extension_elliptic_curves; 
namespace BifEvent {  void generate_ssl_extension_elliptic_curves(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* curves);  } 
extern EventHandlerPtr ssl_extension_ec_point_formats; 
namespace BifEvent {  void generate_ssl_extension_ec_point_formats(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* point_formats);  } 
extern EventHandlerPtr ssl_server_curve; 
namespace BifEvent {  void generate_ssl_server_curve(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t curve);  } 
extern EventHandlerPtr ssl_dh_server_params; 
namespace BifEvent {  void generate_ssl_dh_server_params(analyzer::Analyzer* analyzer, Connection* c, StringVal* p, StringVal* q, StringVal* Ys);  } 
extern EventHandlerPtr ssl_extension_application_layer_protocol_negotiation; 
namespace BifEvent {  void generate_ssl_extension_application_layer_protocol_negotiation(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* protocols);  } 
extern EventHandlerPtr ssl_extension_server_name; 
namespace BifEvent {  void generate_ssl_extension_server_name(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* names);  } 
extern EventHandlerPtr ssl_established; 
namespace BifEvent {  void generate_ssl_established(analyzer::Analyzer* analyzer, Connection* c);  } 
extern EventHandlerPtr ssl_alert; 
namespace BifEvent {  void generate_ssl_alert(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t level, bro_uint_t desc);  } 
extern EventHandlerPtr ssl_session_ticket_handshake; 
namespace BifEvent {  void generate_ssl_session_ticket_handshake(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t ticket_lifetime_hint, StringVal* ticket);  } 
extern EventHandlerPtr ssl_heartbeat; 
namespace BifEvent {  void generate_ssl_heartbeat(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t length, bro_uint_t heartbeat_type, bro_uint_t payload_length, StringVal* payload);  } 
extern EventHandlerPtr ssl_encrypted_data; 
namespace BifEvent {  void generate_ssl_encrypted_data(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t content_type, bro_uint_t length);  } 
extern EventHandlerPtr ssl_stapled_ocsp; 
namespace BifEvent {  void generate_ssl_stapled_ocsp(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* response);  } 
extern EventHandlerPtr ssl_handshake_message; 
namespace BifEvent {  void generate_ssl_handshake_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t msg_type, bro_uint_t length);  } 
extern EventHandlerPtr ssl_change_cipher_spec; 
namespace BifEvent {  void generate_ssl_change_cipher_spec(analyzer::Analyzer* analyzer, Connection* c, int is_orig);  } 

#endif
