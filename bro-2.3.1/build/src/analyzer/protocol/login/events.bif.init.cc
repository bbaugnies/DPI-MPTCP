// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/login/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_Login {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::rsh_request = internal_handler("rsh_request");
	bifs.push_back(std::make_pair("rsh_request", 2));
	::rsh_reply = internal_handler("rsh_reply");
	bifs.push_back(std::make_pair("rsh_reply", 2));
	::login_failure = internal_handler("login_failure");
	bifs.push_back(std::make_pair("login_failure", 2));
	::login_success = internal_handler("login_success");
	bifs.push_back(std::make_pair("login_success", 2));
	::login_input_line = internal_handler("login_input_line");
	bifs.push_back(std::make_pair("login_input_line", 2));
	::login_output_line = internal_handler("login_output_line");
	bifs.push_back(std::make_pair("login_output_line", 2));
	::login_confused = internal_handler("login_confused");
	bifs.push_back(std::make_pair("login_confused", 2));
	::login_confused_text = internal_handler("login_confused_text");
	bifs.push_back(std::make_pair("login_confused_text", 2));
	::login_terminal = internal_handler("login_terminal");
	bifs.push_back(std::make_pair("login_terminal", 2));
	::login_display = internal_handler("login_display");
	bifs.push_back(std::make_pair("login_display", 2));
	::authentication_accepted = internal_handler("authentication_accepted");
	bifs.push_back(std::make_pair("authentication_accepted", 2));
	::authentication_rejected = internal_handler("authentication_rejected");
	bifs.push_back(std::make_pair("authentication_rejected", 2));
	::authentication_skipped = internal_handler("authentication_skipped");
	bifs.push_back(std::make_pair("authentication_skipped", 2));
	::login_prompt = internal_handler("login_prompt");
	bifs.push_back(std::make_pair("login_prompt", 2));
	::activating_encryption = internal_handler("activating_encryption");
	bifs.push_back(std::make_pair("activating_encryption", 2));
	::inconsistent_option = internal_handler("inconsistent_option");
	bifs.push_back(std::make_pair("inconsistent_option", 2));
	::bad_option = internal_handler("bad_option");
	bifs.push_back(std::make_pair("bad_option", 2));
	::bad_option_termination = internal_handler("bad_option_termination");
	bifs.push_back(std::make_pair("bad_option_termination", 2));

	return bifs;
	}
} }

