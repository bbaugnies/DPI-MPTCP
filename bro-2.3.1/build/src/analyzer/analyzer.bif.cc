// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/analyzer.bif (alternative mode).


#include "analyzer.bif.h"


#line 5 "analyzer.bif"

#include "NetVar.h"

#include "analyzer/Manager.h"

#line 11 "analyzer.bif"
Val* BifFunc::Analyzer::bro___enable_analyzer(Frame* frame, val_list* BiF_ARGS) 
	
#line 12 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Analyzer::__enable_analyzer() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 12 "analyzer.bif"

	bool result = analyzer_mgr->EnableAnalyzer(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Analyzer::bro___enable_analyzer

#line 15 "analyzer.bif"

#line 17 "analyzer.bif"
Val* BifFunc::Analyzer::bro___disable_analyzer(Frame* frame, val_list* BiF_ARGS) 
	
#line 18 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Analyzer::__disable_analyzer() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 18 "analyzer.bif"

	bool result = analyzer_mgr->DisableAnalyzer(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Analyzer::bro___disable_analyzer

#line 21 "analyzer.bif"

#line 23 "analyzer.bif"
Val* BifFunc::Analyzer::bro___disable_all_analyzers(Frame* frame, val_list* BiF_ARGS) 
	
#line 24 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("Analyzer::__disable_all_analyzers() takes exactly 0 argument(s)");
		return 0;
		}

#line 24 "analyzer.bif"

	analyzer_mgr->DisableAllAnalyzers();
	return 0;
	} // end of BifFunc::Analyzer::bro___disable_all_analyzers

#line 27 "analyzer.bif"

#line 29 "analyzer.bif"
Val* BifFunc::Analyzer::bro___register_for_port(Frame* frame, val_list* BiF_ARGS) 
	
#line 30 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Analyzer::__register_for_port() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	PortVal* p = (PortVal*) ((*BiF_ARGS)[1]->AsPortVal());

#line 30 "analyzer.bif"

	bool result = analyzer_mgr->RegisterAnalyzerForPort(id->AsEnumVal(), p);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Analyzer::bro___register_for_port

#line 33 "analyzer.bif"

#line 35 "analyzer.bif"
Val* BifFunc::Analyzer::bro___schedule_analyzer(Frame* frame, val_list* BiF_ARGS) 
	
#line 37 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 5 )
		{
		reporter->Error("Analyzer::__schedule_analyzer() takes exactly 5 argument(s)");
		return 0;
		}
	AddrVal* orig = (AddrVal*) ((*BiF_ARGS)[0]->AsAddrVal());
	AddrVal* resp = (AddrVal*) ((*BiF_ARGS)[1]->AsAddrVal());
	PortVal* resp_p = (PortVal*) ((*BiF_ARGS)[2]->AsPortVal());
	Val* analyzer = (Val*) ((*BiF_ARGS)[3]);
	double tout = (double) ((*BiF_ARGS)[4]->AsInterval());

#line 37 "analyzer.bif"

	analyzer_mgr->ScheduleAnalyzer(orig->AsAddr(), resp->AsAddr(), resp_p, analyzer->AsEnumVal(), tout);
	return new Val(true, TYPE_BOOL);
	} // end of BifFunc::Analyzer::bro___schedule_analyzer

#line 40 "analyzer.bif"

#line 42 "analyzer.bif"
Val* BifFunc::Analyzer::bro___name(Frame* frame, val_list* BiF_ARGS) 
	
#line 43 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Analyzer::__name() takes exactly 1 argument(s)");
		return 0;
		}
	Val* atype = (Val*) ((*BiF_ARGS)[0]);

#line 43 "analyzer.bif"

	return new StringVal(analyzer_mgr->GetComponentName(atype));
	} // end of BifFunc::Analyzer::bro___name

#line 45 "analyzer.bif"

#line 47 "analyzer.bif"
Val* BifFunc::Analyzer::bro___tag(Frame* frame, val_list* BiF_ARGS) 
	
#line 48 "analyzer.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Analyzer::__tag() takes exactly 1 argument(s)");
		return 0;
		}
	StringVal* name = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());

#line 48 "analyzer.bif"

	analyzer::Tag t = analyzer_mgr->GetComponentTag(name->CheckString());
	return t.AsEnumVal()->Ref();
	} // end of BifFunc::Analyzer::bro___tag

#line 51 "analyzer.bif"
