// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/radius/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr radius_message; 
void BifEvent::generate_radius_message(analyzer::Analyzer* analyzer, Connection* c, Val* result)
	{
	// Note that it is intentional that here we do not
	// check if ::radius_message is NULL, which should happen *before*
	// BifEvent::generate_radius_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(result);

	mgr.QueueEvent(::radius_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr radius_attribute; 
void BifEvent::generate_radius_attribute(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t attr_type, StringVal* value)
	{
	// Note that it is intentional that here we do not
	// check if ::radius_attribute is NULL, which should happen *before*
	// BifEvent::generate_radius_attribute is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(attr_type, TYPE_COUNT));
	vl->append(value);

	mgr.QueueEvent(::radius_attribute, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
namespace BifType { namespace Vector{ namespace RADIUS {  VectorType * AttributeList;  } } }
namespace BifType { namespace Table{ namespace RADIUS {  TableType * Attributes;  } } }
namespace BifType { namespace Record{ namespace RADIUS {  RecordType * Message;  } } }
