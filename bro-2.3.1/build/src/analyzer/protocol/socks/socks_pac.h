// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_socks_socks_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_socks_socks_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "SOCKS.h"

#include "events.bif.h"

namespace binpac {

namespace SOCKS {
class ContextSOCKS;
class SOCKS_Conn;
class SOCKS_Version;
class SOCKS_Version_Error;
class SOCKS5_Message;
class SOCKS5_Auth_Negotiation;
class SOCKS5_Auth_Negotiation_Request;
class SOCKS5_Auth_Negotiation_Reply;
class SOCKS5_Real_Message;
class Domain_Name;
class SOCKS5_Address;
class SOCKS5_Request;
class SOCKS5_Reply;
class SOCKS4_Message;
class SOCKS4_Request;
class SOCKS4_Reply;
class SOCKS_Flow;
} // namespace SOCKS

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace SOCKS {

class ContextSOCKS
{
public:
	ContextSOCKS(SOCKS_Conn * connection, SOCKS_Flow * flow);
	~ContextSOCKS();
	
	// Member access functions
	SOCKS_Conn * connection() const { return connection_; }
	SOCKS_Flow * flow() const { return flow_; }
	
protected:
	SOCKS_Conn * connection_;
	SOCKS_Flow * flow_;
};


class SOCKS_Conn : public binpac::ConnectionAnalyzer
{
public:
	SOCKS_Conn(BroAnalyzer const & bro_analyzer);
	~SOCKS_Conn();
	
	// Member access functions
	SOCKS_Flow * upflow() const { return upflow_; }
	SOCKS_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
	// Functions
	bool v5_past_authentication();
	bool set_v5_past_authentication();
	bool socks4_request(SOCKS4_Request * request);
	bool socks4_reply(SOCKS4_Reply * reply);
	bool socks5_request(SOCKS5_Request * request);
	bool socks5_reply(SOCKS5_Reply * reply);
	bool version_error(uint8 version);
	
protected:
	
	// Additional members

		bool v5_authenticated_;
	
	SOCKS_Flow * upflow_;
	SOCKS_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class SOCKS_Version
{
public:
	SOCKS_Version(bool is_orig);
	~SOCKS_Version();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 version() const { return version_; }
	int msg_case_index() const	{ return msg_case_index_; }
	SOCKS4_Message * socks4_msg() const
		{
		switch ( msg_case_index() )
			{
			case 4:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:5:socks4_msg", msg_case_index(), "((int) 4)");
				break;
			}
		return socks4_msg_;
		}
	SOCKS5_Message * socks5_msg() const
		{
		switch ( msg_case_index() )
			{
			case 5:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:6:socks5_msg", msg_case_index(), "((int) 5)");
				break;
			}
		return socks5_msg_;
		}
	SOCKS_Version_Error * socks_msg_fail() const
		{
		return socks_msg_fail_;
		}
	bool is_orig() const { return is_orig_; }
	
protected:
	uint8 version_;
	int msg_case_index_;
	SOCKS4_Message * socks4_msg_;
	SOCKS5_Message * socks5_msg_;
	SOCKS_Version_Error * socks_msg_fail_;
	bool is_orig_;
};


class SOCKS_Version_Error
{
public:
	SOCKS_Version_Error(uint8 version);
	~SOCKS_Version_Error();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 version() const { return version_; }
	bool proc() const { return proc_; }
	
protected:
	uint8 version_;
	bool proc_;
};


class SOCKS5_Message
{
public:
	SOCKS5_Message(bool is_orig);
	~SOCKS5_Message();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	SOCKS5_Real_Message * msg() const
		{
		switch ( val_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:17:msg", val_case_index(), "true");
				break;
			}
		return msg_;
		}
	SOCKS5_Auth_Negotiation * auth() const
		{
		switch ( val_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:18:auth", val_case_index(), "false");
				break;
			}
		return auth_;
		}
	bool is_orig() const { return is_orig_; }
	
protected:
	int val_case_index_;
	SOCKS5_Real_Message * msg_;
	SOCKS5_Auth_Negotiation * auth_;
	bool is_orig_;
};


class SOCKS5_Auth_Negotiation
{
public:
	SOCKS5_Auth_Negotiation(bool is_orig);
	~SOCKS5_Auth_Negotiation();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	SOCKS5_Auth_Negotiation_Request * req() const
		{
		switch ( val_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:22:req", val_case_index(), "true");
				break;
			}
		return req_;
		}
	SOCKS5_Auth_Negotiation_Reply * rep() const
		{
		switch ( val_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:23:rep", val_case_index(), "false");
				break;
			}
		return rep_;
		}
	bool is_orig() const { return is_orig_; }
	
protected:
	int val_case_index_;
	SOCKS5_Auth_Negotiation_Request * req_;
	SOCKS5_Auth_Negotiation_Reply * rep_;
	bool is_orig_;
};


class SOCKS5_Auth_Negotiation_Request
{
public:
	SOCKS5_Auth_Negotiation_Request();
	~SOCKS5_Auth_Negotiation_Request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 method_count() const { return method_count_; }
	vector<uint8> * methods() const { return methods_; }
	
protected:
	uint8 method_count_;
	vector<uint8> * methods_;
	uint8 methods__elem_;
};


class SOCKS5_Auth_Negotiation_Reply
{
public:
	SOCKS5_Auth_Negotiation_Reply();
	~SOCKS5_Auth_Negotiation_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 selected_auth_method() const { return selected_auth_method_; }
	int past_auth() const { return past_auth_; }
	
protected:
	uint8 selected_auth_method_;
	int past_auth_;
};


class SOCKS5_Real_Message
{
public:
	SOCKS5_Real_Message(bool is_orig);
	~SOCKS5_Real_Message();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	SOCKS5_Request * request() const
		{
		switch ( val_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:38:request", val_case_index(), "true");
				break;
			}
		return request_;
		}
	SOCKS5_Reply * reply() const
		{
		switch ( val_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:39:reply", val_case_index(), "false");
				break;
			}
		return reply_;
		}
	bool is_orig() const { return is_orig_; }
	
protected:
	int val_case_index_;
	SOCKS5_Request * request_;
	SOCKS5_Reply * reply_;
	bool is_orig_;
};


class Domain_Name
{
public:
	Domain_Name();
	~Domain_Name();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 len() const { return len_; }
	bytestring const & name() const { return name_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 len_;
	bytestring name_;
	int byteorder_;
};


class SOCKS5_Address
{
public:
	SOCKS5_Address();
	~SOCKS5_Address();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 addr_type() const { return addr_type_; }
	int addr_case_index() const	{ return addr_case_index_; }
	uint32 ipv4() const
		{
		switch ( addr_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:50:ipv4", addr_case_index(), "((int) 1)");
				break;
			}
		return ipv4_;
		}
	Domain_Name * domain_name() const
		{
		switch ( addr_case_index() )
			{
			case 3:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:51:domain_name", addr_case_index(), "((int) 3)");
				break;
			}
		return domain_name_;
		}
	vector<uint32> * ipv6() const
		{
		switch ( addr_case_index() )
			{
			case 4:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:52:ipv6", addr_case_index(), "((int) 4)");
				break;
			}
		return ipv6_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 addr_type_;
	int addr_case_index_;
	uint32 ipv4_;
	Domain_Name * domain_name_;
	vector<uint32> * ipv6_;
	uint32 ipv6__elem_;
	const_bytestring err_;
	int byteorder_;
};


class SOCKS5_Request
{
public:
	SOCKS5_Request();
	~SOCKS5_Request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 command() const { return command_; }
	uint8 reserved() const { return reserved_; }
	SOCKS5_Address * remote_name() const { return remote_name_; }
	uint16 port() const { return port_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint8 command_;
	uint8 reserved_;
	SOCKS5_Address * remote_name_;
	uint16 port_;
	int byteorder_;
	bool proc_;
};


class SOCKS5_Reply
{
public:
	SOCKS5_Reply();
	~SOCKS5_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 reply() const { return reply_; }
	uint8 reserved() const { return reserved_; }
	SOCKS5_Address * bound() const { return bound_; }
	uint16 port() const { return port_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint8 reply_;
	uint8 reserved_;
	SOCKS5_Address * bound_;
	uint16 port_;
	int byteorder_;
	bool proc_;
};


class SOCKS4_Message
{
public:
	SOCKS4_Message(bool is_orig);
	~SOCKS4_Message();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	SOCKS4_Request * request() const
		{
		switch ( val_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:74:request", val_case_index(), "true");
				break;
			}
		return request_;
		}
	SOCKS4_Reply * reply() const
		{
		switch ( val_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:75:reply", val_case_index(), "false");
				break;
			}
		return reply_;
		}
	bool is_orig() const { return is_orig_; }
	
protected:
	int val_case_index_;
	SOCKS4_Request * request_;
	SOCKS4_Reply * reply_;
	bool is_orig_;
};


class SOCKS4_Request
{
public:
	SOCKS4_Request();
	~SOCKS4_Request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 command() const { return command_; }
	uint16 port() const { return port_; }
	uint32 addr() const { return addr_; }
	vector<uint8> * user() const { return user_; }
	int host_case_index() const	{ return host_case_index_; }
	vector<uint8> * name() const
		{
		switch ( host_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:84:name", host_case_index(), "true");
				break;
			}
		return name_;
		}
	vector<uint8> * empty() const
		{
		switch ( host_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/socks/socks-protocol.pac:85:empty", host_case_index(), "false");
				break;
			}
		return empty_;
		}
	int byteorder() const { return byteorder_; }
	bool v4a() const { return v4a_; }
	bool proc() const { return proc_; }
	
protected:
	uint8 command_;
	uint16 port_;
	uint32 addr_;
	vector<uint8> * user_;
	uint8 user__elem_;
	int host_case_index_;
	vector<uint8> * name_;
	uint8 name__elem_;
	vector<uint8> * empty_;
	uint8 empty__elem_;
	int byteorder_;
	bool v4a_;
	bool proc_;
};


class SOCKS4_Reply
{
public:
	SOCKS4_Reply();
	~SOCKS4_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSOCKS * t_context);
	
	// Member access functions
	uint8 zero() const { return zero_; }
	uint8 status() const { return status_; }
	uint16 port() const { return port_; }
	uint32 addr() const { return addr_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint8 zero_;
	uint8 status_;
	uint16 port_;
	uint32 addr_;
	int byteorder_;
	bool proc_;
};


class SOCKS_Flow : public binpac::FlowAnalyzer
{
public:
	SOCKS_Flow(SOCKS_Conn * connection, bool is_orig);
	~SOCKS_Flow();
	
	// Member access functions
	SOCKS_Conn * connection() const { return connection_; }
	bool is_orig() const { return is_orig_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
protected:
	SOCKS_Version * dataunit_;
	ContextSOCKS * context_;
	SOCKS_Conn * connection_;
	bool is_orig_;
};


StringVal* array_to_string(vector<uint8> *a);

} // namespace SOCKS
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_socks_socks_pac_h */
