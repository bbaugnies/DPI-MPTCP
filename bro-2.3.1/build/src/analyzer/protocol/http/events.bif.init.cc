// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/http/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_HTTP {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::http_request = internal_handler("http_request");
	bifs.push_back(std::make_pair("http_request", 2));
	::http_reply = internal_handler("http_reply");
	bifs.push_back(std::make_pair("http_reply", 2));
	::http_header = internal_handler("http_header");
	bifs.push_back(std::make_pair("http_header", 2));
	::http_all_headers = internal_handler("http_all_headers");
	bifs.push_back(std::make_pair("http_all_headers", 2));
	::http_begin_entity = internal_handler("http_begin_entity");
	bifs.push_back(std::make_pair("http_begin_entity", 2));
	::http_end_entity = internal_handler("http_end_entity");
	bifs.push_back(std::make_pair("http_end_entity", 2));
	::http_entity_data = internal_handler("http_entity_data");
	bifs.push_back(std::make_pair("http_entity_data", 2));
	::http_content_type = internal_handler("http_content_type");
	bifs.push_back(std::make_pair("http_content_type", 2));
	::http_message_done = internal_handler("http_message_done");
	bifs.push_back(std::make_pair("http_message_done", 2));
	::http_event = internal_handler("http_event");
	bifs.push_back(std::make_pair("http_event", 2));
	::http_stats = internal_handler("http_stats");
	bifs.push_back(std::make_pair("http_stats", 2));

	return bifs;
	}
} }

