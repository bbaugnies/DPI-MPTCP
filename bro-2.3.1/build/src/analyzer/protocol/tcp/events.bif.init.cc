// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/tcp/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_TCP {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::new_connection_contents = internal_handler("new_connection_contents");
	bifs.push_back(std::make_pair("new_connection_contents", 2));
	::connection_attempt = internal_handler("connection_attempt");
	bifs.push_back(std::make_pair("connection_attempt", 2));
	::connection_established = internal_handler("connection_established");
	bifs.push_back(std::make_pair("connection_established", 2));
	::partial_connection = internal_handler("partial_connection");
	bifs.push_back(std::make_pair("partial_connection", 2));
	::connection_partial_close = internal_handler("connection_partial_close");
	bifs.push_back(std::make_pair("connection_partial_close", 2));
	::connection_finished = internal_handler("connection_finished");
	bifs.push_back(std::make_pair("connection_finished", 2));
	::connection_half_finished = internal_handler("connection_half_finished");
	bifs.push_back(std::make_pair("connection_half_finished", 2));
	::connection_rejected = internal_handler("connection_rejected");
	bifs.push_back(std::make_pair("connection_rejected", 2));
	::connection_reset = internal_handler("connection_reset");
	bifs.push_back(std::make_pair("connection_reset", 2));
	::connection_pending = internal_handler("connection_pending");
	bifs.push_back(std::make_pair("connection_pending", 2));
	::connection_SYN_packet = internal_handler("connection_SYN_packet");
	bifs.push_back(std::make_pair("connection_SYN_packet", 2));
	::connection_first_ACK = internal_handler("connection_first_ACK");
	bifs.push_back(std::make_pair("connection_first_ACK", 2));
	::connection_EOF = internal_handler("connection_EOF");
	bifs.push_back(std::make_pair("connection_EOF", 2));
	::tcp_packet = internal_handler("tcp_packet");
	bifs.push_back(std::make_pair("tcp_packet", 2));
	::tcp_option = internal_handler("tcp_option");
	bifs.push_back(std::make_pair("tcp_option", 2));
	::tcp_contents = internal_handler("tcp_contents");
	bifs.push_back(std::make_pair("tcp_contents", 2));
	::tcp_rexmit = internal_handler("tcp_rexmit");
	bifs.push_back(std::make_pair("tcp_rexmit", 2));
	::contents_file_write_failure = internal_handler("contents_file_write_failure");
	bifs.push_back(std::make_pair("contents_file_write_failure", 2));
	::mptcp = internal_handler("mptcp");
	bifs.push_back(std::make_pair("mptcp", 2));

	return bifs;
	}
} }

