Grammar

    0 $accept: flexrule $end

    1 flexrule: re
    2         | error

    3 re: re '|' series
    4   | series
    5   | %empty

    6 series: series singleton
    7       | singleton

    8 singleton: singleton '*'
    9          | singleton '+'
   10          | singleton '?'
   11          | singleton '{' TOK_NUMBER ',' TOK_NUMBER '}'
   12          | singleton '{' TOK_NUMBER ',' '}'
   13          | singleton '{' TOK_NUMBER '}'
   14          | '.'
   15          | full_ccl
   16          | TOK_CCL
   17          | '"' string '"'
   18          | '(' re ')'
   19          | TOK_CHAR
   20          | '^'
   21          | '$'

   22 full_ccl: '[' ccl ']'
   23         | '[' '^' ccl ']'

   24 ccl: ccl TOK_CHAR '-' TOK_CHAR
   25    | ccl TOK_CHAR
   26    | ccl ccl_expr
   27    | %empty

   28 ccl_expr: TOK_CCE

   29 string: string TOK_CHAR
   30       | %empty


Terminals, with rules where they appear

$end (0) 0
'"' (34) 17
'$' (36) 21
'(' (40) 18
')' (41) 18
'*' (42) 8
'+' (43) 9
',' (44) 11 12
'-' (45) 24
'.' (46) 14
'?' (63) 10
'[' (91) 22 23
']' (93) 22 23
'^' (94) 20 23
'{' (123) 11 12 13
'|' (124) 3
'}' (125) 11 12 13
error (256) 2
TOK_CHAR (258) 19 24 25 29
TOK_NUMBER (259) 11 12 13
TOK_CCL (260) 16
TOK_CCE (261) 28


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
flexrule (24)
    on left: 1 2, on right: 0
re (25)
    on left: 3 4 5, on right: 1 3 18
series (26)
    on left: 6 7, on right: 3 4 6
singleton (27)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21, on right: 6 7
    8 9 10 11 12 13
full_ccl (28)
    on left: 22 23, on right: 15
ccl (29)
    on left: 24 25 26 27, on right: 22 23 24 25 26
ccl_expr (30)
    on left: 28, on right: 26
string (31)
    on left: 29 30, on right: 17 29


State 0

    0 $accept: . flexrule $end

    error     shift, and go to state 1
    TOK_CHAR  shift, and go to state 2
    TOK_CCL   shift, and go to state 3
    '.'       shift, and go to state 4
    '"'       shift, and go to state 5
    '('       shift, and go to state 6
    '^'       shift, and go to state 7
    '$'       shift, and go to state 8
    '['       shift, and go to state 9

    $end  reduce using rule 5 (re)
    '|'   reduce using rule 5 (re)

    flexrule   go to state 10
    re         go to state 11
    series     go to state 12
    singleton  go to state 13
    full_ccl   go to state 14


State 1

    2 flexrule: error .

    $default  reduce using rule 2 (flexrule)


State 2

   19 singleton: TOK_CHAR .

    $default  reduce using rule 19 (singleton)


State 3

   16 singleton: TOK_CCL .

    $default  reduce using rule 16 (singleton)


State 4

   14 singleton: '.' .

    $default  reduce using rule 14 (singleton)


State 5

   17 singleton: '"' . string '"'

    $default  reduce using rule 30 (string)

    string  go to state 15


State 6

   18 singleton: '(' . re ')'

    TOK_CHAR  shift, and go to state 2
    TOK_CCL   shift, and go to state 3
    '.'       shift, and go to state 4
    '"'       shift, and go to state 5
    '('       shift, and go to state 6
    '^'       shift, and go to state 7
    '$'       shift, and go to state 8
    '['       shift, and go to state 9

    $default  reduce using rule 5 (re)

    re         go to state 16
    series     go to state 12
    singleton  go to state 13
    full_ccl   go to state 14


State 7

   20 singleton: '^' .

    $default  reduce using rule 20 (singleton)


State 8

   21 singleton: '$' .

    $default  reduce using rule 21 (singleton)


State 9

   22 full_ccl: '[' . ccl ']'
   23         | '[' . '^' ccl ']'

    '^'  shift, and go to state 17

    $default  reduce using rule 27 (ccl)

    ccl  go to state 18


State 10

    0 $accept: flexrule . $end

    $end  shift, and go to state 19


State 11

    1 flexrule: re .
    3 re: re . '|' series

    '|'  shift, and go to state 20

    $default  reduce using rule 1 (flexrule)


State 12

    4 re: series .
    6 series: series . singleton

    TOK_CHAR  shift, and go to state 2
    TOK_CCL   shift, and go to state 3
    '.'       shift, and go to state 4
    '"'       shift, and go to state 5
    '('       shift, and go to state 6
    '^'       shift, and go to state 7
    '$'       shift, and go to state 8
    '['       shift, and go to state 9

    $default  reduce using rule 4 (re)

    singleton  go to state 21
    full_ccl   go to state 14


State 13

    7 series: singleton .
    8 singleton: singleton . '*'
    9          | singleton . '+'
   10          | singleton . '?'
   11          | singleton . '{' TOK_NUMBER ',' TOK_NUMBER '}'
   12          | singleton . '{' TOK_NUMBER ',' '}'
   13          | singleton . '{' TOK_NUMBER '}'

    '*'  shift, and go to state 22
    '+'  shift, and go to state 23
    '?'  shift, and go to state 24
    '{'  shift, and go to state 25

    $default  reduce using rule 7 (series)


State 14

   15 singleton: full_ccl .

    $default  reduce using rule 15 (singleton)


State 15

   17 singleton: '"' string . '"'
   29 string: string . TOK_CHAR

    TOK_CHAR  shift, and go to state 26
    '"'       shift, and go to state 27


State 16

    3 re: re . '|' series
   18 singleton: '(' re . ')'

    '|'  shift, and go to state 20
    ')'  shift, and go to state 28


State 17

   23 full_ccl: '[' '^' . ccl ']'

    $default  reduce using rule 27 (ccl)

    ccl  go to state 29


State 18

   22 full_ccl: '[' ccl . ']'
   24 ccl: ccl . TOK_CHAR '-' TOK_CHAR
   25    | ccl . TOK_CHAR
   26    | ccl . ccl_expr

    TOK_CHAR  shift, and go to state 30
    TOK_CCE   shift, and go to state 31
    ']'       shift, and go to state 32

    ccl_expr  go to state 33


State 19

    0 $accept: flexrule $end .

    $default  accept


State 20

    3 re: re '|' . series

    TOK_CHAR  shift, and go to state 2
    TOK_CCL   shift, and go to state 3
    '.'       shift, and go to state 4
    '"'       shift, and go to state 5
    '('       shift, and go to state 6
    '^'       shift, and go to state 7
    '$'       shift, and go to state 8
    '['       shift, and go to state 9

    series     go to state 34
    singleton  go to state 13
    full_ccl   go to state 14


State 21

    6 series: series singleton .
    8 singleton: singleton . '*'
    9          | singleton . '+'
   10          | singleton . '?'
   11          | singleton . '{' TOK_NUMBER ',' TOK_NUMBER '}'
   12          | singleton . '{' TOK_NUMBER ',' '}'
   13          | singleton . '{' TOK_NUMBER '}'

    '*'  shift, and go to state 22
    '+'  shift, and go to state 23
    '?'  shift, and go to state 24
    '{'  shift, and go to state 25

    $default  reduce using rule 6 (series)


State 22

    8 singleton: singleton '*' .

    $default  reduce using rule 8 (singleton)


State 23

    9 singleton: singleton '+' .

    $default  reduce using rule 9 (singleton)


State 24

   10 singleton: singleton '?' .

    $default  reduce using rule 10 (singleton)


State 25

   11 singleton: singleton '{' . TOK_NUMBER ',' TOK_NUMBER '}'
   12          | singleton '{' . TOK_NUMBER ',' '}'
   13          | singleton '{' . TOK_NUMBER '}'

    TOK_NUMBER  shift, and go to state 35


State 26

   29 string: string TOK_CHAR .

    $default  reduce using rule 29 (string)


State 27

   17 singleton: '"' string '"' .

    $default  reduce using rule 17 (singleton)


State 28

   18 singleton: '(' re ')' .

    $default  reduce using rule 18 (singleton)


State 29

   23 full_ccl: '[' '^' ccl . ']'
   24 ccl: ccl . TOK_CHAR '-' TOK_CHAR
   25    | ccl . TOK_CHAR
   26    | ccl . ccl_expr

    TOK_CHAR  shift, and go to state 30
    TOK_CCE   shift, and go to state 31
    ']'       shift, and go to state 36

    ccl_expr  go to state 33


State 30

   24 ccl: ccl TOK_CHAR . '-' TOK_CHAR
   25    | ccl TOK_CHAR .

    '-'  shift, and go to state 37

    $default  reduce using rule 25 (ccl)


State 31

   28 ccl_expr: TOK_CCE .

    $default  reduce using rule 28 (ccl_expr)


State 32

   22 full_ccl: '[' ccl ']' .

    $default  reduce using rule 22 (full_ccl)


State 33

   26 ccl: ccl ccl_expr .

    $default  reduce using rule 26 (ccl)


State 34

    3 re: re '|' series .
    6 series: series . singleton

    TOK_CHAR  shift, and go to state 2
    TOK_CCL   shift, and go to state 3
    '.'       shift, and go to state 4
    '"'       shift, and go to state 5
    '('       shift, and go to state 6
    '^'       shift, and go to state 7
    '$'       shift, and go to state 8
    '['       shift, and go to state 9

    $default  reduce using rule 3 (re)

    singleton  go to state 21
    full_ccl   go to state 14


State 35

   11 singleton: singleton '{' TOK_NUMBER . ',' TOK_NUMBER '}'
   12          | singleton '{' TOK_NUMBER . ',' '}'
   13          | singleton '{' TOK_NUMBER . '}'

    ','  shift, and go to state 38
    '}'  shift, and go to state 39


State 36

   23 full_ccl: '[' '^' ccl ']' .

    $default  reduce using rule 23 (full_ccl)


State 37

   24 ccl: ccl TOK_CHAR '-' . TOK_CHAR

    TOK_CHAR  shift, and go to state 40


State 38

   11 singleton: singleton '{' TOK_NUMBER ',' . TOK_NUMBER '}'
   12          | singleton '{' TOK_NUMBER ',' . '}'

    TOK_NUMBER  shift, and go to state 41
    '}'         shift, and go to state 42


State 39

   13 singleton: singleton '{' TOK_NUMBER '}' .

    $default  reduce using rule 13 (singleton)


State 40

   24 ccl: ccl TOK_CHAR '-' TOK_CHAR .

    $default  reduce using rule 24 (ccl)


State 41

   11 singleton: singleton '{' TOK_NUMBER ',' TOK_NUMBER . '}'

    '}'  shift, and go to state 43


State 42

   12 singleton: singleton '{' TOK_NUMBER ',' '}' .

    $default  reduce using rule 12 (singleton)


State 43

   11 singleton: singleton '{' TOK_NUMBER ',' TOK_NUMBER '}' .

    $default  reduce using rule 11 (singleton)
