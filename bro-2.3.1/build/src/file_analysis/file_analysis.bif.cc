// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/file_analysis/file_analysis.bif (alternative mode).


#include "file_analysis.bif.h"


#line 5 "file_analysis.bif"

#include "file_analysis/Manager.h"
namespace BifType { namespace Record{ namespace Files {  RecordType * AnalyzerArgs;  } } }

#line 12 "file_analysis.bif"
Val* BifFunc::Files::bro___set_timeout_interval(Frame* frame, val_list* BiF_ARGS)
	
#line 13 "file_analysis.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Files::__set_timeout_interval() takes exactly 2 argument(s)");
		return 0;
		}
	StringVal* file_id = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());
	double t = (double) ((*BiF_ARGS)[1]->AsInterval());

#line 13 "file_analysis.bif"

	bool result = file_mgr->SetTimeoutInterval(file_id->CheckString(), t);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Files::bro___set_timeout_interval

#line 16 "file_analysis.bif"

#line 19 "file_analysis.bif"
Val* BifFunc::Files::bro___add_analyzer(Frame* frame, val_list* BiF_ARGS)
	
#line 20 "file_analysis.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("Files::__add_analyzer() takes exactly 3 argument(s)");
		return 0;
		}
	StringVal* file_id = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());
	Val* tag = (Val*) ((*BiF_ARGS)[1]);
	Val* args = (Val*) ((*BiF_ARGS)[2]);

#line 20 "file_analysis.bif"

	using BifType::Record::Files::AnalyzerArgs;
	RecordVal* rv = args->AsRecordVal()->CoerceTo(AnalyzerArgs);
	bool result = file_mgr->AddAnalyzer(file_id->CheckString(),
	                                    file_mgr->GetComponentTag(tag), rv);
	Unref(rv);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Files::bro___add_analyzer

#line 27 "file_analysis.bif"

#line 30 "file_analysis.bif"
Val* BifFunc::Files::bro___remove_analyzer(Frame* frame, val_list* BiF_ARGS)
	
#line 31 "file_analysis.bif"
{
	if ( BiF_ARGS->length() != 3 )
		{
		reporter->Error("Files::__remove_analyzer() takes exactly 3 argument(s)");
		return 0;
		}
	StringVal* file_id = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());
	Val* tag = (Val*) ((*BiF_ARGS)[1]);
	Val* args = (Val*) ((*BiF_ARGS)[2]);

#line 31 "file_analysis.bif"

	using BifType::Record::Files::AnalyzerArgs;
	RecordVal* rv = args->AsRecordVal()->CoerceTo(AnalyzerArgs);
	bool result = file_mgr->RemoveAnalyzer(file_id->CheckString(),
	                                       file_mgr->GetComponentTag(tag) , rv);
	Unref(rv);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Files::bro___remove_analyzer

#line 38 "file_analysis.bif"

#line 41 "file_analysis.bif"
Val* BifFunc::Files::bro___stop(Frame* frame, val_list* BiF_ARGS)
	
#line 42 "file_analysis.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Files::__stop() takes exactly 1 argument(s)");
		return 0;
		}
	StringVal* file_id = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());

#line 42 "file_analysis.bif"

	bool result = file_mgr->IgnoreFile(file_id->CheckString());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Files::bro___stop

#line 45 "file_analysis.bif"

#line 48 "file_analysis.bif"
Val* BifFunc::Files::bro___analyzer_name(Frame* frame, val_list* BiF_ARGS) 
	
#line 49 "file_analysis.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Files::__analyzer_name() takes exactly 1 argument(s)");
		return 0;
		}
	Val* tag = (Val*) ((*BiF_ARGS)[0]);

#line 49 "file_analysis.bif"

	return new StringVal(file_mgr->GetComponentName(tag));
	} // end of BifFunc::Files::bro___analyzer_name

#line 51 "file_analysis.bif"

#line 63 "file_analysis.bif"
Val* BifFunc::bro_set_file_handle(Frame* frame, val_list* BiF_ARGS)
	
#line 64 "file_analysis.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("set_file_handle() takes exactly 1 argument(s)");
		return 0;
		}
	StringVal* handle = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());

#line 64 "file_analysis.bif"

	file_mgr->SetHandle(handle->CheckString());
	return 0;
	} // end of BifFunc::bro_set_file_handle

#line 67 "file_analysis.bif"
namespace BifConst { namespace Files {  StringVal* salt;  }  }
