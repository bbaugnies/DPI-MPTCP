// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ssl/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_SSL {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::ssl_client_hello = internal_handler("ssl_client_hello");
	bifs.push_back(std::make_pair("ssl_client_hello", 2));
	::ssl_server_hello = internal_handler("ssl_server_hello");
	bifs.push_back(std::make_pair("ssl_server_hello", 2));
	::ssl_extension = internal_handler("ssl_extension");
	bifs.push_back(std::make_pair("ssl_extension", 2));
	::ssl_extension_elliptic_curves = internal_handler("ssl_extension_elliptic_curves");
	bifs.push_back(std::make_pair("ssl_extension_elliptic_curves", 2));
	::ssl_extension_ec_point_formats = internal_handler("ssl_extension_ec_point_formats");
	bifs.push_back(std::make_pair("ssl_extension_ec_point_formats", 2));
	::ssl_server_curve = internal_handler("ssl_server_curve");
	bifs.push_back(std::make_pair("ssl_server_curve", 2));
	::ssl_dh_server_params = internal_handler("ssl_dh_server_params");
	bifs.push_back(std::make_pair("ssl_dh_server_params", 2));
	::ssl_extension_application_layer_protocol_negotiation = internal_handler("ssl_extension_application_layer_protocol_negotiation");
	bifs.push_back(std::make_pair("ssl_extension_application_layer_protocol_negotiation", 2));
	::ssl_extension_server_name = internal_handler("ssl_extension_server_name");
	bifs.push_back(std::make_pair("ssl_extension_server_name", 2));
	::ssl_established = internal_handler("ssl_established");
	bifs.push_back(std::make_pair("ssl_established", 2));
	::ssl_alert = internal_handler("ssl_alert");
	bifs.push_back(std::make_pair("ssl_alert", 2));
	::ssl_session_ticket_handshake = internal_handler("ssl_session_ticket_handshake");
	bifs.push_back(std::make_pair("ssl_session_ticket_handshake", 2));
	::ssl_heartbeat = internal_handler("ssl_heartbeat");
	bifs.push_back(std::make_pair("ssl_heartbeat", 2));
	::ssl_encrypted_data = internal_handler("ssl_encrypted_data");
	bifs.push_back(std::make_pair("ssl_encrypted_data", 2));
	::ssl_stapled_ocsp = internal_handler("ssl_stapled_ocsp");
	bifs.push_back(std::make_pair("ssl_stapled_ocsp", 2));
	::ssl_handshake_message = internal_handler("ssl_handshake_message");
	bifs.push_back(std::make_pair("ssl_handshake_message", 2));
	::ssl_change_cipher_spec = internal_handler("ssl_change_cipher_spec");
	bifs.push_back(std::make_pair("ssl_change_cipher_spec", 2));

	return bifs;
	}
} }

