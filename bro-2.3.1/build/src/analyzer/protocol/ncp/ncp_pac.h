// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ncp/ncp.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_ncp_ncp_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_ncp_ncp_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "events.bif.h"

namespace binpac {

namespace NCP {
class ContextNCP;
class ncp_request;
class ncp_reply;
class ncp_frame;
class ncp_over_tcpip_req_hdr;
class ncp_over_tcpip_frame;
} // namespace NCP

double network_time();
namespace NCP {

class ContextNCP
{
public:
	ContextNCP();
	~ContextNCP();
	
	// Member access functions
	
protected:
};


class ncp_request
{
public:
	ncp_request(uint32 length);
	~ncp_request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	vector<uint8> * data() const { return data_; }
	uint32 length() const { return length_; }
	uint8 function() const { return function_; }
	uint8 subfunction() const { return subfunction_; }
	
protected:
	vector<uint8> * data_;
	uint8 data__elem_;
	uint32 length_;
	uint8 function_;
	uint8 subfunction_;
};


class ncp_reply
{
public:
	ncp_reply(uint32 length);
	~ncp_reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 completion_code() const { return completion_code_; }
	uint8 conn_status() const { return conn_status_; }
	vector<uint8> * data() const { return data_; }
	uint32 length() const { return length_; }
	
protected:
	uint8 completion_code_;
	uint8 conn_status_;
	vector<uint8> * data_;
	uint8 data__elem_;
	uint32 length_;
};


class ncp_frame
{
public:
	ncp_frame(bool is_orig, uint32 length);
	~ncp_frame();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 frame_type() const { return frame_type_; }
	uint8 seq() const { return seq_; }
	uint8 conn_low() const { return conn_low_; }
	uint8 task() const { return task_; }
	uint8 conn_high() const { return conn_high_; }
	int body_case_index() const	{ return body_case_index_; }
	ncp_request * request() const
		{
		switch ( body_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ncp/ncp.pac:32:request", body_case_index(), "true");
				break;
			}
		return request_;
		}
	ncp_reply * reply() const
		{
		switch ( body_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ncp/ncp.pac:33:reply", body_case_index(), "false");
				break;
			}
		return reply_;
		}
	bool is_orig() const { return is_orig_; }
	uint32 length() const { return length_; }
	int body_length() const { return body_length_; }
	
protected:
	uint16 frame_type_;
	uint8 seq_;
	uint8 conn_low_;
	uint8 task_;
	uint8 conn_high_;
	int body_case_index_;
	ncp_request * request_;
	ncp_reply * reply_;
	bool is_orig_;
	uint32 length_;
	int body_length_;
};


class ncp_over_tcpip_req_hdr
{
public:
	ncp_over_tcpip_req_hdr();
	~ncp_over_tcpip_req_hdr();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 version() const { return version_; }
	uint32 reply_buf_size() const { return reply_buf_size_; }
	
protected:
	uint32 version_;
	uint32 reply_buf_size_;
};


class ncp_over_tcpip_frame
{
public:
	ncp_over_tcpip_frame(bool is_orig);
	~ncp_over_tcpip_frame();
	int initial_buffer_length() const { return 8; }
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 signature() const { return signature_; }
	uint32 length() const { return length_; }
	int aux_case_index() const	{ return aux_case_index_; }
	ncp_over_tcpip_req_hdr * aux_req() const
		{
		switch ( aux_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ncp/ncp.pac:49:aux_req", aux_case_index(), "true");
				break;
			}
		return aux_req_;
		}
	ncp_frame * ncp() const { return ncp_; }
	bool is_orig() const { return is_orig_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 signature_;
	uint32 length_;
	int aux_case_index_;
	ncp_over_tcpip_req_hdr * aux_req_;
	ncp_frame * ncp_;
	bool is_orig_;
	int byteorder_;
};

} // namespace NCP
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_ncp_ncp_pac_h */
