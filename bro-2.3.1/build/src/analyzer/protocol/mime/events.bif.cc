// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/mime/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr mime_begin_entity; 
void BifEvent::generate_mime_begin_entity(analyzer::Analyzer* analyzer, Connection* c)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_begin_entity is NULL, which should happen *before*
	// BifEvent::generate_mime_begin_entity is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());

	mgr.QueueEvent(::mime_begin_entity, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_end_entity; 
void BifEvent::generate_mime_end_entity(analyzer::Analyzer* analyzer, Connection* c)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_end_entity is NULL, which should happen *before*
	// BifEvent::generate_mime_end_entity is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());

	mgr.QueueEvent(::mime_end_entity, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_one_header; 
void BifEvent::generate_mime_one_header(analyzer::Analyzer* analyzer, Connection* c, Val* h)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_one_header is NULL, which should happen *before*
	// BifEvent::generate_mime_one_header is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(h);

	mgr.QueueEvent(::mime_one_header, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_all_headers; 
void BifEvent::generate_mime_all_headers(analyzer::Analyzer* analyzer, Connection* c, Val* hlist)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_all_headers is NULL, which should happen *before*
	// BifEvent::generate_mime_all_headers is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hlist);

	mgr.QueueEvent(::mime_all_headers, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_segment_data; 
void BifEvent::generate_mime_segment_data(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t length, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_segment_data is NULL, which should happen *before*
	// BifEvent::generate_mime_segment_data is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(length, TYPE_COUNT));
	vl->append(data);

	mgr.QueueEvent(::mime_segment_data, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_entity_data; 
void BifEvent::generate_mime_entity_data(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t length, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_entity_data is NULL, which should happen *before*
	// BifEvent::generate_mime_entity_data is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(length, TYPE_COUNT));
	vl->append(data);

	mgr.QueueEvent(::mime_entity_data, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_all_data; 
void BifEvent::generate_mime_all_data(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t length, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_all_data is NULL, which should happen *before*
	// BifEvent::generate_mime_all_data is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(length, TYPE_COUNT));
	vl->append(data);

	mgr.QueueEvent(::mime_all_data, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_event; 
void BifEvent::generate_mime_event(analyzer::Analyzer* analyzer, Connection* c, StringVal* event_type, StringVal* detail)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_event is NULL, which should happen *before*
	// BifEvent::generate_mime_event is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(event_type);
	vl->append(detail);

	mgr.QueueEvent(::mime_event, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr mime_content_hash; 
void BifEvent::generate_mime_content_hash(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t content_len, StringVal* hash_value)
	{
	// Note that it is intentional that here we do not
	// check if ::mime_content_hash is NULL, which should happen *before*
	// BifEvent::generate_mime_content_hash is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(content_len, TYPE_COUNT));
	vl->append(hash_value);

	mgr.QueueEvent(::mime_content_hash, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
