// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/snmp/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr snmp_get_request; 
void BifEvent::generate_snmp_get_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_get_request is NULL, which should happen *before*
	// BifEvent::generate_snmp_get_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_get_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_get_next_request; 
void BifEvent::generate_snmp_get_next_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_get_next_request is NULL, which should happen *before*
	// BifEvent::generate_snmp_get_next_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_get_next_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_response; 
void BifEvent::generate_snmp_response(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_response is NULL, which should happen *before*
	// BifEvent::generate_snmp_response is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_response, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_set_request; 
void BifEvent::generate_snmp_set_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_set_request is NULL, which should happen *before*
	// BifEvent::generate_snmp_set_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_set_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_trap; 
void BifEvent::generate_snmp_trap(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_trap is NULL, which should happen *before*
	// BifEvent::generate_snmp_trap is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_trap, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_get_bulk_request; 
void BifEvent::generate_snmp_get_bulk_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_get_bulk_request is NULL, which should happen *before*
	// BifEvent::generate_snmp_get_bulk_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_get_bulk_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_inform_request; 
void BifEvent::generate_snmp_inform_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_inform_request is NULL, which should happen *before*
	// BifEvent::generate_snmp_inform_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_inform_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_trapV2; 
void BifEvent::generate_snmp_trapV2(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_trapV2 is NULL, which should happen *before*
	// BifEvent::generate_snmp_trapV2 is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_trapV2, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_report; 
void BifEvent::generate_snmp_report(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, Val* pdu)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_report is NULL, which should happen *before*
	// BifEvent::generate_snmp_report is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(pdu);

	mgr.QueueEvent(::snmp_report, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_unknown_pdu; 
void BifEvent::generate_snmp_unknown_pdu(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, bro_uint_t tag)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_unknown_pdu is NULL, which should happen *before*
	// BifEvent::generate_snmp_unknown_pdu is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(new Val(tag, TYPE_COUNT));

	mgr.QueueEvent(::snmp_unknown_pdu, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_unknown_scoped_pdu; 
void BifEvent::generate_snmp_unknown_scoped_pdu(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header, bro_uint_t tag)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_unknown_scoped_pdu is NULL, which should happen *before*
	// BifEvent::generate_snmp_unknown_scoped_pdu is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);
	vl->append(new Val(tag, TYPE_COUNT));

	mgr.QueueEvent(::snmp_unknown_scoped_pdu, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_encrypted_pdu; 
void BifEvent::generate_snmp_encrypted_pdu(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* header)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_encrypted_pdu is NULL, which should happen *before*
	// BifEvent::generate_snmp_encrypted_pdu is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(header);

	mgr.QueueEvent(::snmp_encrypted_pdu, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr snmp_unknown_header_version; 
void BifEvent::generate_snmp_unknown_header_version(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t version)
	{
	// Note that it is intentional that here we do not
	// check if ::snmp_unknown_header_version is NULL, which should happen *before*
	// BifEvent::generate_snmp_unknown_header_version is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(version, TYPE_COUNT));

	mgr.QueueEvent(::snmp_unknown_header_version, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
