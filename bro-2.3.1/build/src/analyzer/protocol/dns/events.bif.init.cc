// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dns/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_DNS {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::dns_message = internal_handler("dns_message");
	bifs.push_back(std::make_pair("dns_message", 2));
	::dns_request = internal_handler("dns_request");
	bifs.push_back(std::make_pair("dns_request", 2));
	::dns_rejected = internal_handler("dns_rejected");
	bifs.push_back(std::make_pair("dns_rejected", 2));
	::dns_query_reply = internal_handler("dns_query_reply");
	bifs.push_back(std::make_pair("dns_query_reply", 2));
	::dns_A_reply = internal_handler("dns_A_reply");
	bifs.push_back(std::make_pair("dns_A_reply", 2));
	::dns_AAAA_reply = internal_handler("dns_AAAA_reply");
	bifs.push_back(std::make_pair("dns_AAAA_reply", 2));
	::dns_A6_reply = internal_handler("dns_A6_reply");
	bifs.push_back(std::make_pair("dns_A6_reply", 2));
	::dns_NS_reply = internal_handler("dns_NS_reply");
	bifs.push_back(std::make_pair("dns_NS_reply", 2));
	::dns_CNAME_reply = internal_handler("dns_CNAME_reply");
	bifs.push_back(std::make_pair("dns_CNAME_reply", 2));
	::dns_PTR_reply = internal_handler("dns_PTR_reply");
	bifs.push_back(std::make_pair("dns_PTR_reply", 2));
	::dns_SOA_reply = internal_handler("dns_SOA_reply");
	bifs.push_back(std::make_pair("dns_SOA_reply", 2));
	::dns_WKS_reply = internal_handler("dns_WKS_reply");
	bifs.push_back(std::make_pair("dns_WKS_reply", 2));
	::dns_HINFO_reply = internal_handler("dns_HINFO_reply");
	bifs.push_back(std::make_pair("dns_HINFO_reply", 2));
	::dns_MX_reply = internal_handler("dns_MX_reply");
	bifs.push_back(std::make_pair("dns_MX_reply", 2));
	::dns_TXT_reply = internal_handler("dns_TXT_reply");
	bifs.push_back(std::make_pair("dns_TXT_reply", 2));
	::dns_SRV_reply = internal_handler("dns_SRV_reply");
	bifs.push_back(std::make_pair("dns_SRV_reply", 2));
	::dns_unknown_reply = internal_handler("dns_unknown_reply");
	bifs.push_back(std::make_pair("dns_unknown_reply", 2));
	::dns_EDNS_addl = internal_handler("dns_EDNS_addl");
	bifs.push_back(std::make_pair("dns_EDNS_addl", 2));
	::dns_TSIG_addl = internal_handler("dns_TSIG_addl");
	bifs.push_back(std::make_pair("dns_TSIG_addl", 2));
	::dns_end = internal_handler("dns_end");
	bifs.push_back(std::make_pair("dns_end", 2));
	::dns_full_request = internal_handler("dns_full_request");
	bifs.push_back(std::make_pair("dns_full_request", 2));
	::non_dns_request = internal_handler("non_dns_request");
	bifs.push_back(std::make_pair("non_dns_request", 2));

	return bifs;
	}
} }

