# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_broccoli_intern', [dirname(__file__)])
        except ImportError:
            import _broccoli_intern
            return _broccoli_intern
        if fp is not None:
            try:
                _mod = imp.load_module('_broccoli_intern', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _broccoli_intern = swig_import_helper()
    del swig_import_helper
else:
    import _broccoli_intern
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


BRO_TYPE_UNKNOWN = _broccoli_intern.BRO_TYPE_UNKNOWN
BRO_TYPE_BOOL = _broccoli_intern.BRO_TYPE_BOOL
BRO_TYPE_INT = _broccoli_intern.BRO_TYPE_INT
BRO_TYPE_COUNT = _broccoli_intern.BRO_TYPE_COUNT
BRO_TYPE_COUNTER = _broccoli_intern.BRO_TYPE_COUNTER
BRO_TYPE_DOUBLE = _broccoli_intern.BRO_TYPE_DOUBLE
BRO_TYPE_TIME = _broccoli_intern.BRO_TYPE_TIME
BRO_TYPE_INTERVAL = _broccoli_intern.BRO_TYPE_INTERVAL
BRO_TYPE_STRING = _broccoli_intern.BRO_TYPE_STRING
BRO_TYPE_PATTERN = _broccoli_intern.BRO_TYPE_PATTERN
BRO_TYPE_ENUM = _broccoli_intern.BRO_TYPE_ENUM
BRO_TYPE_TIMER = _broccoli_intern.BRO_TYPE_TIMER
BRO_TYPE_PORT = _broccoli_intern.BRO_TYPE_PORT
BRO_TYPE_IPADDR = _broccoli_intern.BRO_TYPE_IPADDR
BRO_TYPE_SUBNET = _broccoli_intern.BRO_TYPE_SUBNET
BRO_TYPE_ANY = _broccoli_intern.BRO_TYPE_ANY
BRO_TYPE_TABLE = _broccoli_intern.BRO_TYPE_TABLE
BRO_TYPE_UNION = _broccoli_intern.BRO_TYPE_UNION
BRO_TYPE_RECORD = _broccoli_intern.BRO_TYPE_RECORD
BRO_TYPE_LIST = _broccoli_intern.BRO_TYPE_LIST
BRO_TYPE_FUNC = _broccoli_intern.BRO_TYPE_FUNC
BRO_TYPE_FILE = _broccoli_intern.BRO_TYPE_FILE
BRO_TYPE_VECTOR = _broccoli_intern.BRO_TYPE_VECTOR
BRO_TYPE_ERROR = _broccoli_intern.BRO_TYPE_ERROR
BRO_TYPE_PACKET = _broccoli_intern.BRO_TYPE_PACKET
BRO_TYPE_SET = _broccoli_intern.BRO_TYPE_SET
BRO_TYPE_MAX = _broccoli_intern.BRO_TYPE_MAX
BRO_CFLAG_NONE = _broccoli_intern.BRO_CFLAG_NONE
BRO_CFLAG_RECONNECT = _broccoli_intern.BRO_CFLAG_RECONNECT
BRO_CFLAG_ALWAYS_QUEUE = _broccoli_intern.BRO_CFLAG_ALWAYS_QUEUE
BRO_CFLAG_SHAREABLE = _broccoli_intern.BRO_CFLAG_SHAREABLE
BRO_CFLAG_DONTCACHE = _broccoli_intern.BRO_CFLAG_DONTCACHE
BRO_CFLAG_YIELD = _broccoli_intern.BRO_CFLAG_YIELD
BRO_CFLAG_CACHE = _broccoli_intern.BRO_CFLAG_CACHE

def bro_init(*args):
  return _broccoli_intern.bro_init(*args)
bro_init = _broccoli_intern.bro_init

def bro_conn_new_str(*args):
  return _broccoli_intern.bro_conn_new_str(*args)
bro_conn_new_str = _broccoli_intern.bro_conn_new_str

def bro_conn_set_class(*args):
  return _broccoli_intern.bro_conn_set_class(*args)
bro_conn_set_class = _broccoli_intern.bro_conn_set_class

def bro_conn_connect(*args):
  return _broccoli_intern.bro_conn_connect(*args)
bro_conn_connect = _broccoli_intern.bro_conn_connect

def bro_conn_process_input(*args):
  return _broccoli_intern.bro_conn_process_input(*args)
bro_conn_process_input = _broccoli_intern.bro_conn_process_input

def bro_event_queue_length(*args):
  return _broccoli_intern.bro_event_queue_length(*args)
bro_event_queue_length = _broccoli_intern.bro_event_queue_length

def bro_event_new(*args):
  return _broccoli_intern.bro_event_new(*args)
bro_event_new = _broccoli_intern.bro_event_new

def bro_event_free(*args):
  return _broccoli_intern.bro_event_free(*args)
bro_event_free = _broccoli_intern.bro_event_free

def bro_event_add_val(*args):
  return _broccoli_intern.bro_event_add_val(*args)
bro_event_add_val = _broccoli_intern.bro_event_add_val

def bro_event_send(*args):
  return _broccoli_intern.bro_event_send(*args)
bro_event_send = _broccoli_intern.bro_event_send

def bro_event_registry_add_compact(*args):
  return _broccoli_intern.bro_event_registry_add_compact(*args)
bro_event_registry_add_compact = _broccoli_intern.bro_event_registry_add_compact

def bro_util_current_time():
  return _broccoli_intern.bro_util_current_time()
bro_util_current_time = _broccoli_intern.bro_util_current_time

def bro_conn_get_fd(*args):
  return _broccoli_intern.bro_conn_get_fd(*args)
bro_conn_get_fd = _broccoli_intern.bro_conn_get_fd

def bro_conn_delete(*args):
  return _broccoli_intern.bro_conn_delete(*args)
bro_conn_delete = _broccoli_intern.bro_conn_delete

def bro_conn_alive(*args):
  return _broccoli_intern.bro_conn_alive(*args)
bro_conn_alive = _broccoli_intern.bro_conn_alive
# This file is compatible with both classic and new-style classes.


