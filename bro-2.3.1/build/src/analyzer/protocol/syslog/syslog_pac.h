// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/syslog/syslog.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_syslog_syslog_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_syslog_syslog_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "events.bif.h"

namespace binpac {

namespace Syslog {
class ContextSyslog;
class Syslog_Message;
extern RegExMatcher Syslog_Priority_re_001;

class Syslog_Priority;
class Syslog_Conn;
class Syslog_Flow;
} // namespace Syslog

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace Syslog {

class ContextSyslog
{
public:
	ContextSyslog(Syslog_Conn * connection, Syslog_Flow * flow);
	~ContextSyslog();
	
	// Member access functions
	Syslog_Conn * connection() const { return connection_; }
	Syslog_Flow * flow() const { return flow_; }
	
protected:
	Syslog_Conn * connection_;
	Syslog_Flow * flow_;
};


class Syslog_Message
{
public:
	Syslog_Message();
	~Syslog_Message();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextSyslog * t_context);
	
	// Member access functions
	Syslog_Priority * PRI() const { return PRI_; }
	bytestring const & msg() const { return msg_; }
	int byteorder() const { return byteorder_; }
	int proc_syslog_message() const { return proc_syslog_message_; }
	
protected:
	Syslog_Priority * PRI_;
	bytestring msg_;
	int byteorder_;
	int proc_syslog_message_;
};


class Syslog_Priority
{
public:
	Syslog_Priority();
	~Syslog_Priority();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 lt() const { return lt_; }
	bytestring const & val() const { return val_; }
	uint8 gt() const { return gt_; }
	int val_length() const { return val_length_; }
	int int_val() const { return int_val_; }
	int severity() const { return severity_; }
	int facility() const { return facility_; }
	
protected:
	uint8 lt_;
	bytestring val_;
	uint8 gt_;
	int val_length_;
	int int_val_;
	int severity_;
	int facility_;
};


class Syslog_Conn : public binpac::ConnectionAnalyzer
{
public:
	Syslog_Conn(BroAnalyzer const & bro_analyzer);
	~Syslog_Conn();
	
	// Member access functions
	Syslog_Flow * upflow() const { return upflow_; }
	Syslog_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	Syslog_Flow * upflow_;
	Syslog_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class Syslog_Flow : public binpac::FlowAnalyzer
{
public:
	Syslog_Flow(Syslog_Conn * connection);
	~Syslog_Flow();
	
	// Member access functions
	Syslog_Conn * connection() const { return connection_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool process_syslog_message(Syslog_Message * m);
	
protected:
	Syslog_Message * dataunit_;
	ContextSyslog * context_;
	Syslog_Conn * connection_;
};

} // namespace Syslog
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_syslog_syslog_pac_h */
