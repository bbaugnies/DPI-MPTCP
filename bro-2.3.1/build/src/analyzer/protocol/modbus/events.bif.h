// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/modbus/events.bif (plugin mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_modbus_events_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_modbus_events_bif
#define _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_modbus_events_bif
#include "bro-bif.h"
#endif
#endif

extern EventHandlerPtr modbus_message; 
namespace BifEvent {  void generate_modbus_message(analyzer::Analyzer* analyzer, Connection* c, Val* headers, int is_orig);  } 
extern EventHandlerPtr modbus_exception; 
namespace BifEvent {  void generate_modbus_exception(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t code);  } 
extern EventHandlerPtr modbus_read_coils_request; 
namespace BifEvent {  void generate_modbus_read_coils_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, bro_uint_t quantity);  } 
extern EventHandlerPtr modbus_read_coils_response; 
namespace BifEvent {  void generate_modbus_read_coils_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, Val* coils);  } 
extern EventHandlerPtr modbus_read_discrete_inputs_request; 
namespace BifEvent {  void generate_modbus_read_discrete_inputs_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, bro_uint_t quantity);  } 
extern EventHandlerPtr modbus_read_discrete_inputs_response; 
namespace BifEvent {  void generate_modbus_read_discrete_inputs_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, Val* coils);  } 
extern EventHandlerPtr modbus_read_holding_registers_request; 
namespace BifEvent {  void generate_modbus_read_holding_registers_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, bro_uint_t quantity);  } 
extern EventHandlerPtr modbus_read_holding_registers_response; 
namespace BifEvent {  void generate_modbus_read_holding_registers_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, Val* registers);  } 
extern EventHandlerPtr modbus_read_input_registers_request; 
namespace BifEvent {  void generate_modbus_read_input_registers_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, bro_uint_t quantity);  } 
extern EventHandlerPtr modbus_read_input_registers_response; 
namespace BifEvent {  void generate_modbus_read_input_registers_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, Val* registers);  } 
extern EventHandlerPtr modbus_write_single_coil_request; 
namespace BifEvent {  void generate_modbus_write_single_coil_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t address, int value);  } 
extern EventHandlerPtr modbus_write_single_coil_response; 
namespace BifEvent {  void generate_modbus_write_single_coil_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t address, int value);  } 
extern EventHandlerPtr modbus_write_single_register_request; 
namespace BifEvent {  void generate_modbus_write_single_register_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t address, bro_uint_t value);  } 
extern EventHandlerPtr modbus_write_single_register_response; 
namespace BifEvent {  void generate_modbus_write_single_register_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t address, bro_uint_t value);  } 
extern EventHandlerPtr modbus_write_multiple_coils_request; 
namespace BifEvent {  void generate_modbus_write_multiple_coils_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, Val* coils);  } 
extern EventHandlerPtr modbus_write_multiple_coils_response; 
namespace BifEvent {  void generate_modbus_write_multiple_coils_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, bro_uint_t quantity);  } 
extern EventHandlerPtr modbus_write_multiple_registers_request; 
namespace BifEvent {  void generate_modbus_write_multiple_registers_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, Val* registers);  } 
extern EventHandlerPtr modbus_write_multiple_registers_response; 
namespace BifEvent {  void generate_modbus_write_multiple_registers_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address, bro_uint_t quantity);  } 
extern EventHandlerPtr modbus_read_file_record_request; 
namespace BifEvent {  void generate_modbus_read_file_record_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers);  } 
extern EventHandlerPtr modbus_read_file_record_response; 
namespace BifEvent {  void generate_modbus_read_file_record_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers);  } 
extern EventHandlerPtr modbus_write_file_record_request; 
namespace BifEvent {  void generate_modbus_write_file_record_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers);  } 
extern EventHandlerPtr modbus_write_file_record_response; 
namespace BifEvent {  void generate_modbus_write_file_record_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers);  } 
extern EventHandlerPtr modbus_mask_write_register_request; 
namespace BifEvent {  void generate_modbus_mask_write_register_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t address, bro_uint_t and_mask, bro_uint_t or_mask);  } 
extern EventHandlerPtr modbus_mask_write_register_response; 
namespace BifEvent {  void generate_modbus_mask_write_register_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t address, bro_uint_t and_mask, bro_uint_t or_mask);  } 
extern EventHandlerPtr modbus_read_write_multiple_registers_request; 
namespace BifEvent {  void generate_modbus_read_write_multiple_registers_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t read_start_address, bro_uint_t read_quantity, bro_uint_t write_start_address, Val* write_registers);  } 
extern EventHandlerPtr modbus_read_write_multiple_registers_response; 
namespace BifEvent {  void generate_modbus_read_write_multiple_registers_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, Val* written_registers);  } 
extern EventHandlerPtr modbus_read_fifo_queue_request; 
namespace BifEvent {  void generate_modbus_read_fifo_queue_request(analyzer::Analyzer* analyzer, Connection* c, Val* headers, bro_uint_t start_address);  } 
extern EventHandlerPtr modbus_read_fifo_queue_response; 
namespace BifEvent {  void generate_modbus_read_fifo_queue_response(analyzer::Analyzer* analyzer, Connection* c, Val* headers, Val* fifos);  } 

#endif
