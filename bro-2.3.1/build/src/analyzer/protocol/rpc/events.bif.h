// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/rpc/events.bif (plugin mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_rpc_events_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_rpc_events_bif
#define _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_rpc_events_bif
#include "bro-bif.h"
#endif
#endif

extern EventHandlerPtr nfs_proc_null; 
namespace BifEvent {  void generate_nfs_proc_null(analyzer::Analyzer* analyzer, Connection* c, Val* info);  } 
extern EventHandlerPtr nfs_proc_getattr; 
namespace BifEvent {  void generate_nfs_proc_getattr(analyzer::Analyzer* analyzer, Connection* c, Val* info, StringVal* fh, Val* attrs);  } 
extern EventHandlerPtr nfs_proc_lookup; 
namespace BifEvent {  void generate_nfs_proc_lookup(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_read; 
namespace BifEvent {  void generate_nfs_proc_read(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_readlink; 
namespace BifEvent {  void generate_nfs_proc_readlink(analyzer::Analyzer* analyzer, Connection* c, Val* info, StringVal* fh, Val* rep);  } 
extern EventHandlerPtr nfs_proc_write; 
namespace BifEvent {  void generate_nfs_proc_write(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_create; 
namespace BifEvent {  void generate_nfs_proc_create(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_mkdir; 
namespace BifEvent {  void generate_nfs_proc_mkdir(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_remove; 
namespace BifEvent {  void generate_nfs_proc_remove(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_rmdir; 
namespace BifEvent {  void generate_nfs_proc_rmdir(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_readdir; 
namespace BifEvent {  void generate_nfs_proc_readdir(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* req, Val* rep);  } 
extern EventHandlerPtr nfs_proc_not_implemented; 
namespace BifEvent {  void generate_nfs_proc_not_implemented(analyzer::Analyzer* analyzer, Connection* c, Val* info, Val* proc);  } 
extern EventHandlerPtr nfs_reply_status; 
namespace BifEvent {  void generate_nfs_reply_status(analyzer::Analyzer* analyzer, Connection* n, Val* info);  } 
extern EventHandlerPtr pm_request_null; 
namespace BifEvent {  void generate_pm_request_null(analyzer::Analyzer* analyzer, Connection* r);  } 
extern EventHandlerPtr pm_request_set; 
namespace BifEvent {  void generate_pm_request_set(analyzer::Analyzer* analyzer, Connection* r, Val* m, int success);  } 
extern EventHandlerPtr pm_request_unset; 
namespace BifEvent {  void generate_pm_request_unset(analyzer::Analyzer* analyzer, Connection* r, Val* m, int success);  } 
extern EventHandlerPtr pm_request_getport; 
namespace BifEvent {  void generate_pm_request_getport(analyzer::Analyzer* analyzer, Connection* r, Val* pr, PortVal* p);  } 
extern EventHandlerPtr pm_request_dump; 
namespace BifEvent {  void generate_pm_request_dump(analyzer::Analyzer* analyzer, Connection* r, Val* m);  } 
extern EventHandlerPtr pm_request_callit; 
namespace BifEvent {  void generate_pm_request_callit(analyzer::Analyzer* analyzer, Connection* r, Val* call, PortVal* p);  } 
extern EventHandlerPtr pm_attempt_null; 
namespace BifEvent {  void generate_pm_attempt_null(analyzer::Analyzer* analyzer, Connection* r, Val* status);  } 
extern EventHandlerPtr pm_attempt_set; 
namespace BifEvent {  void generate_pm_attempt_set(analyzer::Analyzer* analyzer, Connection* r, Val* status, Val* m);  } 
extern EventHandlerPtr pm_attempt_unset; 
namespace BifEvent {  void generate_pm_attempt_unset(analyzer::Analyzer* analyzer, Connection* r, Val* status, Val* m);  } 
extern EventHandlerPtr pm_attempt_getport; 
namespace BifEvent {  void generate_pm_attempt_getport(analyzer::Analyzer* analyzer, Connection* r, Val* status, Val* pr);  } 
extern EventHandlerPtr pm_attempt_dump; 
namespace BifEvent {  void generate_pm_attempt_dump(analyzer::Analyzer* analyzer, Connection* r, Val* status);  } 
extern EventHandlerPtr pm_attempt_callit; 
namespace BifEvent {  void generate_pm_attempt_callit(analyzer::Analyzer* analyzer, Connection* r, Val* status, Val* call);  } 
extern EventHandlerPtr pm_bad_port; 
namespace BifEvent {  void generate_pm_bad_port(analyzer::Analyzer* analyzer, Connection* r, bro_uint_t bad_p);  } 
extern EventHandlerPtr rpc_dialogue; 
namespace BifEvent {  void generate_rpc_dialogue(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t prog, bro_uint_t ver, bro_uint_t proc, Val* status, double start_time, bro_uint_t call_len, bro_uint_t reply_len);  } 
extern EventHandlerPtr rpc_call; 
namespace BifEvent {  void generate_rpc_call(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t xid, bro_uint_t prog, bro_uint_t ver, bro_uint_t proc, bro_uint_t call_len);  } 
extern EventHandlerPtr rpc_reply; 
namespace BifEvent {  void generate_rpc_reply(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t xid, Val* status, bro_uint_t reply_len);  } 

#endif
