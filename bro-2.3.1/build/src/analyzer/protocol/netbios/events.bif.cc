// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/netbios/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr netbios_session_message; 
void BifEvent::generate_netbios_session_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t msg_type, bro_uint_t data_len)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_message is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(msg_type, TYPE_COUNT));
	vl->append(new Val(data_len, TYPE_COUNT));

	mgr.QueueEvent(::netbios_session_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr netbios_session_request; 
void BifEvent::generate_netbios_session_request(analyzer::Analyzer* analyzer, Connection* c, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_request is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);

	mgr.QueueEvent(::netbios_session_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr netbios_session_accepted; 
void BifEvent::generate_netbios_session_accepted(analyzer::Analyzer* analyzer, Connection* c, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_accepted is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_accepted is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);

	mgr.QueueEvent(::netbios_session_accepted, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr netbios_session_rejected; 
void BifEvent::generate_netbios_session_rejected(analyzer::Analyzer* analyzer, Connection* c, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_rejected is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_rejected is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);

	mgr.QueueEvent(::netbios_session_rejected, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr netbios_session_raw_message; 
void BifEvent::generate_netbios_session_raw_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_raw_message is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_raw_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(msg);

	mgr.QueueEvent(::netbios_session_raw_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr netbios_session_ret_arg_resp; 
void BifEvent::generate_netbios_session_ret_arg_resp(analyzer::Analyzer* analyzer, Connection* c, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_ret_arg_resp is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_ret_arg_resp is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);

	mgr.QueueEvent(::netbios_session_ret_arg_resp, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr netbios_session_keepalive; 
void BifEvent::generate_netbios_session_keepalive(analyzer::Analyzer* analyzer, Connection* c, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::netbios_session_keepalive is NULL, which should happen *before*
	// BifEvent::generate_netbios_session_keepalive is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);

	mgr.QueueEvent(::netbios_session_keepalive, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
