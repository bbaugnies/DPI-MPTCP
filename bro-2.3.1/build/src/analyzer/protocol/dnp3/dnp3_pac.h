// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_dnp3_dnp3_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_dnp3_dnp3_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "events.bif.h"

namespace binpac {

namespace DNP3 {
class ContextDNP3;
class DNP3_PDU;
class Header_Block;
class DNP3_Request;
class Debug_Byte;
class DNP3_Response;
class DNP3_Application_Request_Header;
class DNP3_Application_Response_Header;
class Request_Objects;
class Response_Objects;
class Object_Header;
class Range_Field_0;
class Range_Field_1;
class Range_Field_2;
class Range_Field_3;
class Range_Field_4;
class Range_Field_5;
enum function_codes_value {
	CONFIRM = 0,
	READ = 1,
	WRITE = 2,
	SELECT = 3,
	OPERATE = 4,
	DIRECT_OPERATE = 5,
	DIRECT_OPERATE_NR = 6,
	IMMED_FREEZE = 7,
	IMMED_FREEZE_NR = 8,
	FREEZE_CLEAR = 9,
	FREEZE_CLEAR_NR = 10,
	FREEZE_AT_TIME = 11,
	FREEZE_AT_TIME_NR = 12,
	COLD_RESTART = 13,
	WARM_RESTART = 14,
	INITIALIZE_DATA = 15,
	INITIALIZE_APPL = 16,
	START_APPL = 17,
	STOP_APPL = 18,
	SAVE_CONFIG = 19,
	ENABLE_UNSOLICITED = 20,
	DISABLE_UNSOLICITED = 21,
	ASSIGN_CLASS = 22,
	DELAY_MEASURE = 23,
	RECORD_CURRENT_TIME = 24,
	OPEN_FILE = 25,
	CLOSE_FILE = 26,
	DELETE_FILE = 27,
	GET_FILE_INFO = 28,
	AUTHENTICATE_FILE = 29,
	ABORT_FILE = 30,
	ACTIVATE_CONFIG = 31,
	AUTHENTICATE_REQ = 32,
	AUTHENTICATE_ERR = 33,
	RESPONSE = 129,
	UNSOLICITED_RESPONSE = 130,
	AUTHENTICATE_RESP = 131,
};
class Prefix_Type;
class Request_Data_Object;
class Response_Data_Object;
class Default_Wrap;
class AttributeCommon;
class BinInEveAtime;
class BinInEveRtime;
class DoubleInEveAtime;
class DoubleInEveRtime;
class BinOutEveAtime;
class CROB;
class PCB;
class BinOutCmdEveAtime;
class Counter32wFlag;
class Counter16wFlag;
class Counter32woFlag;
class Counter16woFlag;
class FrozenCounter32wFlag;
class FrozenCounter16wFlag;
class FrozenCounter32wFlagTime;
class FrozenCounter16wFlagTime;
class FrozenCounter32woFlag;
class FrozenCounter16woFlag;
class CounterEve32wFlag;
class CounterEve16wFlag;
class CounterEve32wFlagTime;
class CounterEve16wFlagTime;
class FrozenCounterEve32wFlag;
class FrozenCounterEve16wFlag;
class FrozenCounterEve32wFlagTime;
class FrozenCounterEve16wFlagTime;
class AnalogInput32wFlag;
class AnalogInput16wFlag;
class AnalogInput32woFlag;
class AnalogInput16woFlag;
class AnalogInputSPwFlag;
class AnalogInputDPwFlag;
class FrozenAnalogInput32wFlag;
class FrozenAnalogInput16wFlag;
class FrozenAnalogInput32wTime;
class FrozenAnalogInput16wTime;
class FrozenAnalogInput32woFlag;
class FrozenAnalogInput16woFlag;
class FrozenAnalogInputSPwFlag;
class FrozenAnalogInputDPwFlag;
class AnalogInput32woTime;
class AnalogInput16woTime;
class AnalogInput32wTime;
class AnalogInput16wTime;
class AnalogInputSPwoTime;
class AnalogInputDPwoTime;
class AnalogInputSPwTime;
class AnalogInputDPwTime;
class FrozenAnaInputEve32woTime;
class FrozenAnaInputEve16woTime;
class FrozenAnaInputEve32wTime;
class FrozenAnaInputEve16wTime;
class FrozenAnaInputEveSPwoTime;
class FrozenAnaInputEveDPwoTime;
class FrozenAnaInputEveSPwTime;
class FrozenAnaInputEveDPwTime;
class AnaOutStatus32;
class AnaOutStatus16;
class AnaOutStatusSP;
class AnaOutStatusDP;
class AnaOut32;
class AnaOut16;
class AnaOutSP;
class AnaOutDP;
class AnaOutEve32woTime;
class AnaOutEve16woTime;
class AnaOutEve32wTime;
class AnaOutEve16wTime;
class AnaOutEveSPwoTime;
class AnaOutEveDPwoTime;
class AnaOutEveSPwTime;
class AnaOutEveDPwTime;
class AbsTime;
class AbsTimeInterval;
class Last_AbsTime;
class Record_Obj;
class File_Control_ID;
class File_Control_Auth_Wrap;
class File_Control_Auth;
class File_Control_Cmd_Wrap;
class File_Control_Cmd;
class File_Control_Cmd_Status_Wrap;
class File_Control_Cmd_Status;
class File_Transport;
class File_Transport_Status;
class File_Desc_Wrap;
class File_Desc;
class File_Spec_Str;
class Dev_Store;
class Dev_Profile;
class Dev_Profile_OH;
class PrivRegObj;
class PrivRegObjDesc;
class ObjDescSpec;
class DescEle;
class App_Id;
class ActivateConf;
class StatusEle;
class BCD_Large;
class AuthChallenge;
class AuthRely;
class AuthAggrRequest;
class AuthSessionKeyStatus;
class AuthSessionKeyChange;
class AuthError;
class DNP3_Conn;
class DNP3_Flow;
} // namespace DNP3

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace DNP3 {

class ContextDNP3
{
public:
	ContextDNP3(DNP3_Conn * connection, DNP3_Flow * flow, FlowBuffer * flow_buffer);
	~ContextDNP3();
	
	// Member access functions
	DNP3_Conn * connection() const { return connection_; }
	DNP3_Flow * flow() const { return flow_; }
	FlowBuffer * flow_buffer() const { return flow_buffer_; }
	
protected:
	DNP3_Conn * connection_;
	DNP3_Flow * flow_;
	FlowBuffer * flow_buffer_;
};


class DNP3_PDU
{
public:
	DNP3_PDU(bool is_orig);
	~DNP3_PDU();
	bool ParseBuffer(flow_buffer_t t_flow_buffer, ContextDNP3 * t_context);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	DNP3_Request * request() const
		{
		switch ( val_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:6:request", val_case_index(), "true");
				break;
			}
		return request_;
		}
	DNP3_Response * response() const
		{
		switch ( val_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:7:response", val_case_index(), "false");
				break;
			}
		return response_;
		}
	bool is_orig() const { return is_orig_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int val_case_index_;
	DNP3_Request * request_;
	DNP3_Response * response_;
	bool is_orig_;
	int byteorder_;
};


class Header_Block
{
public:
	Header_Block();
	~Header_Block();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint16 start() const { return start_; }
	uint8 len() const { return len_; }
	uint8 ctrl() const { return ctrl_; }
	uint16 dest_addr() const { return dest_addr_; }
	uint16 src_addr() const { return src_addr_; }
	int byteorder() const { return byteorder_; }
	bool get_header() const { return get_header_; }
	
protected:
	uint16 start_;
	uint8 len_;
	uint8 ctrl_;
	uint16 dest_addr_;
	uint16 src_addr_;
	int byteorder_;
	bool get_header_;
};


class DNP3_Request
{
public:
	DNP3_Request();
	~DNP3_Request();
	int initial_buffer_length() const { return 8; }
	bool ParseBuffer(flow_buffer_t t_flow_buffer, ContextDNP3 * t_context);
	
	// Member access functions
	Header_Block * addin_header() const { return addin_header_; }
	DNP3_Application_Request_Header * app_header() const { return app_header_; }
	int data_case_index() const	{ return data_case_index_; }
	vector<Request_Objects *> * read_requests() const
		{
		switch ( data_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:23:read_requests", data_case_index(), "READ");
				break;
			}
		return read_requests_;
		}
	vector<Request_Objects *> * write_requests() const
		{
		switch ( data_case_index() )
			{
			case 2:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:24:write_requests", data_case_index(), "WRITE");
				break;
			}
		return write_requests_;
		}
	vector<Request_Objects *> * select_requests() const
		{
		switch ( data_case_index() )
			{
			case 3:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:25:select_requests", data_case_index(), "SELECT");
				break;
			}
		return select_requests_;
		}
	vector<Request_Objects *> * operate_requests() const
		{
		switch ( data_case_index() )
			{
			case 4:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:26:operate_requests", data_case_index(), "OPERATE");
				break;
			}
		return operate_requests_;
		}
	vector<Request_Objects *> * direct_operate_requests() const
		{
		switch ( data_case_index() )
			{
			case 5:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:27:direct_operate_requests", data_case_index(), "DIRECT_OPERATE");
				break;
			}
		return direct_operate_requests_;
		}
	vector<Request_Objects *> * direct_operate_nr_requests() const
		{
		switch ( data_case_index() )
			{
			case 6:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:28:direct_operate_nr_requests", data_case_index(), "DIRECT_OPERATE_NR");
				break;
			}
		return direct_operate_nr_requests_;
		}
	vector<Request_Objects *> * immed_freeze_requests() const
		{
		switch ( data_case_index() )
			{
			case 7:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:29:immed_freeze_requests", data_case_index(), "IMMED_FREEZE");
				break;
			}
		return immed_freeze_requests_;
		}
	vector<Request_Objects *> * immed_freeze_nr_requests() const
		{
		switch ( data_case_index() )
			{
			case 8:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:30:immed_freeze_nr_requests", data_case_index(), "IMMED_FREEZE_NR");
				break;
			}
		return immed_freeze_nr_requests_;
		}
	vector<Request_Objects *> * freeze_clear_requests() const
		{
		switch ( data_case_index() )
			{
			case 9:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:31:freeze_clear_requests", data_case_index(), "FREEZE_CLEAR");
				break;
			}
		return freeze_clear_requests_;
		}
	vector<Request_Objects *> * freeze_clear_nr_requests() const
		{
		switch ( data_case_index() )
			{
			case 10:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:32:freeze_clear_nr_requests", data_case_index(), "FREEZE_CLEAR_NR");
				break;
			}
		return freeze_clear_nr_requests_;
		}
	vector<Request_Objects *> * freeze_time_requests() const
		{
		switch ( data_case_index() )
			{
			case 11:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:33:freeze_time_requests", data_case_index(), "FREEZE_AT_TIME");
				break;
			}
		return freeze_time_requests_;
		}
	vector<Request_Objects *> * freeze_time_nr_requests() const
		{
		switch ( data_case_index() )
			{
			case 12:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:34:freeze_time_nr_requests", data_case_index(), "FREEZE_AT_TIME_NR");
				break;
			}
		return freeze_time_nr_requests_;
		}
	vector<Request_Objects *> * initilize_appl() const
		{
		switch ( data_case_index() )
			{
			case 16:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:38:initilize_appl", data_case_index(), "INITIALIZE_APPL");
				break;
			}
		return initilize_appl_;
		}
	vector<Request_Objects *> * start_appl() const
		{
		switch ( data_case_index() )
			{
			case 17:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:39:start_appl", data_case_index(), "START_APPL");
				break;
			}
		return start_appl_;
		}
	vector<Request_Objects *> * stop_appl() const
		{
		switch ( data_case_index() )
			{
			case 18:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:40:stop_appl", data_case_index(), "STOP_APPL");
				break;
			}
		return stop_appl_;
		}
	vector<Request_Objects *> * enable_unsolicited() const
		{
		switch ( data_case_index() )
			{
			case 20:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:42:enable_unsolicited", data_case_index(), "ENABLE_UNSOLICITED");
				break;
			}
		return enable_unsolicited_;
		}
	vector<Request_Objects *> * disable_unsolicited() const
		{
		switch ( data_case_index() )
			{
			case 21:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:43:disable_unsolicited", data_case_index(), "DISABLE_UNSOLICITED");
				break;
			}
		return disable_unsolicited_;
		}
	vector<Request_Objects *> * assign_class() const
		{
		switch ( data_case_index() )
			{
			case 22:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:44:assign_class", data_case_index(), "ASSIGN_CLASS");
				break;
			}
		return assign_class_;
		}
	vector<Request_Objects *> * open_file() const
		{
		switch ( data_case_index() )
			{
			case 25:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:47:open_file", data_case_index(), "OPEN_FILE");
				break;
			}
		return open_file_;
		}
	vector<Request_Objects *> * close_file() const
		{
		switch ( data_case_index() )
			{
			case 26:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:48:close_file", data_case_index(), "CLOSE_FILE");
				break;
			}
		return close_file_;
		}
	vector<Request_Objects *> * delete_file() const
		{
		switch ( data_case_index() )
			{
			case 27:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:49:delete_file", data_case_index(), "DELETE_FILE");
				break;
			}
		return delete_file_;
		}
	vector<Request_Objects *> * abort_file() const
		{
		switch ( data_case_index() )
			{
			case 30:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:50:abort_file", data_case_index(), "ABORT_FILE");
				break;
			}
		return abort_file_;
		}
	vector<Request_Objects *> * get_file_info() const
		{
		switch ( data_case_index() )
			{
			case 28:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:51:get_file_info", data_case_index(), "GET_FILE_INFO");
				break;
			}
		return get_file_info_;
		}
	vector<Request_Objects *> * auth_file() const
		{
		switch ( data_case_index() )
			{
			case 29:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:52:auth_file", data_case_index(), "AUTHENTICATE_FILE");
				break;
			}
		return auth_file_;
		}
	vector<Request_Objects *> * active_config() const
		{
		switch ( data_case_index() )
			{
			case 31:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:53:active_config", data_case_index(), "ACTIVATE_CONFIG");
				break;
			}
		return active_config_;
		}
	vector<Request_Objects *> * auth_req() const
		{
		switch ( data_case_index() )
			{
			case 32:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:54:auth_req", data_case_index(), "AUTHENTICATE_REQ");
				break;
			}
		return auth_req_;
		}
	vector<Request_Objects *> * auth_err() const
		{
		switch ( data_case_index() )
			{
			case 33:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:55:auth_err", data_case_index(), "AUTHENTICATE_ERR");
				break;
			}
		return auth_err_;
		}
	bytestring const & unknown() const
		{
		return unknown_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	Header_Block * addin_header_;
	DNP3_Application_Request_Header * app_header_;
	int data_case_index_;
	vector<Request_Objects *> * read_requests_;
	Request_Objects * read_requests__elem_;
	vector<Request_Objects *> * write_requests_;
	Request_Objects * write_requests__elem_;
	vector<Request_Objects *> * select_requests_;
	Request_Objects * select_requests__elem_;
	vector<Request_Objects *> * operate_requests_;
	Request_Objects * operate_requests__elem_;
	vector<Request_Objects *> * direct_operate_requests_;
	Request_Objects * direct_operate_requests__elem_;
	vector<Request_Objects *> * direct_operate_nr_requests_;
	Request_Objects * direct_operate_nr_requests__elem_;
	vector<Request_Objects *> * immed_freeze_requests_;
	Request_Objects * immed_freeze_requests__elem_;
	vector<Request_Objects *> * immed_freeze_nr_requests_;
	Request_Objects * immed_freeze_nr_requests__elem_;
	vector<Request_Objects *> * freeze_clear_requests_;
	Request_Objects * freeze_clear_requests__elem_;
	vector<Request_Objects *> * freeze_clear_nr_requests_;
	Request_Objects * freeze_clear_nr_requests__elem_;
	vector<Request_Objects *> * freeze_time_requests_;
	Request_Objects * freeze_time_requests__elem_;
	vector<Request_Objects *> * freeze_time_nr_requests_;
	Request_Objects * freeze_time_nr_requests__elem_;
	vector<Request_Objects *> * initilize_appl_;
	Request_Objects * initilize_appl__elem_;
	vector<Request_Objects *> * start_appl_;
	Request_Objects * start_appl__elem_;
	vector<Request_Objects *> * stop_appl_;
	Request_Objects * stop_appl__elem_;
	vector<Request_Objects *> * enable_unsolicited_;
	Request_Objects * enable_unsolicited__elem_;
	vector<Request_Objects *> * disable_unsolicited_;
	Request_Objects * disable_unsolicited__elem_;
	vector<Request_Objects *> * assign_class_;
	Request_Objects * assign_class__elem_;
	vector<Request_Objects *> * open_file_;
	Request_Objects * open_file__elem_;
	vector<Request_Objects *> * close_file_;
	Request_Objects * close_file__elem_;
	vector<Request_Objects *> * delete_file_;
	Request_Objects * delete_file__elem_;
	vector<Request_Objects *> * abort_file_;
	Request_Objects * abort_file__elem_;
	vector<Request_Objects *> * get_file_info_;
	Request_Objects * get_file_info__elem_;
	vector<Request_Objects *> * auth_file_;
	Request_Objects * auth_file__elem_;
	vector<Request_Objects *> * active_config_;
	Request_Objects * active_config__elem_;
	vector<Request_Objects *> * auth_req_;
	Request_Objects * auth_req__elem_;
	vector<Request_Objects *> * auth_err_;
	Request_Objects * auth_err__elem_;
	bytestring unknown_;
	int byteorder_;
	int buffering_state_;
};


class Debug_Byte
{
public:
	Debug_Byte();
	~Debug_Byte();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	bytestring const & debug() const { return debug_; }
	bool process_request() const { return process_request_; }
	
protected:
	bytestring debug_;
	bool process_request_;
};


class DNP3_Response
{
public:
	DNP3_Response();
	~DNP3_Response();
	int initial_buffer_length() const { return 8; }
	bool ParseBuffer(flow_buffer_t t_flow_buffer, ContextDNP3 * t_context);
	
	// Member access functions
	Header_Block * addin_header() const { return addin_header_; }
	DNP3_Application_Response_Header * app_header() const { return app_header_; }
	int data_case_index() const	{ return data_case_index_; }
	vector<Response_Objects *> * response_objects() const
		{
		switch ( data_case_index() )
			{
			case 129:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:69:response_objects", data_case_index(), "RESPONSE");
				break;
			}
		return response_objects_;
		}
	vector<Response_Objects *> * unsolicited_response_objects() const
		{
		switch ( data_case_index() )
			{
			case 130:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:70:unsolicited_response_objects", data_case_index(), "UNSOLICITED_RESPONSE");
				break;
			}
		return unsolicited_response_objects_;
		}
	vector<Response_Objects *> * auth_response() const
		{
		switch ( data_case_index() )
			{
			case 131:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:71:auth_response", data_case_index(), "AUTHENTICATE_RESP");
				break;
			}
		return auth_response_;
		}
	Debug_Byte * unknown() const
		{
		return unknown_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	Header_Block * addin_header_;
	DNP3_Application_Response_Header * app_header_;
	int data_case_index_;
	vector<Response_Objects *> * response_objects_;
	Response_Objects * response_objects__elem_;
	vector<Response_Objects *> * unsolicited_response_objects_;
	Response_Objects * unsolicited_response_objects__elem_;
	vector<Response_Objects *> * auth_response_;
	Response_Objects * auth_response__elem_;
	Debug_Byte * unknown_;
	int byteorder_;
	int buffering_state_;
};


class DNP3_Application_Request_Header
{
public:
	DNP3_Application_Request_Header();
	~DNP3_Application_Request_Header();
	int initial_buffer_length() const { return 0; }
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	bytestring const & empty() const { return empty_; }
	uint8 application_control() const { return application_control_; }
	uint8 function_code() const { return function_code_; }
	bool process_request() const { return process_request_; }
	
protected:
	bytestring empty_;
	uint8 application_control_;
	uint8 function_code_;
	bool process_request_;
};


class DNP3_Application_Response_Header
{
public:
	DNP3_Application_Response_Header();
	~DNP3_Application_Response_Header();
	int initial_buffer_length() const { return 0; }
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context, int t_byteorder);
	
	// Member access functions
	bytestring const & empty() const { return empty_; }
	uint8 application_control() const { return application_control_; }
	uint8 function_code() const { return function_code_; }
	uint16 internal_indications() const { return internal_indications_; }
	bool process_request() const { return process_request_; }
	
protected:
	bytestring empty_;
	uint8 application_control_;
	uint8 function_code_;
	uint16 internal_indications_;
	bool process_request_;
};


class Request_Objects
{
public:
	Request_Objects(uint8 function_code);
	~Request_Objects();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context, int t_byteorder);
	
	// Member access functions
	Object_Header * object_header() const { return object_header_; }
	int data_case_index() const	{ return data_case_index_; }
	vector<Request_Data_Object *> * bocmd_PM() const
		{
		switch ( data_case_index() )
			{
			case 3075:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:93:bocmd_PM", data_case_index(), "((int) 0x0c03)");
				break;
			}
		return bocmd_PM_;
		}
	vector<Request_Data_Object *> * time_interval_ojbects() const
		{
		switch ( data_case_index() )
			{
			case 12802:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:94:time_interval_ojbects", data_case_index(), "((int) 0x3202)");
				break;
			}
		return time_interval_ojbects_;
		}
	vector<Request_Data_Object *> * ojbects() const
		{
		return ojbects_;
		}
	int dump_data_case_index() const	{ return dump_data_case_index_; }
	uint8 function_code() const { return function_code_; }
	
protected:
	Object_Header * object_header_;
	int data_case_index_;
	vector<Request_Data_Object *> * bocmd_PM_;
	Request_Data_Object * bocmd_PM__elem_;
	vector<Request_Data_Object *> * time_interval_ojbects_;
	Request_Data_Object * time_interval_ojbects__elem_;
	vector<Request_Data_Object *> * ojbects_;
	Request_Data_Object * ojbects__elem_;
	int dump_data_case_index_;
	uint8 function_code_;
};


class Response_Objects
{
public:
	Response_Objects(uint8 function_code);
	~Response_Objects();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context, int t_byteorder);
	
	// Member access functions
	Object_Header * object_header() const { return object_header_; }
	int data_case_index() const	{ return data_case_index_; }
	vector<Response_Data_Object *> * biwoflag() const
		{
		switch ( data_case_index() )
			{
			case 257:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:115:biwoflag", data_case_index(), "((int) 0x0101)");
				break;
			}
		return biwoflag_;
		}
	vector<Response_Data_Object *> * diwoflag() const
		{
		switch ( data_case_index() )
			{
			case 769:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:116:diwoflag", data_case_index(), "((int) 0x0301)");
				break;
			}
		return diwoflag_;
		}
	vector<Response_Data_Object *> * bowoflag() const
		{
		switch ( data_case_index() )
			{
			case 2561:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:117:bowoflag", data_case_index(), "((int) 0x0a01)");
				break;
			}
		return bowoflag_;
		}
	vector<Response_Data_Object *> * bocmd_PM() const
		{
		switch ( data_case_index() )
			{
			case 3075:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:118:bocmd_PM", data_case_index(), "((int) 0x0c03)");
				break;
			}
		return bocmd_PM_;
		}
	vector<Response_Data_Object *> * ojbects() const
		{
		return ojbects_;
		}
	uint8 function_code() const { return function_code_; }
	
protected:
	Object_Header * object_header_;
	int data_case_index_;
	vector<Response_Data_Object *> * biwoflag_;
	Response_Data_Object * biwoflag__elem_;
	vector<Response_Data_Object *> * diwoflag_;
	Response_Data_Object * diwoflag__elem_;
	vector<Response_Data_Object *> * bowoflag_;
	Response_Data_Object * bowoflag__elem_;
	vector<Response_Data_Object *> * bocmd_PM_;
	Response_Data_Object * bocmd_PM__elem_;
	vector<Response_Data_Object *> * ojbects_;
	Response_Data_Object * ojbects__elem_;
	uint8 function_code_;
};


class Object_Header
{
public:
	Object_Header(uint8 function_code);
	~Object_Header();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context, int t_byteorder);
	
	// Member access functions
	uint16 object_type_field() const { return object_type_field_; }
	uint8 qualifier_field() const { return qualifier_field_; }
	int range_field_case_index() const	{ return range_field_case_index_; }
	Range_Field_0 * range_field_0() const
		{
		switch ( range_field_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:127:range_field_0", range_field_case_index(), "((int) 0)");
				break;
			}
		return range_field_0_;
		}
	Range_Field_1 * range_field_1() const
		{
		switch ( range_field_case_index() )
			{
			case 1:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:128:range_field_1", range_field_case_index(), "((int) 1)");
				break;
			}
		return range_field_1_;
		}
	Range_Field_2 * range_field_2() const
		{
		switch ( range_field_case_index() )
			{
			case 2:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:129:range_field_2", range_field_case_index(), "((int) 2)");
				break;
			}
		return range_field_2_;
		}
	Range_Field_3 * range_field_3() const
		{
		switch ( range_field_case_index() )
			{
			case 3:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:130:range_field_3", range_field_case_index(), "((int) 3)");
				break;
			}
		return range_field_3_;
		}
	Range_Field_4 * range_field_4() const
		{
		switch ( range_field_case_index() )
			{
			case 4:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:131:range_field_4", range_field_case_index(), "((int) 4)");
				break;
			}
		return range_field_4_;
		}
	Range_Field_5 * range_field_5() const
		{
		switch ( range_field_case_index() )
			{
			case 5:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:132:range_field_5", range_field_case_index(), "((int) 5)");
				break;
			}
		return range_field_5_;
		}
	uint8 range_field_7() const
		{
		switch ( range_field_case_index() )
			{
			case 7:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:134:range_field_7", range_field_case_index(), "((int) 7)");
				break;
			}
		return range_field_7_;
		}
	uint16 range_field_8() const
		{
		switch ( range_field_case_index() )
			{
			case 8:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:135:range_field_8", range_field_case_index(), "((int) 8)");
				break;
			}
		return range_field_8_;
		}
	uint32 range_field_9() const
		{
		switch ( range_field_case_index() )
			{
			case 9:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:136:range_field_9", range_field_case_index(), "((int) 9)");
				break;
			}
		return range_field_9_;
		}
	uint8 range_field_b() const
		{
		switch ( range_field_case_index() )
			{
			case 11:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-protocol.pac:137:range_field_b", range_field_case_index(), "((int) 0x0b)");
				break;
			}
		return range_field_b_;
		}
	bytestring const & unknown() const
		{
		return unknown_;
		}
	int dump_data_case_index() const	{ return dump_data_case_index_; }
	uint8 function_code() const { return function_code_; }
	int number_of_item() const { return number_of_item_; }
	int rf_value_low() const { return rf_value_low_; }
	int rf_value_high() const { return rf_value_high_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint16 object_type_field_;
	uint8 qualifier_field_;
	int range_field_case_index_;
	Range_Field_0 * range_field_0_;
	Range_Field_1 * range_field_1_;
	Range_Field_2 * range_field_2_;
	Range_Field_3 * range_field_3_;
	Range_Field_4 * range_field_4_;
	Range_Field_5 * range_field_5_;
	uint8 range_field_7_;
	uint16 range_field_8_;
	uint32 range_field_9_;
	uint8 range_field_b_;
	bytestring unknown_;
	int dump_data_case_index_;
	uint8 function_code_;
	int number_of_item_;
	int rf_value_low_;
	int rf_value_high_;
	bool process_request_;
};


class Range_Field_0
{
public:
	Range_Field_0();
	~Range_Field_0();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 start_index() const { return start_index_; }
	uint8 stop_index() const { return stop_index_; }
	
protected:
	uint8 start_index_;
	uint8 stop_index_;
};


class Range_Field_1
{
public:
	Range_Field_1();
	~Range_Field_1();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 start_index() const { return start_index_; }
	uint16 stop_index() const { return stop_index_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 start_index_;
	uint16 stop_index_;
	int byteorder_;
};


class Range_Field_2
{
public:
	Range_Field_2();
	~Range_Field_2();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 start_index() const { return start_index_; }
	uint32 stop_index() const { return stop_index_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 start_index_;
	uint32 stop_index_;
	int byteorder_;
};


class Range_Field_3
{
public:
	Range_Field_3();
	~Range_Field_3();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 start_addr() const { return start_addr_; }
	uint8 stop_addr() const { return stop_addr_; }
	
protected:
	uint8 start_addr_;
	uint8 stop_addr_;
};


class Range_Field_4
{
public:
	Range_Field_4();
	~Range_Field_4();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 start_addr() const { return start_addr_; }
	uint16 stop_addr() const { return stop_addr_; }
	
protected:
	uint16 start_addr_;
	uint16 stop_addr_;
};


class Range_Field_5
{
public:
	Range_Field_5();
	~Range_Field_5();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 start_addr() const { return start_addr_; }
	uint32 stop_addr() const { return stop_addr_; }
	
protected:
	uint32 start_addr_;
	uint32 stop_addr_;
};


class Prefix_Type
{
public:
	Prefix_Type(uint8 qualifier_field);
	~Prefix_Type();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	int prefix_case_index() const	{ return prefix_case_index_; }
	uint8 prefix8() const
		{
		switch ( prefix_case_index() )
			{
			case 16:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:14:prefix8", prefix_case_index(), "((int) 0x10)");
				break;
			}
		return prefix8_;
		}
	uint16 prefix16() const
		{
		switch ( prefix_case_index() )
			{
			case 32:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:17:prefix16", prefix_case_index(), "((int) 0x20)");
				break;
			}
		return prefix16_;
		}
	uint32 prefix32() const
		{
		switch ( prefix_case_index() )
			{
			case 48:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:20:prefix32", prefix_case_index(), "((int) 0x30)");
				break;
			}
		return prefix32_;
		}
	uint8 object_size8() const
		{
		switch ( prefix_case_index() )
			{
			case 64:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:23:object_size8", prefix_case_index(), "((int) 0x40)");
				break;
			}
		return object_size8_;
		}
	uint16 object_size16() const
		{
		switch ( prefix_case_index() )
			{
			case 80:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:24:object_size16", prefix_case_index(), "((int) 0x50)");
				break;
			}
		return object_size16_;
		}
	uint32 object_size32() const
		{
		switch ( prefix_case_index() )
			{
			case 96:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:25:object_size32", prefix_case_index(), "((int) 0x60)");
				break;
			}
		return object_size32_;
		}
	uint8 qualifier_field() const { return qualifier_field_; }
	int byteorder() const { return byteorder_; }
	uint32 prefix_value() const { return prefix_value_; }
	bool prefix_called() const { return prefix_called_; }
	
protected:
	int prefix_case_index_;
	uint8 prefix8_;
	uint16 prefix16_;
	uint32 prefix32_;
	uint8 object_size8_;
	uint16 object_size16_;
	uint32 object_size32_;
	uint8 qualifier_field_;
	int byteorder_;
	uint32 prefix_value_;
	bool prefix_called_;
};


class Request_Data_Object
{
public:
	Request_Data_Object(uint8 function_code, uint8 qualifier_field, uint16 object_type_field);
	~Request_Data_Object();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context, int t_byteorder);
	
	// Member access functions
	Prefix_Type * prefix() const { return prefix_; }
	int data_case_index() const	{ return data_case_index_; }
	AttributeCommon * attrib211() const
		{
		switch ( data_case_index() )
			{
			case 211:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:45:attrib211", data_case_index(), "((int) 0x00D3)");
				break;
			}
		return attrib211_;
		}
	AttributeCommon * attrib212() const
		{
		switch ( data_case_index() )
			{
			case 212:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:46:attrib212", data_case_index(), "((int) 0x00D4)");
				break;
			}
		return attrib212_;
		}
	AttributeCommon * attrib213() const
		{
		switch ( data_case_index() )
			{
			case 213:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:47:attrib213", data_case_index(), "((int) 0x00D5)");
				break;
			}
		return attrib213_;
		}
	AttributeCommon * attrib214() const
		{
		switch ( data_case_index() )
			{
			case 214:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:48:attrib214", data_case_index(), "((int) 0x00D6)");
				break;
			}
		return attrib214_;
		}
	AttributeCommon * attrib215() const
		{
		switch ( data_case_index() )
			{
			case 215:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:49:attrib215", data_case_index(), "((int) 0x00D7)");
				break;
			}
		return attrib215_;
		}
	AttributeCommon * attrib216() const
		{
		switch ( data_case_index() )
			{
			case 216:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:50:attrib216", data_case_index(), "((int) 0x00D8)");
				break;
			}
		return attrib216_;
		}
	AttributeCommon * attrib217() const
		{
		switch ( data_case_index() )
			{
			case 217:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:51:attrib217", data_case_index(), "((int) 0x00D9)");
				break;
			}
		return attrib217_;
		}
	AttributeCommon * attrib218() const
		{
		switch ( data_case_index() )
			{
			case 218:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:52:attrib218", data_case_index(), "((int) 0x00DA)");
				break;
			}
		return attrib218_;
		}
	AttributeCommon * attrib219() const
		{
		switch ( data_case_index() )
			{
			case 219:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:53:attrib219", data_case_index(), "((int) 0x00DB)");
				break;
			}
		return attrib219_;
		}
	AttributeCommon * attrib220() const
		{
		switch ( data_case_index() )
			{
			case 220:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:54:attrib220", data_case_index(), "((int) 0x00DC)");
				break;
			}
		return attrib220_;
		}
	AttributeCommon * attrib221() const
		{
		switch ( data_case_index() )
			{
			case 221:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:55:attrib221", data_case_index(), "((int) 0x00DD)");
				break;
			}
		return attrib221_;
		}
	AttributeCommon * attrib222() const
		{
		switch ( data_case_index() )
			{
			case 222:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:56:attrib222", data_case_index(), "((int) 0x00DE)");
				break;
			}
		return attrib222_;
		}
	AttributeCommon * attrib223() const
		{
		switch ( data_case_index() )
			{
			case 223:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:57:attrib223", data_case_index(), "((int) 0x00DF)");
				break;
			}
		return attrib223_;
		}
	AttributeCommon * attrib224() const
		{
		switch ( data_case_index() )
			{
			case 224:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:58:attrib224", data_case_index(), "((int) 0x00E0)");
				break;
			}
		return attrib224_;
		}
	AttributeCommon * attrib225() const
		{
		switch ( data_case_index() )
			{
			case 225:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:59:attrib225", data_case_index(), "((int) 0x00E1)");
				break;
			}
		return attrib225_;
		}
	AttributeCommon * attrib226() const
		{
		switch ( data_case_index() )
			{
			case 226:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:60:attrib226", data_case_index(), "((int) 0x00E2)");
				break;
			}
		return attrib226_;
		}
	AttributeCommon * attrib227() const
		{
		switch ( data_case_index() )
			{
			case 227:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:61:attrib227", data_case_index(), "((int) 0x00E3)");
				break;
			}
		return attrib227_;
		}
	AttributeCommon * attrib228() const
		{
		switch ( data_case_index() )
			{
			case 228:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:62:attrib228", data_case_index(), "((int) 0x00E4)");
				break;
			}
		return attrib228_;
		}
	AttributeCommon * attrib229() const
		{
		switch ( data_case_index() )
			{
			case 229:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:63:attrib229", data_case_index(), "((int) 0x00E5)");
				break;
			}
		return attrib229_;
		}
	AttributeCommon * attrib230() const
		{
		switch ( data_case_index() )
			{
			case 230:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:64:attrib230", data_case_index(), "((int) 0x00E6)");
				break;
			}
		return attrib230_;
		}
	AttributeCommon * attrib231() const
		{
		switch ( data_case_index() )
			{
			case 231:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:65:attrib231", data_case_index(), "((int) 0x00E7)");
				break;
			}
		return attrib231_;
		}
	AttributeCommon * attrib232() const
		{
		switch ( data_case_index() )
			{
			case 232:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:66:attrib232", data_case_index(), "((int) 0x00E8)");
				break;
			}
		return attrib232_;
		}
	AttributeCommon * attrib233() const
		{
		switch ( data_case_index() )
			{
			case 233:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:67:attrib233", data_case_index(), "((int) 0x00E9)");
				break;
			}
		return attrib233_;
		}
	AttributeCommon * attrib234() const
		{
		switch ( data_case_index() )
			{
			case 234:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:68:attrib234", data_case_index(), "((int) 0x00EA)");
				break;
			}
		return attrib234_;
		}
	AttributeCommon * attrib235() const
		{
		switch ( data_case_index() )
			{
			case 235:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:69:attrib235", data_case_index(), "((int) 0x00EB)");
				break;
			}
		return attrib235_;
		}
	AttributeCommon * attrib236() const
		{
		switch ( data_case_index() )
			{
			case 236:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:70:attrib236", data_case_index(), "((int) 0x00EC)");
				break;
			}
		return attrib236_;
		}
	AttributeCommon * attrib237() const
		{
		switch ( data_case_index() )
			{
			case 237:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:71:attrib237", data_case_index(), "((int) 0x00ED)");
				break;
			}
		return attrib237_;
		}
	AttributeCommon * attrib238() const
		{
		switch ( data_case_index() )
			{
			case 238:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:72:attrib238", data_case_index(), "((int) 0x00EE)");
				break;
			}
		return attrib238_;
		}
	AttributeCommon * attrib239() const
		{
		switch ( data_case_index() )
			{
			case 239:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:73:attrib239", data_case_index(), "((int) 0x00EF)");
				break;
			}
		return attrib239_;
		}
	AttributeCommon * attrib240() const
		{
		switch ( data_case_index() )
			{
			case 240:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:74:attrib240", data_case_index(), "((int) 0x00F0)");
				break;
			}
		return attrib240_;
		}
	AttributeCommon * attrib241() const
		{
		switch ( data_case_index() )
			{
			case 241:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:75:attrib241", data_case_index(), "((int) 0x00F1)");
				break;
			}
		return attrib241_;
		}
	AttributeCommon * attrib242() const
		{
		switch ( data_case_index() )
			{
			case 242:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:76:attrib242", data_case_index(), "((int) 0x00F2)");
				break;
			}
		return attrib242_;
		}
	AttributeCommon * attrib243() const
		{
		switch ( data_case_index() )
			{
			case 243:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:77:attrib243", data_case_index(), "((int) 0x00F3)");
				break;
			}
		return attrib243_;
		}
	AttributeCommon * attrib245() const
		{
		switch ( data_case_index() )
			{
			case 245:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:78:attrib245", data_case_index(), "((int) 0x00F5)");
				break;
			}
		return attrib245_;
		}
	AttributeCommon * attrib246() const
		{
		switch ( data_case_index() )
			{
			case 246:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:79:attrib246", data_case_index(), "((int) 0x00F6)");
				break;
			}
		return attrib246_;
		}
	AttributeCommon * attrib247() const
		{
		switch ( data_case_index() )
			{
			case 247:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:80:attrib247", data_case_index(), "((int) 0x00F7)");
				break;
			}
		return attrib247_;
		}
	AttributeCommon * attrib248() const
		{
		switch ( data_case_index() )
			{
			case 248:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:81:attrib248", data_case_index(), "((int) 0x00F8)");
				break;
			}
		return attrib248_;
		}
	AttributeCommon * attrib249() const
		{
		switch ( data_case_index() )
			{
			case 249:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:82:attrib249", data_case_index(), "((int) 0x00F9)");
				break;
			}
		return attrib249_;
		}
	AttributeCommon * attrib250() const
		{
		switch ( data_case_index() )
			{
			case 250:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:83:attrib250", data_case_index(), "((int) 0x00FA)");
				break;
			}
		return attrib250_;
		}
	AttributeCommon * attrib252() const
		{
		switch ( data_case_index() )
			{
			case 252:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:84:attrib252", data_case_index(), "((int) 0x00FC)");
				break;
			}
		return attrib252_;
		}
	AttributeCommon * attrib254() const
		{
		switch ( data_case_index() )
			{
			case 254:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:85:attrib254", data_case_index(), "((int) 0x00FE)");
				break;
			}
		return attrib254_;
		}
	AttributeCommon * attrib255() const
		{
		switch ( data_case_index() )
			{
			case 255:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:86:attrib255", data_case_index(), "((int) 0x00FF)");
				break;
			}
		return attrib255_;
		}
	CROB * bocmd_CROB() const
		{
		switch ( data_case_index() )
			{
			case 3073:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:120:bocmd_CROB", data_case_index(), "((int) 0x0c01)");
				break;
			}
		return bocmd_CROB_;
		}
	PCB * bocmd_PCB() const
		{
		switch ( data_case_index() )
			{
			case 3074:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:122:bocmd_PCB", data_case_index(), "((int) 0x0c02)");
				break;
			}
		return bocmd_PCB_;
		}
	uint8 bocmd_PM() const
		{
		switch ( data_case_index() )
			{
			case 3075:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:124:bocmd_PM", data_case_index(), "((int) 0x0c03)");
				break;
			}
		return bocmd_PM_;
		}
	AnaOut32 * ao_32() const
		{
		switch ( data_case_index() )
			{
			case 10497:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:234:ao_32", data_case_index(), "((int) 0x2901)");
				break;
			}
		return ao_32_;
		}
	AnaOut16 * ao_16() const
		{
		switch ( data_case_index() )
			{
			case 10498:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:235:ao_16", data_case_index(), "((int) 0x2902)");
				break;
			}
		return ao_16_;
		}
	AnaOutSP * ao_sp() const
		{
		switch ( data_case_index() )
			{
			case 10499:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:236:ao_sp", data_case_index(), "((int) 0x2903)");
				break;
			}
		return ao_sp_;
		}
	AnaOutDP * ao_dp() const
		{
		switch ( data_case_index() )
			{
			case 10500:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:237:ao_dp", data_case_index(), "((int) 0x2904)");
				break;
			}
		return ao_dp_;
		}
	AbsTime * time_abs() const
		{
		switch ( data_case_index() )
			{
			case 12801:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:263:time_abs", data_case_index(), "((int) 0x3201)");
				break;
			}
		return time_abs_;
		}
	AbsTimeInterval * time_interval() const
		{
		switch ( data_case_index() )
			{
			case 12802:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:264:time_interval", data_case_index(), "((int) 0x3202)");
				break;
			}
		return time_interval_;
		}
	Last_AbsTime * time_abs_last() const
		{
		switch ( data_case_index() )
			{
			case 12803:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:265:time_abs_last", data_case_index(), "((int) 0x3203)");
				break;
			}
		return time_abs_last_;
		}
	AbsTime * time_abs_sync() const
		{
		switch ( data_case_index() )
			{
			case 13057:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:268:time_abs_sync", data_case_index(), "((int) 0x3301)");
				break;
			}
		return time_abs_sync_;
		}
	AbsTime * time_abs_unsync() const
		{
		switch ( data_case_index() )
			{
			case 13058:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:269:time_abs_unsync", data_case_index(), "((int) 0x3302)");
				break;
			}
		return time_abs_unsync_;
		}
	uint16 time_coarse() const
		{
		switch ( data_case_index() )
			{
			case 13313:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:272:time_coarse", data_case_index(), "((int) 0x3401)");
				break;
			}
		return time_coarse_;
		}
	uint16 time_fine() const
		{
		switch ( data_case_index() )
			{
			case 13314:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:273:time_fine", data_case_index(), "((int) 0x3402)");
				break;
			}
		return time_fine_;
		}
	File_Control_ID * file_control_id() const
		{
		switch ( data_case_index() )
			{
			case 17921:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:285:file_control_id", data_case_index(), "((int) 0x4601)");
				break;
			}
		return file_control_id_;
		}
	File_Control_Auth_Wrap * file_control_auth() const
		{
		switch ( data_case_index() )
			{
			case 17922:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:286:file_control_auth", data_case_index(), "((int) 0x4602)");
				break;
			}
		return file_control_auth_;
		}
	File_Control_Cmd * file_control_cmd() const
		{
		switch ( data_case_index() )
			{
			case 17923:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:287:file_control_cmd", data_case_index(), "((int) 0x4603)");
				break;
			}
		return file_control_cmd_;
		}
	File_Control_Cmd_Status * file_control_cmd_status() const
		{
		switch ( data_case_index() )
			{
			case 17924:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:290:file_control_cmd_status", data_case_index(), "((int) 0x4604)");
				break;
			}
		return file_control_cmd_status_;
		}
	File_Transport * file_trans() const
		{
		switch ( data_case_index() )
			{
			case 17925:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:291:file_trans", data_case_index(), "((int) 0x4605)");
				break;
			}
		return file_trans_;
		}
	File_Transport_Status * file_trans_status() const
		{
		switch ( data_case_index() )
			{
			case 17926:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:292:file_trans_status", data_case_index(), "((int) 0x4606)");
				break;
			}
		return file_trans_status_;
		}
	File_Desc * file_desc() const
		{
		switch ( data_case_index() )
			{
			case 17927:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:294:file_desc", data_case_index(), "((int) 0x4607)");
				break;
			}
		return file_desc_;
		}
	bytestring const & iin() const
		{
		switch ( data_case_index() )
			{
			case 20481:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:298:iin", data_case_index(), "((int) 0x5001)");
				break;
			}
		return iin_;
		}
	PrivRegObj * priregobj() const
		{
		switch ( data_case_index() )
			{
			case 21249:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:307:priregobj", data_case_index(), "((int) 0x5301)");
				break;
			}
		return priregobj_;
		}
	PrivRegObjDesc * priregobjdesc() const
		{
		switch ( data_case_index() )
			{
			case 21250:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:308:priregobjdesc", data_case_index(), "((int) 0x5302)");
				break;
			}
		return priregobjdesc_;
		}
	DescEle * desc_ele() const
		{
		switch ( data_case_index() )
			{
			case 21761:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:311:desc_ele", data_case_index(), "((int) 0x5501)");
				break;
			}
		return desc_ele_;
		}
	DescEle * desc_ele86() const
		{
		switch ( data_case_index() )
			{
			case 22017:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:314:desc_ele86", data_case_index(), "((int) 0x5601)");
				break;
			}
		return desc_ele86_;
		}
	uint8 cha() const
		{
		switch ( data_case_index() )
			{
			case 22018:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:315:cha", data_case_index(), "((int) 0x5602)");
				break;
			}
		return cha_;
		}
	Debug_Byte * point_index_attr() const
		{
		switch ( data_case_index() )
			{
			case 22019:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:316:point_index_attr", data_case_index(), "((int) 0x5603)");
				break;
			}
		return point_index_attr_;
		}
	Debug_Byte * present_value() const
		{
		switch ( data_case_index() )
			{
			case 22273:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:319:present_value", data_case_index(), "((int) 0x5701)");
				break;
			}
		return present_value_;
		}
	Debug_Byte * snapshot() const
		{
		switch ( data_case_index() )
			{
			case 22529:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:322:snapshot", data_case_index(), "((int) 0x5801)");
				break;
			}
		return snapshot_;
		}
	ActivateConf * activate_conf() const
		{
		switch ( data_case_index() )
			{
			case 23297:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:329:activate_conf", data_case_index(), "((int) 0x5b01)");
				break;
			}
		return activate_conf_;
		}
	uint16 bcd_small() const
		{
		switch ( data_case_index() )
			{
			case 25857:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:332:bcd_small", data_case_index(), "((int) 0x6501)");
				break;
			}
		return bcd_small_;
		}
	uint32 bcd_medium() const
		{
		switch ( data_case_index() )
			{
			case 25858:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:333:bcd_medium", data_case_index(), "((int) 0x6502)");
				break;
			}
		return bcd_medium_;
		}
	BCD_Large * bcd_large() const
		{
		switch ( data_case_index() )
			{
			case 25859:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:334:bcd_large", data_case_index(), "((int) 0x6503)");
				break;
			}
		return bcd_large_;
		}
	uint8 unsigned_integer() const
		{
		switch ( data_case_index() )
			{
			case 26113:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:337:unsigned_integer", data_case_index(), "((int) 0x6601)");
				break;
			}
		return unsigned_integer_;
		}
	AuthChallenge * challenge() const
		{
		switch ( data_case_index() )
			{
			case 30721:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:340:challenge", data_case_index(), "((int) 0x7801)");
				break;
			}
		return challenge_;
		}
	AuthRely * reply() const
		{
		switch ( data_case_index() )
			{
			case 30722:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:341:reply", data_case_index(), "((int) 0x7802)");
				break;
			}
		return reply_;
		}
	AuthAggrRequest * aggrRequest() const
		{
		switch ( data_case_index() )
			{
			case 30723:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:342:aggrRequest", data_case_index(), "((int) 0x7803)");
				break;
			}
		return aggrRequest_;
		}
	uint8 seesionKeyRequest() const
		{
		switch ( data_case_index() )
			{
			case 30724:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:343:seesionKeyRequest", data_case_index(), "((int) 0x7804)");
				break;
			}
		return seesionKeyRequest_;
		}
	AuthSessionKeyStatus * status() const
		{
		switch ( data_case_index() )
			{
			case 30725:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:344:status", data_case_index(), "((int) 0x7805)");
				break;
			}
		return status_;
		}
	AuthSessionKeyChange * keyChange() const
		{
		switch ( data_case_index() )
			{
			case 30726:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:345:keyChange", data_case_index(), "((int) 0x7806)");
				break;
			}
		return keyChange_;
		}
	AuthError * error() const
		{
		switch ( data_case_index() )
			{
			case 30727:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:346:error", data_case_index(), "((int) 0x7807)");
				break;
			}
		return error_;
		}
	Default_Wrap * unmatched() const
		{
		return unmatched_;
		}
	uint8 function_code() const { return function_code_; }
	uint8 qualifier_field() const { return qualifier_field_; }
	uint16 object_type_field() const { return object_type_field_; }
	
protected:
	Prefix_Type * prefix_;
	int data_case_index_;
	AttributeCommon * attrib211_;
	AttributeCommon * attrib212_;
	AttributeCommon * attrib213_;
	AttributeCommon * attrib214_;
	AttributeCommon * attrib215_;
	AttributeCommon * attrib216_;
	AttributeCommon * attrib217_;
	AttributeCommon * attrib218_;
	AttributeCommon * attrib219_;
	AttributeCommon * attrib220_;
	AttributeCommon * attrib221_;
	AttributeCommon * attrib222_;
	AttributeCommon * attrib223_;
	AttributeCommon * attrib224_;
	AttributeCommon * attrib225_;
	AttributeCommon * attrib226_;
	AttributeCommon * attrib227_;
	AttributeCommon * attrib228_;
	AttributeCommon * attrib229_;
	AttributeCommon * attrib230_;
	AttributeCommon * attrib231_;
	AttributeCommon * attrib232_;
	AttributeCommon * attrib233_;
	AttributeCommon * attrib234_;
	AttributeCommon * attrib235_;
	AttributeCommon * attrib236_;
	AttributeCommon * attrib237_;
	AttributeCommon * attrib238_;
	AttributeCommon * attrib239_;
	AttributeCommon * attrib240_;
	AttributeCommon * attrib241_;
	AttributeCommon * attrib242_;
	AttributeCommon * attrib243_;
	AttributeCommon * attrib245_;
	AttributeCommon * attrib246_;
	AttributeCommon * attrib247_;
	AttributeCommon * attrib248_;
	AttributeCommon * attrib249_;
	AttributeCommon * attrib250_;
	AttributeCommon * attrib252_;
	AttributeCommon * attrib254_;
	AttributeCommon * attrib255_;
	CROB * bocmd_CROB_;
	PCB * bocmd_PCB_;
	uint8 bocmd_PM_;
	AnaOut32 * ao_32_;
	AnaOut16 * ao_16_;
	AnaOutSP * ao_sp_;
	AnaOutDP * ao_dp_;
	AbsTime * time_abs_;
	AbsTimeInterval * time_interval_;
	Last_AbsTime * time_abs_last_;
	AbsTime * time_abs_sync_;
	AbsTime * time_abs_unsync_;
	uint16 time_coarse_;
	uint16 time_fine_;
	File_Control_ID * file_control_id_;
	File_Control_Auth_Wrap * file_control_auth_;
	File_Control_Cmd * file_control_cmd_;
	File_Control_Cmd_Status * file_control_cmd_status_;
	File_Transport * file_trans_;
	File_Transport_Status * file_trans_status_;
	File_Desc * file_desc_;
	bytestring iin_;
	PrivRegObj * priregobj_;
	PrivRegObjDesc * priregobjdesc_;
	DescEle * desc_ele_;
	DescEle * desc_ele86_;
	uint8 cha_;
	Debug_Byte * point_index_attr_;
	Debug_Byte * present_value_;
	Debug_Byte * snapshot_;
	ActivateConf * activate_conf_;
	uint16 bcd_small_;
	uint32 bcd_medium_;
	BCD_Large * bcd_large_;
	uint8 unsigned_integer_;
	AuthChallenge * challenge_;
	AuthRely * reply_;
	AuthAggrRequest * aggrRequest_;
	uint8 seesionKeyRequest_;
	AuthSessionKeyStatus * status_;
	AuthSessionKeyChange * keyChange_;
	AuthError * error_;
	Default_Wrap * unmatched_;
	uint8 function_code_;
	uint8 qualifier_field_;
	uint16 object_type_field_;
};


class Response_Data_Object
{
public:
	Response_Data_Object(uint8 function_code, uint8 qualifier_field, uint16 object_type_field);
	~Response_Data_Object();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context, int t_byteorder);
	
	// Member access functions
	Prefix_Type * prefix() const { return prefix_; }
	int data_case_index() const	{ return data_case_index_; }
	AttributeCommon * attrib211() const
		{
		switch ( data_case_index() )
			{
			case 211:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:357:attrib211", data_case_index(), "((int) 0x00D3)");
				break;
			}
		return attrib211_;
		}
	AttributeCommon * attrib212() const
		{
		switch ( data_case_index() )
			{
			case 212:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:358:attrib212", data_case_index(), "((int) 0x00D4)");
				break;
			}
		return attrib212_;
		}
	AttributeCommon * attrib213() const
		{
		switch ( data_case_index() )
			{
			case 213:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:359:attrib213", data_case_index(), "((int) 0x00D5)");
				break;
			}
		return attrib213_;
		}
	AttributeCommon * attrib214() const
		{
		switch ( data_case_index() )
			{
			case 214:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:360:attrib214", data_case_index(), "((int) 0x00D6)");
				break;
			}
		return attrib214_;
		}
	AttributeCommon * attrib215() const
		{
		switch ( data_case_index() )
			{
			case 215:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:361:attrib215", data_case_index(), "((int) 0x00D7)");
				break;
			}
		return attrib215_;
		}
	AttributeCommon * attrib216() const
		{
		switch ( data_case_index() )
			{
			case 216:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:362:attrib216", data_case_index(), "((int) 0x00D8)");
				break;
			}
		return attrib216_;
		}
	AttributeCommon * attrib217() const
		{
		switch ( data_case_index() )
			{
			case 217:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:363:attrib217", data_case_index(), "((int) 0x00D9)");
				break;
			}
		return attrib217_;
		}
	AttributeCommon * attrib218() const
		{
		switch ( data_case_index() )
			{
			case 218:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:364:attrib218", data_case_index(), "((int) 0x00DA)");
				break;
			}
		return attrib218_;
		}
	AttributeCommon * attrib219() const
		{
		switch ( data_case_index() )
			{
			case 219:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:365:attrib219", data_case_index(), "((int) 0x00DB)");
				break;
			}
		return attrib219_;
		}
	AttributeCommon * attrib220() const
		{
		switch ( data_case_index() )
			{
			case 220:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:366:attrib220", data_case_index(), "((int) 0x00DC)");
				break;
			}
		return attrib220_;
		}
	AttributeCommon * attrib221() const
		{
		switch ( data_case_index() )
			{
			case 221:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:367:attrib221", data_case_index(), "((int) 0x00DD)");
				break;
			}
		return attrib221_;
		}
	AttributeCommon * attrib222() const
		{
		switch ( data_case_index() )
			{
			case 222:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:368:attrib222", data_case_index(), "((int) 0x00DE)");
				break;
			}
		return attrib222_;
		}
	AttributeCommon * attrib223() const
		{
		switch ( data_case_index() )
			{
			case 223:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:369:attrib223", data_case_index(), "((int) 0x00DF)");
				break;
			}
		return attrib223_;
		}
	AttributeCommon * attrib224() const
		{
		switch ( data_case_index() )
			{
			case 224:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:370:attrib224", data_case_index(), "((int) 0x00E0)");
				break;
			}
		return attrib224_;
		}
	AttributeCommon * attrib225() const
		{
		switch ( data_case_index() )
			{
			case 225:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:371:attrib225", data_case_index(), "((int) 0x00E1)");
				break;
			}
		return attrib225_;
		}
	AttributeCommon * attrib226() const
		{
		switch ( data_case_index() )
			{
			case 226:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:372:attrib226", data_case_index(), "((int) 0x00E2)");
				break;
			}
		return attrib226_;
		}
	AttributeCommon * attrib227() const
		{
		switch ( data_case_index() )
			{
			case 227:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:373:attrib227", data_case_index(), "((int) 0x00E3)");
				break;
			}
		return attrib227_;
		}
	AttributeCommon * attrib228() const
		{
		switch ( data_case_index() )
			{
			case 228:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:374:attrib228", data_case_index(), "((int) 0x00E4)");
				break;
			}
		return attrib228_;
		}
	AttributeCommon * attrib229() const
		{
		switch ( data_case_index() )
			{
			case 229:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:375:attrib229", data_case_index(), "((int) 0x00E5)");
				break;
			}
		return attrib229_;
		}
	AttributeCommon * attrib230() const
		{
		switch ( data_case_index() )
			{
			case 230:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:376:attrib230", data_case_index(), "((int) 0x00E6)");
				break;
			}
		return attrib230_;
		}
	AttributeCommon * attrib231() const
		{
		switch ( data_case_index() )
			{
			case 231:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:377:attrib231", data_case_index(), "((int) 0x00E7)");
				break;
			}
		return attrib231_;
		}
	AttributeCommon * attrib232() const
		{
		switch ( data_case_index() )
			{
			case 232:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:378:attrib232", data_case_index(), "((int) 0x00E8)");
				break;
			}
		return attrib232_;
		}
	AttributeCommon * attrib233() const
		{
		switch ( data_case_index() )
			{
			case 233:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:379:attrib233", data_case_index(), "((int) 0x00E9)");
				break;
			}
		return attrib233_;
		}
	AttributeCommon * attrib234() const
		{
		switch ( data_case_index() )
			{
			case 234:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:380:attrib234", data_case_index(), "((int) 0x00EA)");
				break;
			}
		return attrib234_;
		}
	AttributeCommon * attrib235() const
		{
		switch ( data_case_index() )
			{
			case 235:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:381:attrib235", data_case_index(), "((int) 0x00EB)");
				break;
			}
		return attrib235_;
		}
	AttributeCommon * attrib236() const
		{
		switch ( data_case_index() )
			{
			case 236:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:382:attrib236", data_case_index(), "((int) 0x00EC)");
				break;
			}
		return attrib236_;
		}
	AttributeCommon * attrib237() const
		{
		switch ( data_case_index() )
			{
			case 237:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:383:attrib237", data_case_index(), "((int) 0x00ED)");
				break;
			}
		return attrib237_;
		}
	AttributeCommon * attrib238() const
		{
		switch ( data_case_index() )
			{
			case 238:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:384:attrib238", data_case_index(), "((int) 0x00EE)");
				break;
			}
		return attrib238_;
		}
	AttributeCommon * attrib239() const
		{
		switch ( data_case_index() )
			{
			case 239:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:385:attrib239", data_case_index(), "((int) 0x00EF)");
				break;
			}
		return attrib239_;
		}
	AttributeCommon * attrib240() const
		{
		switch ( data_case_index() )
			{
			case 240:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:386:attrib240", data_case_index(), "((int) 0x00F0)");
				break;
			}
		return attrib240_;
		}
	AttributeCommon * attrib241() const
		{
		switch ( data_case_index() )
			{
			case 241:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:387:attrib241", data_case_index(), "((int) 0x00F1)");
				break;
			}
		return attrib241_;
		}
	AttributeCommon * attrib242() const
		{
		switch ( data_case_index() )
			{
			case 242:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:388:attrib242", data_case_index(), "((int) 0x00F2)");
				break;
			}
		return attrib242_;
		}
	AttributeCommon * attrib243() const
		{
		switch ( data_case_index() )
			{
			case 243:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:389:attrib243", data_case_index(), "((int) 0x00F3)");
				break;
			}
		return attrib243_;
		}
	AttributeCommon * attrib245() const
		{
		switch ( data_case_index() )
			{
			case 245:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:390:attrib245", data_case_index(), "((int) 0x00F5)");
				break;
			}
		return attrib245_;
		}
	AttributeCommon * attrib246() const
		{
		switch ( data_case_index() )
			{
			case 246:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:391:attrib246", data_case_index(), "((int) 0x00F6)");
				break;
			}
		return attrib246_;
		}
	AttributeCommon * attrib247() const
		{
		switch ( data_case_index() )
			{
			case 247:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:392:attrib247", data_case_index(), "((int) 0x00F7)");
				break;
			}
		return attrib247_;
		}
	AttributeCommon * attrib248() const
		{
		switch ( data_case_index() )
			{
			case 248:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:393:attrib248", data_case_index(), "((int) 0x00F8)");
				break;
			}
		return attrib248_;
		}
	AttributeCommon * attrib249() const
		{
		switch ( data_case_index() )
			{
			case 249:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:394:attrib249", data_case_index(), "((int) 0x00F9)");
				break;
			}
		return attrib249_;
		}
	AttributeCommon * attrib250() const
		{
		switch ( data_case_index() )
			{
			case 250:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:395:attrib250", data_case_index(), "((int) 0x00FA)");
				break;
			}
		return attrib250_;
		}
	AttributeCommon * attrib252() const
		{
		switch ( data_case_index() )
			{
			case 252:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:396:attrib252", data_case_index(), "((int) 0x00FC)");
				break;
			}
		return attrib252_;
		}
	AttributeCommon * attrib254() const
		{
		switch ( data_case_index() )
			{
			case 254:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:397:attrib254", data_case_index(), "((int) 0x00FE)");
				break;
			}
		return attrib254_;
		}
	AttributeCommon * attrib255() const
		{
		switch ( data_case_index() )
			{
			case 255:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:398:attrib255", data_case_index(), "((int) 0x00FF)");
				break;
			}
		return attrib255_;
		}
	uint8 biwoflag() const
		{
		switch ( data_case_index() )
			{
			case 257:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:401:biwoflag", data_case_index(), "((int) 0x0101)");
				break;
			}
		return biwoflag_;
		}
	uint8 biwflag() const
		{
		switch ( data_case_index() )
			{
			case 258:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:402:biwflag", data_case_index(), "((int) 0x0102)");
				break;
			}
		return biwflag_;
		}
	uint8 biewoflag() const
		{
		switch ( data_case_index() )
			{
			case 513:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:405:biewoflag", data_case_index(), "((int) 0x0201)");
				break;
			}
		return biewoflag_;
		}
	BinInEveAtime * biewatime() const
		{
		switch ( data_case_index() )
			{
			case 514:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:406:biewatime", data_case_index(), "((int) 0x0202)");
				break;
			}
		return biewatime_;
		}
	BinInEveRtime * biewrtime() const
		{
		switch ( data_case_index() )
			{
			case 515:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:407:biewrtime", data_case_index(), "((int) 0x0203)");
				break;
			}
		return biewrtime_;
		}
	bytestring const & dbibytes() const
		{
		switch ( data_case_index() )
			{
			case 769:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:410:dbibytes", data_case_index(), "((int) 0x0301)");
				break;
			}
		return dbibytes_;
		}
	uint8 dbiflag() const
		{
		switch ( data_case_index() )
			{
			case 770:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:411:dbiflag", data_case_index(), "((int) 0x0302)");
				break;
			}
		return dbiflag_;
		}
	DoubleInEveAtime * dbieatime() const
		{
		switch ( data_case_index() )
			{
			case 1025:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:414:dbieatime", data_case_index(), "((int) 0x0401)");
				break;
			}
		return dbieatime_;
		}
	DoubleInEveRtime * dbiertime() const
		{
		switch ( data_case_index() )
			{
			case 1026:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:415:dbiertime", data_case_index(), "((int) 0x0402)");
				break;
			}
		return dbiertime_;
		}
	uint8 bowoflag() const
		{
		switch ( data_case_index() )
			{
			case 2561:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:418:bowoflag", data_case_index(), "((int) 0x0a01)");
				break;
			}
		return bowoflag_;
		}
	uint8 bowflag() const
		{
		switch ( data_case_index() )
			{
			case 2562:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:419:bowflag", data_case_index(), "((int) 0x0a02)");
				break;
			}
		return bowflag_;
		}
	uint8 boewflag() const
		{
		switch ( data_case_index() )
			{
			case 2817:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:422:boewflag", data_case_index(), "((int) 0x0b01)");
				break;
			}
		return boewflag_;
		}
	BinOutEveAtime * boewatime() const
		{
		switch ( data_case_index() )
			{
			case 2818:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:423:boewatime", data_case_index(), "((int) 0x0b02)");
				break;
			}
		return boewatime_;
		}
	CROB * bocmd_CROB() const
		{
		switch ( data_case_index() )
			{
			case 3073:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:426:bocmd_CROB", data_case_index(), "((int) 0x0c01)");
				break;
			}
		return bocmd_CROB_;
		}
	PCB * bocmd_PCB() const
		{
		switch ( data_case_index() )
			{
			case 3074:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:428:bocmd_PCB", data_case_index(), "((int) 0x0c02)");
				break;
			}
		return bocmd_PCB_;
		}
	uint8 bocmd_PM() const
		{
		switch ( data_case_index() )
			{
			case 3075:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:430:bocmd_PM", data_case_index(), "((int) 0x0c03)");
				break;
			}
		return bocmd_PM_;
		}
	uint8 boceFlag() const
		{
		switch ( data_case_index() )
			{
			case 3329:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:433:boceFlag", data_case_index(), "((int) 0x0d01)");
				break;
			}
		return boceFlag_;
		}
	BinOutCmdEveAtime * boceAtime() const
		{
		switch ( data_case_index() )
			{
			case 3330:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:434:boceAtime", data_case_index(), "((int) 0x0d02)");
				break;
			}
		return boceAtime_;
		}
	Counter32wFlag * counter_32_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5121:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:437:counter_32_wflag", data_case_index(), "((int) 0x1401)");
				break;
			}
		return counter_32_wflag_;
		}
	Counter16wFlag * counter_16_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5122:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:438:counter_16_wflag", data_case_index(), "((int) 0x1402)");
				break;
			}
		return counter_16_wflag_;
		}
	Debug_Byte * counter_32_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5123:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:439:counter_32_wflag_delta", data_case_index(), "((int) 0x1403)");
				break;
			}
		return counter_32_wflag_delta_;
		}
	Debug_Byte * counter_16_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5124:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:440:counter_16_wflag_delta", data_case_index(), "((int) 0x1404)");
				break;
			}
		return counter_16_wflag_delta_;
		}
	Counter32woFlag * counter_32_woflag() const
		{
		switch ( data_case_index() )
			{
			case 5125:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:441:counter_32_woflag", data_case_index(), "((int) 0x1405)");
				break;
			}
		return counter_32_woflag_;
		}
	Counter16woFlag * counter_16_woflag() const
		{
		switch ( data_case_index() )
			{
			case 5126:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:442:counter_16_woflag", data_case_index(), "((int) 0x1406)");
				break;
			}
		return counter_16_woflag_;
		}
	Debug_Byte * counter_32_woflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5127:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:443:counter_32_woflag_delta", data_case_index(), "((int) 0x1407)");
				break;
			}
		return counter_32_woflag_delta_;
		}
	Debug_Byte * counter_16_woflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5128:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:444:counter_16_woflag_delta", data_case_index(), "((int) 0x1408)");
				break;
			}
		return counter_16_woflag_delta_;
		}
	FrozenCounter32wFlag * f_counter_32_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5377:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:447:f_counter_32_wflag", data_case_index(), "((int) 0x1501)");
				break;
			}
		return f_counter_32_wflag_;
		}
	FrozenCounter16wFlag * f_counter_16_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5378:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:448:f_counter_16_wflag", data_case_index(), "((int) 0x1502)");
				break;
			}
		return f_counter_16_wflag_;
		}
	Debug_Byte * f_counter_32_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5379:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:449:f_counter_32_wflag_delta", data_case_index(), "((int) 0x1503)");
				break;
			}
		return f_counter_32_wflag_delta_;
		}
	Debug_Byte * f_counter_16_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5380:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:450:f_counter_16_wflag_delta", data_case_index(), "((int) 0x1504)");
				break;
			}
		return f_counter_16_wflag_delta_;
		}
	FrozenCounter32wFlagTime * f_counter_32_wflag_time() const
		{
		switch ( data_case_index() )
			{
			case 5381:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:451:f_counter_32_wflag_time", data_case_index(), "((int) 0x1505)");
				break;
			}
		return f_counter_32_wflag_time_;
		}
	FrozenCounter16wFlagTime * f_counter_16_wflag_time() const
		{
		switch ( data_case_index() )
			{
			case 5382:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:452:f_counter_16_wflag_time", data_case_index(), "((int) 0x1506)");
				break;
			}
		return f_counter_16_wflag_time_;
		}
	Debug_Byte * f_counter_32_wflag_time_delta() const
		{
		switch ( data_case_index() )
			{
			case 5383:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:453:f_counter_32_wflag_time_delta", data_case_index(), "((int) 0x1507)");
				break;
			}
		return f_counter_32_wflag_time_delta_;
		}
	Debug_Byte * f_counter_16_wflag_time_delta() const
		{
		switch ( data_case_index() )
			{
			case 5384:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:454:f_counter_16_wflag_time_delta", data_case_index(), "((int) 0x1508)");
				break;
			}
		return f_counter_16_wflag_time_delta_;
		}
	FrozenCounter32woFlag * f_counter_32_woflag() const
		{
		switch ( data_case_index() )
			{
			case 5385:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:455:f_counter_32_woflag", data_case_index(), "((int) 0x1509)");
				break;
			}
		return f_counter_32_woflag_;
		}
	FrozenCounter16woFlag * f_counter_16_woflag() const
		{
		switch ( data_case_index() )
			{
			case 5386:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:456:f_counter_16_woflag", data_case_index(), "((int) 0x150a)");
				break;
			}
		return f_counter_16_woflag_;
		}
	Debug_Byte * f_counter_32_woflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5387:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:457:f_counter_32_woflag_delta", data_case_index(), "((int) 0x150b)");
				break;
			}
		return f_counter_32_woflag_delta_;
		}
	Debug_Byte * f_counter_16_woflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5388:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:458:f_counter_16_woflag_delta", data_case_index(), "((int) 0x150c)");
				break;
			}
		return f_counter_16_woflag_delta_;
		}
	CounterEve32wFlag * counter_event_32_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5633:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:461:counter_event_32_wflag", data_case_index(), "((int) 0x1601)");
				break;
			}
		return counter_event_32_wflag_;
		}
	CounterEve16wFlag * counter_event_16_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5634:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:462:counter_event_16_wflag", data_case_index(), "((int) 0x1602)");
				break;
			}
		return counter_event_16_wflag_;
		}
	Debug_Byte * counter_event_32_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5635:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:463:counter_event_32_wflag_delta", data_case_index(), "((int) 0x1603)");
				break;
			}
		return counter_event_32_wflag_delta_;
		}
	Debug_Byte * counter_event_16_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5636:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:464:counter_event_16_wflag_delta", data_case_index(), "((int) 0x1604)");
				break;
			}
		return counter_event_16_wflag_delta_;
		}
	CounterEve32wFlagTime * counter_event_32_wflag_time() const
		{
		switch ( data_case_index() )
			{
			case 5637:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:465:counter_event_32_wflag_time", data_case_index(), "((int) 0x1605)");
				break;
			}
		return counter_event_32_wflag_time_;
		}
	CounterEve16wFlagTime * counter_event_16_wflag_time() const
		{
		switch ( data_case_index() )
			{
			case 5638:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:466:counter_event_16_wflag_time", data_case_index(), "((int) 0x1606)");
				break;
			}
		return counter_event_16_wflag_time_;
		}
	Debug_Byte * counter_event_32_wflag_time_delta() const
		{
		switch ( data_case_index() )
			{
			case 5639:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:467:counter_event_32_wflag_time_delta", data_case_index(), "((int) 0x1607)");
				break;
			}
		return counter_event_32_wflag_time_delta_;
		}
	Debug_Byte * counter_event_16_wflag_time_delat() const
		{
		switch ( data_case_index() )
			{
			case 5640:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:468:counter_event_16_wflag_time_delat", data_case_index(), "((int) 0x1608)");
				break;
			}
		return counter_event_16_wflag_time_delat_;
		}
	CounterEve32wFlag * f_counter_event_32_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5889:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:471:f_counter_event_32_wflag", data_case_index(), "((int) 0x1701)");
				break;
			}
		return f_counter_event_32_wflag_;
		}
	CounterEve16wFlag * f_counter_event_16_wflag() const
		{
		switch ( data_case_index() )
			{
			case 5890:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:472:f_counter_event_16_wflag", data_case_index(), "((int) 0x1702)");
				break;
			}
		return f_counter_event_16_wflag_;
		}
	Debug_Byte * f_counter_event_32_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5891:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:473:f_counter_event_32_wflag_delta", data_case_index(), "((int) 0x1703)");
				break;
			}
		return f_counter_event_32_wflag_delta_;
		}
	Debug_Byte * f_counter_event_16_wflag_delta() const
		{
		switch ( data_case_index() )
			{
			case 5892:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:474:f_counter_event_16_wflag_delta", data_case_index(), "((int) 0x1704)");
				break;
			}
		return f_counter_event_16_wflag_delta_;
		}
	CounterEve32wFlagTime * f_counter_event_32_wflag_time() const
		{
		switch ( data_case_index() )
			{
			case 5893:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:475:f_counter_event_32_wflag_time", data_case_index(), "((int) 0x1705)");
				break;
			}
		return f_counter_event_32_wflag_time_;
		}
	CounterEve16wFlagTime * f_counter_event_16_wflag_time() const
		{
		switch ( data_case_index() )
			{
			case 5894:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:476:f_counter_event_16_wflag_time", data_case_index(), "((int) 0x1706)");
				break;
			}
		return f_counter_event_16_wflag_time_;
		}
	Debug_Byte * f_counter_event_32_wflag_time_delta() const
		{
		switch ( data_case_index() )
			{
			case 5895:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:477:f_counter_event_32_wflag_time_delta", data_case_index(), "((int) 0x1707)");
				break;
			}
		return f_counter_event_32_wflag_time_delta_;
		}
	Debug_Byte * f_counter_event_16_wflag_time_delat() const
		{
		switch ( data_case_index() )
			{
			case 5896:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:478:f_counter_event_16_wflag_time_delat", data_case_index(), "((int) 0x1708)");
				break;
			}
		return f_counter_event_16_wflag_time_delat_;
		}
	AnalogInput32wFlag * ai_32_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7681:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:481:ai_32_wflag", data_case_index(), "((int) 0x1e01)");
				break;
			}
		return ai_32_wflag_;
		}
	AnalogInput16wFlag * ai_16_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7682:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:482:ai_16_wflag", data_case_index(), "((int) 0x1e02)");
				break;
			}
		return ai_16_wflag_;
		}
	AnalogInput32woFlag * ai_32_woflag() const
		{
		switch ( data_case_index() )
			{
			case 7683:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:483:ai_32_woflag", data_case_index(), "((int) 0x1e03)");
				break;
			}
		return ai_32_woflag_;
		}
	AnalogInput16woFlag * ai_16_woflag() const
		{
		switch ( data_case_index() )
			{
			case 7684:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:484:ai_16_woflag", data_case_index(), "((int) 0x1e04)");
				break;
			}
		return ai_16_woflag_;
		}
	AnalogInputSPwFlag * ai_sp_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7685:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:485:ai_sp_wflag", data_case_index(), "((int) 0x1e05)");
				break;
			}
		return ai_sp_wflag_;
		}
	AnalogInputDPwFlag * ai_dp_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7686:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:486:ai_dp_wflag", data_case_index(), "((int) 0x1e06)");
				break;
			}
		return ai_dp_wflag_;
		}
	FrozenAnalogInput32wFlag * f_ai_32_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7937:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:489:f_ai_32_wflag", data_case_index(), "((int) 0x1f01)");
				break;
			}
		return f_ai_32_wflag_;
		}
	FrozenAnalogInput16wFlag * f_ai_16_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7938:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:490:f_ai_16_wflag", data_case_index(), "((int) 0x1f02)");
				break;
			}
		return f_ai_16_wflag_;
		}
	FrozenAnalogInput32wTime * f_ai_32_wtime() const
		{
		switch ( data_case_index() )
			{
			case 7939:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:491:f_ai_32_wtime", data_case_index(), "((int) 0x1f03)");
				break;
			}
		return f_ai_32_wtime_;
		}
	FrozenAnalogInput16wTime * f_ai_16_wtime() const
		{
		switch ( data_case_index() )
			{
			case 7940:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:492:f_ai_16_wtime", data_case_index(), "((int) 0x1f04)");
				break;
			}
		return f_ai_16_wtime_;
		}
	AnalogInput32woFlag * f_ai_32_woflag() const
		{
		switch ( data_case_index() )
			{
			case 7941:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:493:f_ai_32_woflag", data_case_index(), "((int) 0x1f05)");
				break;
			}
		return f_ai_32_woflag_;
		}
	AnalogInput16woFlag * f_ai_16_woflag() const
		{
		switch ( data_case_index() )
			{
			case 7942:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:494:f_ai_16_woflag", data_case_index(), "((int) 0x1f06)");
				break;
			}
		return f_ai_16_woflag_;
		}
	AnalogInputSPwFlag * f_ai_sp_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7943:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:495:f_ai_sp_wflag", data_case_index(), "((int) 0x1f07)");
				break;
			}
		return f_ai_sp_wflag_;
		}
	AnalogInputDPwFlag * f_ai_dp_wflag() const
		{
		switch ( data_case_index() )
			{
			case 7944:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:496:f_ai_dp_wflag", data_case_index(), "((int) 0x1f08)");
				break;
			}
		return f_ai_dp_wflag_;
		}
	AnalogInput32woTime * ai32wotime() const
		{
		switch ( data_case_index() )
			{
			case 8193:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:499:ai32wotime", data_case_index(), "((int) 0x2001)");
				break;
			}
		return ai32wotime_;
		}
	AnalogInput16woTime * ai16wotime() const
		{
		switch ( data_case_index() )
			{
			case 8194:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:500:ai16wotime", data_case_index(), "((int) 0x2002)");
				break;
			}
		return ai16wotime_;
		}
	AnalogInput32wTime * ai32wtime() const
		{
		switch ( data_case_index() )
			{
			case 8195:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:501:ai32wtime", data_case_index(), "((int) 0x2003)");
				break;
			}
		return ai32wtime_;
		}
	AnalogInput16wTime * ai16wtime() const
		{
		switch ( data_case_index() )
			{
			case 8196:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:502:ai16wtime", data_case_index(), "((int) 0x2004)");
				break;
			}
		return ai16wtime_;
		}
	AnalogInputSPwoTime * aispwotime() const
		{
		switch ( data_case_index() )
			{
			case 8197:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:503:aispwotime", data_case_index(), "((int) 0x2005)");
				break;
			}
		return aispwotime_;
		}
	AnalogInputDPwoTime * aidpwotime() const
		{
		switch ( data_case_index() )
			{
			case 8198:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:504:aidpwotime", data_case_index(), "((int) 0x2006)");
				break;
			}
		return aidpwotime_;
		}
	AnalogInputSPwTime * aispwtime() const
		{
		switch ( data_case_index() )
			{
			case 8199:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:505:aispwtime", data_case_index(), "((int) 0x2007)");
				break;
			}
		return aispwtime_;
		}
	AnalogInputDPwTime * aidpwtime() const
		{
		switch ( data_case_index() )
			{
			case 8200:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:506:aidpwtime", data_case_index(), "((int) 0x2008)");
				break;
			}
		return aidpwtime_;
		}
	FrozenAnaInputEve32woTime * faie_32_wotime() const
		{
		switch ( data_case_index() )
			{
			case 8449:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:509:faie_32_wotime", data_case_index(), "((int) 0x2101)");
				break;
			}
		return faie_32_wotime_;
		}
	FrozenAnaInputEve16woTime * faie_16_wotime() const
		{
		switch ( data_case_index() )
			{
			case 8450:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:510:faie_16_wotime", data_case_index(), "((int) 0x2102)");
				break;
			}
		return faie_16_wotime_;
		}
	FrozenAnaInputEve32wTime * faie_32_wtime() const
		{
		switch ( data_case_index() )
			{
			case 8451:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:511:faie_32_wtime", data_case_index(), "((int) 0x2103)");
				break;
			}
		return faie_32_wtime_;
		}
	FrozenAnaInputEve16wTime * faie_16_wtime() const
		{
		switch ( data_case_index() )
			{
			case 8452:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:512:faie_16_wtime", data_case_index(), "((int) 0x2104)");
				break;
			}
		return faie_16_wtime_;
		}
	FrozenAnaInputEveSPwoTime * faie_sp_wotime() const
		{
		switch ( data_case_index() )
			{
			case 8453:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:513:faie_sp_wotime", data_case_index(), "((int) 0x2105)");
				break;
			}
		return faie_sp_wotime_;
		}
	FrozenAnaInputEveDPwoTime * faie_dp_wotime() const
		{
		switch ( data_case_index() )
			{
			case 8454:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:514:faie_dp_wotime", data_case_index(), "((int) 0x2106)");
				break;
			}
		return faie_dp_wotime_;
		}
	FrozenAnaInputEveSPwTime * faie_sp_wtime() const
		{
		switch ( data_case_index() )
			{
			case 8455:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:515:faie_sp_wtime", data_case_index(), "((int) 0x2107)");
				break;
			}
		return faie_sp_wtime_;
		}
	FrozenAnaInputEveDPwTime * faie_dp_wtime() const
		{
		switch ( data_case_index() )
			{
			case 8456:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:516:faie_dp_wtime", data_case_index(), "((int) 0x2108)");
				break;
			}
		return faie_dp_wtime_;
		}
	uint16 ai_dead_16() const
		{
		switch ( data_case_index() )
			{
			case 8705:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:519:ai_dead_16", data_case_index(), "((int) 0x2201)");
				break;
			}
		return ai_dead_16_;
		}
	uint32 ai_dead_32() const
		{
		switch ( data_case_index() )
			{
			case 8706:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:520:ai_dead_32", data_case_index(), "((int) 0x2202)");
				break;
			}
		return ai_dead_32_;
		}
	uint32 ai_dead_sp() const
		{
		switch ( data_case_index() )
			{
			case 8707:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:521:ai_dead_sp", data_case_index(), "((int) 0x2203)");
				break;
			}
		return ai_dead_sp_;
		}
	AnaOutStatus32 * aos_32() const
		{
		switch ( data_case_index() )
			{
			case 10241:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:524:aos_32", data_case_index(), "((int) 0x2801)");
				break;
			}
		return aos_32_;
		}
	AnaOutStatus16 * aos_16() const
		{
		switch ( data_case_index() )
			{
			case 10242:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:525:aos_16", data_case_index(), "((int) 0x2802)");
				break;
			}
		return aos_16_;
		}
	AnaOutStatusSP * aos_sp() const
		{
		switch ( data_case_index() )
			{
			case 10243:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:526:aos_sp", data_case_index(), "((int) 0x2803)");
				break;
			}
		return aos_sp_;
		}
	AnaOutStatusDP * aos_dp() const
		{
		switch ( data_case_index() )
			{
			case 10244:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:527:aos_dp", data_case_index(), "((int) 0x2804)");
				break;
			}
		return aos_dp_;
		}
	AnaOut32 * ao_32() const
		{
		switch ( data_case_index() )
			{
			case 10497:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:530:ao_32", data_case_index(), "((int) 0x2901)");
				break;
			}
		return ao_32_;
		}
	AnaOut16 * ao_16() const
		{
		switch ( data_case_index() )
			{
			case 10498:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:531:ao_16", data_case_index(), "((int) 0x2902)");
				break;
			}
		return ao_16_;
		}
	AnaOutSP * ao_sp() const
		{
		switch ( data_case_index() )
			{
			case 10499:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:532:ao_sp", data_case_index(), "((int) 0x2903)");
				break;
			}
		return ao_sp_;
		}
	AnaOutDP * ao_dp() const
		{
		switch ( data_case_index() )
			{
			case 10500:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:533:ao_dp", data_case_index(), "((int) 0x2904)");
				break;
			}
		return ao_dp_;
		}
	AnaOutEve32woTime * aoe32wotime() const
		{
		switch ( data_case_index() )
			{
			case 10753:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:536:aoe32wotime", data_case_index(), "((int) 0x2a01)");
				break;
			}
		return aoe32wotime_;
		}
	AnaOutEve16woTime * aoe16wotime() const
		{
		switch ( data_case_index() )
			{
			case 10754:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:537:aoe16wotime", data_case_index(), "((int) 0x2a02)");
				break;
			}
		return aoe16wotime_;
		}
	AnaOutEve32wTime * aoe32wtime() const
		{
		switch ( data_case_index() )
			{
			case 10755:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:538:aoe32wtime", data_case_index(), "((int) 0x2a03)");
				break;
			}
		return aoe32wtime_;
		}
	AnaOutEve16wTime * aoe16wtime() const
		{
		switch ( data_case_index() )
			{
			case 10756:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:539:aoe16wtime", data_case_index(), "((int) 0x2a04)");
				break;
			}
		return aoe16wtime_;
		}
	AnaOutEveSPwoTime * aoespwotime() const
		{
		switch ( data_case_index() )
			{
			case 10757:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:540:aoespwotime", data_case_index(), "((int) 0x2a05)");
				break;
			}
		return aoespwotime_;
		}
	AnaOutEveDPwoTime * aoedpwotime() const
		{
		switch ( data_case_index() )
			{
			case 10758:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:541:aoedpwotime", data_case_index(), "((int) 0x2a06)");
				break;
			}
		return aoedpwotime_;
		}
	AnaOutEveSPwTime * aoespwtime() const
		{
		switch ( data_case_index() )
			{
			case 10759:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:542:aoespwtime", data_case_index(), "((int) 0x2a07)");
				break;
			}
		return aoespwtime_;
		}
	AnaOutEveDPwTime * aoedpwtime() const
		{
		switch ( data_case_index() )
			{
			case 10760:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:543:aoedpwtime", data_case_index(), "((int) 0x2a08)");
				break;
			}
		return aoedpwtime_;
		}
	AnaOutEve32woTime * aoce32wotime() const
		{
		switch ( data_case_index() )
			{
			case 11009:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:546:aoce32wotime", data_case_index(), "((int) 0x2b01)");
				break;
			}
		return aoce32wotime_;
		}
	AnaOutEve16woTime * aoce16wotime() const
		{
		switch ( data_case_index() )
			{
			case 11010:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:547:aoce16wotime", data_case_index(), "((int) 0x2b02)");
				break;
			}
		return aoce16wotime_;
		}
	AnaOutEve32wTime * aoce32wtime() const
		{
		switch ( data_case_index() )
			{
			case 11011:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:548:aoce32wtime", data_case_index(), "((int) 0x2b03)");
				break;
			}
		return aoce32wtime_;
		}
	AnaOutEve16wTime * aoce16wtime() const
		{
		switch ( data_case_index() )
			{
			case 11012:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:549:aoce16wtime", data_case_index(), "((int) 0x2b04)");
				break;
			}
		return aoce16wtime_;
		}
	AnaOutEveSPwoTime * aocespwotime() const
		{
		switch ( data_case_index() )
			{
			case 11013:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:550:aocespwotime", data_case_index(), "((int) 0x2b05)");
				break;
			}
		return aocespwotime_;
		}
	AnaOutEveDPwoTime * aocedpwotime() const
		{
		switch ( data_case_index() )
			{
			case 11014:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:551:aocedpwotime", data_case_index(), "((int) 0x2b06)");
				break;
			}
		return aocedpwotime_;
		}
	AnaOutEveSPwTime * aocespwtime() const
		{
		switch ( data_case_index() )
			{
			case 11015:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:552:aocespwtime", data_case_index(), "((int) 0x2b07)");
				break;
			}
		return aocespwtime_;
		}
	AnaOutEveDPwTime * aocedpwtime() const
		{
		switch ( data_case_index() )
			{
			case 11016:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:553:aocedpwtime", data_case_index(), "((int) 0x2b08)");
				break;
			}
		return aocedpwtime_;
		}
	AbsTime * time_abs() const
		{
		switch ( data_case_index() )
			{
			case 12801:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:556:time_abs", data_case_index(), "((int) 0x3201)");
				break;
			}
		return time_abs_;
		}
	AbsTimeInterval * time_interval() const
		{
		switch ( data_case_index() )
			{
			case 12802:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:557:time_interval", data_case_index(), "((int) 0x3202)");
				break;
			}
		return time_interval_;
		}
	Last_AbsTime * time_abs_last() const
		{
		switch ( data_case_index() )
			{
			case 12803:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:558:time_abs_last", data_case_index(), "((int) 0x3203)");
				break;
			}
		return time_abs_last_;
		}
	AbsTime * time_abs_sync() const
		{
		switch ( data_case_index() )
			{
			case 13057:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:561:time_abs_sync", data_case_index(), "((int) 0x3301)");
				break;
			}
		return time_abs_sync_;
		}
	AbsTime * time_abs_unsync() const
		{
		switch ( data_case_index() )
			{
			case 13058:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:562:time_abs_unsync", data_case_index(), "((int) 0x3302)");
				break;
			}
		return time_abs_unsync_;
		}
	uint16 time_coarse() const
		{
		switch ( data_case_index() )
			{
			case 13313:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:565:time_coarse", data_case_index(), "((int) 0x3401)");
				break;
			}
		return time_coarse_;
		}
	uint16 time_fine() const
		{
		switch ( data_case_index() )
			{
			case 13314:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:566:time_fine", data_case_index(), "((int) 0x3402)");
				break;
			}
		return time_fine_;
		}
	File_Control_ID * file_control_id() const
		{
		switch ( data_case_index() )
			{
			case 17921:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:569:file_control_id", data_case_index(), "((int) 0x4601)");
				break;
			}
		return file_control_id_;
		}
	File_Control_Auth * file_control_auth() const
		{
		switch ( data_case_index() )
			{
			case 17922:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:570:file_control_auth", data_case_index(), "((int) 0x4602)");
				break;
			}
		return file_control_auth_;
		}
	File_Control_Cmd * file_control_cmd() const
		{
		switch ( data_case_index() )
			{
			case 17923:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:571:file_control_cmd", data_case_index(), "((int) 0x4603)");
				break;
			}
		return file_control_cmd_;
		}
	File_Control_Cmd_Status * file_control_cmd_status() const
		{
		switch ( data_case_index() )
			{
			case 17924:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:574:file_control_cmd_status", data_case_index(), "((int) 0x4604)");
				break;
			}
		return file_control_cmd_status_;
		}
	File_Transport * file_trans() const
		{
		switch ( data_case_index() )
			{
			case 17925:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:575:file_trans", data_case_index(), "((int) 0x4605)");
				break;
			}
		return file_trans_;
		}
	File_Transport_Status * file_trans_status() const
		{
		switch ( data_case_index() )
			{
			case 17926:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:576:file_trans_status", data_case_index(), "((int) 0x4606)");
				break;
			}
		return file_trans_status_;
		}
	File_Desc * file_desc() const
		{
		switch ( data_case_index() )
			{
			case 17927:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:578:file_desc", data_case_index(), "((int) 0x4607)");
				break;
			}
		return file_desc_;
		}
	uint16 iin() const
		{
		switch ( data_case_index() )
			{
			case 20481:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:581:iin", data_case_index(), "((int) 0x5001)");
				break;
			}
		return iin_;
		}
	Dev_Store * dev_store() const
		{
		switch ( data_case_index() )
			{
			case 20737:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:583:dev_store", data_case_index(), "((int) 0x5101)");
				break;
			}
		return dev_store_;
		}
	Dev_Profile * dev_profile() const
		{
		switch ( data_case_index() )
			{
			case 20993:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:586:dev_profile", data_case_index(), "((int) 0x5201)");
				break;
			}
		return dev_profile_;
		}
	PrivRegObj * priregobj() const
		{
		switch ( data_case_index() )
			{
			case 21249:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:589:priregobj", data_case_index(), "((int) 0x5301)");
				break;
			}
		return priregobj_;
		}
	PrivRegObjDesc * priregobjdesc() const
		{
		switch ( data_case_index() )
			{
			case 21250:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:590:priregobjdesc", data_case_index(), "((int) 0x5302)");
				break;
			}
		return priregobjdesc_;
		}
	DescEle * desc_ele() const
		{
		switch ( data_case_index() )
			{
			case 21761:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:593:desc_ele", data_case_index(), "((int) 0x5501)");
				break;
			}
		return desc_ele_;
		}
	DescEle * desc_ele86() const
		{
		switch ( data_case_index() )
			{
			case 22017:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:596:desc_ele86", data_case_index(), "((int) 0x5601)");
				break;
			}
		return desc_ele86_;
		}
	uint8 cha() const
		{
		switch ( data_case_index() )
			{
			case 22018:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:597:cha", data_case_index(), "((int) 0x5602)");
				break;
			}
		return cha_;
		}
	Debug_Byte * point_index_attr() const
		{
		switch ( data_case_index() )
			{
			case 22019:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:598:point_index_attr", data_case_index(), "((int) 0x5603)");
				break;
			}
		return point_index_attr_;
		}
	Debug_Byte * present_value() const
		{
		switch ( data_case_index() )
			{
			case 22273:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:601:present_value", data_case_index(), "((int) 0x5701)");
				break;
			}
		return present_value_;
		}
	Debug_Byte * snapshot() const
		{
		switch ( data_case_index() )
			{
			case 22529:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:604:snapshot", data_case_index(), "((int) 0x5801)");
				break;
			}
		return snapshot_;
		}
	ActivateConf * activate_conf() const
		{
		switch ( data_case_index() )
			{
			case 23297:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:607:activate_conf", data_case_index(), "((int) 0x5b01)");
				break;
			}
		return activate_conf_;
		}
	uint16 bcd_small() const
		{
		switch ( data_case_index() )
			{
			case 25857:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:610:bcd_small", data_case_index(), "((int) 0x6501)");
				break;
			}
		return bcd_small_;
		}
	uint32 bcd_medium() const
		{
		switch ( data_case_index() )
			{
			case 25858:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:611:bcd_medium", data_case_index(), "((int) 0x6502)");
				break;
			}
		return bcd_medium_;
		}
	BCD_Large * bcd_large() const
		{
		switch ( data_case_index() )
			{
			case 25859:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:612:bcd_large", data_case_index(), "((int) 0x6503)");
				break;
			}
		return bcd_large_;
		}
	uint8 unsigned_integer() const
		{
		switch ( data_case_index() )
			{
			case 26113:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:615:unsigned_integer", data_case_index(), "((int) 0x6601)");
				break;
			}
		return unsigned_integer_;
		}
	AuthChallenge * challenge() const
		{
		switch ( data_case_index() )
			{
			case 30721:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:618:challenge", data_case_index(), "((int) 0x7801)");
				break;
			}
		return challenge_;
		}
	AuthRely * reply() const
		{
		switch ( data_case_index() )
			{
			case 30722:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:619:reply", data_case_index(), "((int) 0x7802)");
				break;
			}
		return reply_;
		}
	AuthAggrRequest * aggrRequest() const
		{
		switch ( data_case_index() )
			{
			case 30723:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:620:aggrRequest", data_case_index(), "((int) 0x7803)");
				break;
			}
		return aggrRequest_;
		}
	uint8 seesionKeyRequest() const
		{
		switch ( data_case_index() )
			{
			case 30724:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:621:seesionKeyRequest", data_case_index(), "((int) 0x7804)");
				break;
			}
		return seesionKeyRequest_;
		}
	AuthSessionKeyStatus * status() const
		{
		switch ( data_case_index() )
			{
			case 30725:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:622:status", data_case_index(), "((int) 0x7805)");
				break;
			}
		return status_;
		}
	AuthSessionKeyChange * keyChange() const
		{
		switch ( data_case_index() )
			{
			case 30726:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:623:keyChange", data_case_index(), "((int) 0x7806)");
				break;
			}
		return keyChange_;
		}
	AuthError * error() const
		{
		switch ( data_case_index() )
			{
			case 30727:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:624:error", data_case_index(), "((int) 0x7807)");
				break;
			}
		return error_;
		}
	Default_Wrap * unmatched() const
		{
		return unmatched_;
		}
	uint8 function_code() const { return function_code_; }
	uint8 qualifier_field() const { return qualifier_field_; }
	uint16 object_type_field() const { return object_type_field_; }
	uint8 data_value() const { return data_value_; }
	bool process_request() const { return process_request_; }
	
protected:
	Prefix_Type * prefix_;
	int data_case_index_;
	AttributeCommon * attrib211_;
	AttributeCommon * attrib212_;
	AttributeCommon * attrib213_;
	AttributeCommon * attrib214_;
	AttributeCommon * attrib215_;
	AttributeCommon * attrib216_;
	AttributeCommon * attrib217_;
	AttributeCommon * attrib218_;
	AttributeCommon * attrib219_;
	AttributeCommon * attrib220_;
	AttributeCommon * attrib221_;
	AttributeCommon * attrib222_;
	AttributeCommon * attrib223_;
	AttributeCommon * attrib224_;
	AttributeCommon * attrib225_;
	AttributeCommon * attrib226_;
	AttributeCommon * attrib227_;
	AttributeCommon * attrib228_;
	AttributeCommon * attrib229_;
	AttributeCommon * attrib230_;
	AttributeCommon * attrib231_;
	AttributeCommon * attrib232_;
	AttributeCommon * attrib233_;
	AttributeCommon * attrib234_;
	AttributeCommon * attrib235_;
	AttributeCommon * attrib236_;
	AttributeCommon * attrib237_;
	AttributeCommon * attrib238_;
	AttributeCommon * attrib239_;
	AttributeCommon * attrib240_;
	AttributeCommon * attrib241_;
	AttributeCommon * attrib242_;
	AttributeCommon * attrib243_;
	AttributeCommon * attrib245_;
	AttributeCommon * attrib246_;
	AttributeCommon * attrib247_;
	AttributeCommon * attrib248_;
	AttributeCommon * attrib249_;
	AttributeCommon * attrib250_;
	AttributeCommon * attrib252_;
	AttributeCommon * attrib254_;
	AttributeCommon * attrib255_;
	uint8 biwoflag_;
	uint8 biwflag_;
	uint8 biewoflag_;
	BinInEveAtime * biewatime_;
	BinInEveRtime * biewrtime_;
	bytestring dbibytes_;
	uint8 dbiflag_;
	DoubleInEveAtime * dbieatime_;
	DoubleInEveRtime * dbiertime_;
	uint8 bowoflag_;
	uint8 bowflag_;
	uint8 boewflag_;
	BinOutEveAtime * boewatime_;
	CROB * bocmd_CROB_;
	PCB * bocmd_PCB_;
	uint8 bocmd_PM_;
	uint8 boceFlag_;
	BinOutCmdEveAtime * boceAtime_;
	Counter32wFlag * counter_32_wflag_;
	Counter16wFlag * counter_16_wflag_;
	Debug_Byte * counter_32_wflag_delta_;
	Debug_Byte * counter_16_wflag_delta_;
	Counter32woFlag * counter_32_woflag_;
	Counter16woFlag * counter_16_woflag_;
	Debug_Byte * counter_32_woflag_delta_;
	Debug_Byte * counter_16_woflag_delta_;
	FrozenCounter32wFlag * f_counter_32_wflag_;
	FrozenCounter16wFlag * f_counter_16_wflag_;
	Debug_Byte * f_counter_32_wflag_delta_;
	Debug_Byte * f_counter_16_wflag_delta_;
	FrozenCounter32wFlagTime * f_counter_32_wflag_time_;
	FrozenCounter16wFlagTime * f_counter_16_wflag_time_;
	Debug_Byte * f_counter_32_wflag_time_delta_;
	Debug_Byte * f_counter_16_wflag_time_delta_;
	FrozenCounter32woFlag * f_counter_32_woflag_;
	FrozenCounter16woFlag * f_counter_16_woflag_;
	Debug_Byte * f_counter_32_woflag_delta_;
	Debug_Byte * f_counter_16_woflag_delta_;
	CounterEve32wFlag * counter_event_32_wflag_;
	CounterEve16wFlag * counter_event_16_wflag_;
	Debug_Byte * counter_event_32_wflag_delta_;
	Debug_Byte * counter_event_16_wflag_delta_;
	CounterEve32wFlagTime * counter_event_32_wflag_time_;
	CounterEve16wFlagTime * counter_event_16_wflag_time_;
	Debug_Byte * counter_event_32_wflag_time_delta_;
	Debug_Byte * counter_event_16_wflag_time_delat_;
	CounterEve32wFlag * f_counter_event_32_wflag_;
	CounterEve16wFlag * f_counter_event_16_wflag_;
	Debug_Byte * f_counter_event_32_wflag_delta_;
	Debug_Byte * f_counter_event_16_wflag_delta_;
	CounterEve32wFlagTime * f_counter_event_32_wflag_time_;
	CounterEve16wFlagTime * f_counter_event_16_wflag_time_;
	Debug_Byte * f_counter_event_32_wflag_time_delta_;
	Debug_Byte * f_counter_event_16_wflag_time_delat_;
	AnalogInput32wFlag * ai_32_wflag_;
	AnalogInput16wFlag * ai_16_wflag_;
	AnalogInput32woFlag * ai_32_woflag_;
	AnalogInput16woFlag * ai_16_woflag_;
	AnalogInputSPwFlag * ai_sp_wflag_;
	AnalogInputDPwFlag * ai_dp_wflag_;
	FrozenAnalogInput32wFlag * f_ai_32_wflag_;
	FrozenAnalogInput16wFlag * f_ai_16_wflag_;
	FrozenAnalogInput32wTime * f_ai_32_wtime_;
	FrozenAnalogInput16wTime * f_ai_16_wtime_;
	AnalogInput32woFlag * f_ai_32_woflag_;
	AnalogInput16woFlag * f_ai_16_woflag_;
	AnalogInputSPwFlag * f_ai_sp_wflag_;
	AnalogInputDPwFlag * f_ai_dp_wflag_;
	AnalogInput32woTime * ai32wotime_;
	AnalogInput16woTime * ai16wotime_;
	AnalogInput32wTime * ai32wtime_;
	AnalogInput16wTime * ai16wtime_;
	AnalogInputSPwoTime * aispwotime_;
	AnalogInputDPwoTime * aidpwotime_;
	AnalogInputSPwTime * aispwtime_;
	AnalogInputDPwTime * aidpwtime_;
	FrozenAnaInputEve32woTime * faie_32_wotime_;
	FrozenAnaInputEve16woTime * faie_16_wotime_;
	FrozenAnaInputEve32wTime * faie_32_wtime_;
	FrozenAnaInputEve16wTime * faie_16_wtime_;
	FrozenAnaInputEveSPwoTime * faie_sp_wotime_;
	FrozenAnaInputEveDPwoTime * faie_dp_wotime_;
	FrozenAnaInputEveSPwTime * faie_sp_wtime_;
	FrozenAnaInputEveDPwTime * faie_dp_wtime_;
	uint16 ai_dead_16_;
	uint32 ai_dead_32_;
	uint32 ai_dead_sp_;
	AnaOutStatus32 * aos_32_;
	AnaOutStatus16 * aos_16_;
	AnaOutStatusSP * aos_sp_;
	AnaOutStatusDP * aos_dp_;
	AnaOut32 * ao_32_;
	AnaOut16 * ao_16_;
	AnaOutSP * ao_sp_;
	AnaOutDP * ao_dp_;
	AnaOutEve32woTime * aoe32wotime_;
	AnaOutEve16woTime * aoe16wotime_;
	AnaOutEve32wTime * aoe32wtime_;
	AnaOutEve16wTime * aoe16wtime_;
	AnaOutEveSPwoTime * aoespwotime_;
	AnaOutEveDPwoTime * aoedpwotime_;
	AnaOutEveSPwTime * aoespwtime_;
	AnaOutEveDPwTime * aoedpwtime_;
	AnaOutEve32woTime * aoce32wotime_;
	AnaOutEve16woTime * aoce16wotime_;
	AnaOutEve32wTime * aoce32wtime_;
	AnaOutEve16wTime * aoce16wtime_;
	AnaOutEveSPwoTime * aocespwotime_;
	AnaOutEveDPwoTime * aocedpwotime_;
	AnaOutEveSPwTime * aocespwtime_;
	AnaOutEveDPwTime * aocedpwtime_;
	AbsTime * time_abs_;
	AbsTimeInterval * time_interval_;
	Last_AbsTime * time_abs_last_;
	AbsTime * time_abs_sync_;
	AbsTime * time_abs_unsync_;
	uint16 time_coarse_;
	uint16 time_fine_;
	File_Control_ID * file_control_id_;
	File_Control_Auth * file_control_auth_;
	File_Control_Cmd * file_control_cmd_;
	File_Control_Cmd_Status * file_control_cmd_status_;
	File_Transport * file_trans_;
	File_Transport_Status * file_trans_status_;
	File_Desc * file_desc_;
	uint16 iin_;
	Dev_Store * dev_store_;
	Dev_Profile * dev_profile_;
	PrivRegObj * priregobj_;
	PrivRegObjDesc * priregobjdesc_;
	DescEle * desc_ele_;
	DescEle * desc_ele86_;
	uint8 cha_;
	Debug_Byte * point_index_attr_;
	Debug_Byte * present_value_;
	Debug_Byte * snapshot_;
	ActivateConf * activate_conf_;
	uint16 bcd_small_;
	uint32 bcd_medium_;
	BCD_Large * bcd_large_;
	uint8 unsigned_integer_;
	AuthChallenge * challenge_;
	AuthRely * reply_;
	AuthAggrRequest * aggrRequest_;
	uint8 seesionKeyRequest_;
	AuthSessionKeyStatus * status_;
	AuthSessionKeyChange * keyChange_;
	AuthError * error_;
	Default_Wrap * unmatched_;
	uint8 function_code_;
	uint8 qualifier_field_;
	uint16 object_type_field_;
	uint8 data_value_;
	bool process_request_;
};


class Default_Wrap
{
public:
	Default_Wrap(uint32 obj_type);
	~Default_Wrap();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	int unresolved_case_index() const	{ return unresolved_case_index_; }
	bytestring const & oct_str() const
		{
		switch ( unresolved_case_index() )
			{
			case 28160:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:646:oct_str", unresolved_case_index(), "((int) 0x6E00)");
				break;
			}
		return oct_str_;
		}
	bytestring const & oct_str_eve() const
		{
		switch ( unresolved_case_index() )
			{
			case 28416:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:647:oct_str_eve", unresolved_case_index(), "((int) 0x6F00)");
				break;
			}
		return oct_str_eve_;
		}
	bytestring const & vir_ter_out_blk() const
		{
		switch ( unresolved_case_index() )
			{
			case 28672:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:648:vir_ter_out_blk", unresolved_case_index(), "((int) 0x7000)");
				break;
			}
		return vir_ter_out_blk_;
		}
	bytestring const & vir_ter_eve() const
		{
		switch ( unresolved_case_index() )
			{
			case 28928:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:649:vir_ter_eve", unresolved_case_index(), "((int) 0x7100)");
				break;
			}
		return vir_ter_eve_;
		}
	Debug_Byte * unknown() const
		{
		return unknown_;
		}
	uint32 obj_type() const { return obj_type_; }
	
protected:
	int unresolved_case_index_;
	bytestring oct_str_;
	bytestring oct_str_eve_;
	bytestring vir_ter_out_blk_;
	bytestring vir_ter_eve_;
	Debug_Byte * unknown_;
	uint32 obj_type_;
};


class AttributeCommon
{
public:
	AttributeCommon();
	~AttributeCommon();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 data_type_code() const { return data_type_code_; }
	uint8 leng() const { return leng_; }
	bytestring const & attribute_obj() const { return attribute_obj_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 data_type_code_;
	uint8 leng_;
	bytestring attribute_obj_;
	int byteorder_;
	bool process_request_;
};


class BinInEveAtime
{
public:
	BinInEveAtime();
	~BinInEveAtime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	bytestring time48_;
	int byteorder_;
};


class BinInEveRtime
{
public:
	BinInEveRtime();
	~BinInEveRtime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 time16() const { return time16_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint16 time16_;
	int byteorder_;
};


class DoubleInEveAtime
{
public:
	DoubleInEveAtime();
	~DoubleInEveAtime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	bytestring time48_;
	int byteorder_;
};


class DoubleInEveRtime
{
public:
	DoubleInEveRtime();
	~DoubleInEveRtime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 time16() const { return time16_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint16 time16_;
	int byteorder_;
};


class BinOutEveAtime
{
public:
	BinOutEveAtime();
	~BinOutEveAtime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	bytestring time48_;
	int byteorder_;
};


class CROB
{
public:
	CROB();
	~CROB();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 control_code() const { return control_code_; }
	uint8 count() const { return count_; }
	uint32 on_time() const { return on_time_; }
	uint32 off_time() const { return off_time_; }
	uint8 status_code() const { return status_code_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 control_code_;
	uint8 count_;
	uint32 on_time_;
	uint32 off_time_;
	uint8 status_code_;
	int byteorder_;
	bool process_request_;
};


class PCB
{
public:
	PCB();
	~PCB();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 control_code() const { return control_code_; }
	uint8 count() const { return count_; }
	uint32 on_time() const { return on_time_; }
	uint32 off_time() const { return off_time_; }
	uint8 status_code() const { return status_code_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 control_code_;
	uint8 count_;
	uint32 on_time_;
	uint32 off_time_;
	uint8 status_code_;
	int byteorder_;
	bool process_request_;
};


class BinOutCmdEveAtime
{
public:
	BinOutCmdEveAtime();
	~BinOutCmdEveAtime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	bytestring time48_;
	int byteorder_;
};


class Counter32wFlag
{
public:
	Counter32wFlag();
	~Counter32wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	int byteorder_;
	bool process_request_;
};


class Counter16wFlag
{
public:
	Counter16wFlag();
	~Counter16wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	int byteorder_;
	bool process_request_;
};


class Counter32woFlag
{
public:
	Counter32woFlag();
	~Counter32woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint32 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint32 count_value_;
	int byteorder_;
	bool process_request_;
};


class Counter16woFlag
{
public:
	Counter16woFlag();
	~Counter16woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint16 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint16 count_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenCounter32wFlag
{
public:
	FrozenCounter32wFlag();
	~FrozenCounter32wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenCounter16wFlag
{
public:
	FrozenCounter16wFlag();
	~FrozenCounter16wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenCounter32wFlagTime
{
public:
	FrozenCounter32wFlagTime();
	~FrozenCounter32wFlagTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenCounter16wFlagTime
{
public:
	FrozenCounter16wFlagTime();
	~FrozenCounter16wFlagTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenCounter32woFlag
{
public:
	FrozenCounter32woFlag();
	~FrozenCounter32woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint32 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint32 count_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenCounter16woFlag
{
public:
	FrozenCounter16woFlag();
	~FrozenCounter16woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint16 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint16 count_value_;
	int byteorder_;
	bool process_request_;
};


class CounterEve32wFlag
{
public:
	CounterEve32wFlag();
	~CounterEve32wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	int byteorder_;
};


class CounterEve16wFlag
{
public:
	CounterEve16wFlag();
	~CounterEve16wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	int byteorder_;
};


class CounterEve32wFlagTime
{
public:
	CounterEve32wFlagTime();
	~CounterEve32wFlagTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	bytestring time48_;
	int byteorder_;
};


class CounterEve16wFlagTime
{
public:
	CounterEve16wFlagTime();
	~CounterEve16wFlagTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	bytestring time48_;
	int byteorder_;
};


class FrozenCounterEve32wFlag
{
public:
	FrozenCounterEve32wFlag();
	~FrozenCounterEve32wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	int byteorder_;
};


class FrozenCounterEve16wFlag
{
public:
	FrozenCounterEve16wFlag();
	~FrozenCounterEve16wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	int byteorder_;
};


class FrozenCounterEve32wFlagTime
{
public:
	FrozenCounterEve32wFlagTime();
	~FrozenCounterEve32wFlagTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 count_value() const { return count_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 count_value_;
	bytestring time48_;
	int byteorder_;
};


class FrozenCounterEve16wFlagTime
{
public:
	FrozenCounterEve16wFlagTime();
	~FrozenCounterEve16wFlagTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint16 count_value() const { return count_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint16 count_value_;
	bytestring time48_;
	int byteorder_;
};


class AnalogInput32wFlag
{
public:
	AnalogInput32wFlag();
	~AnalogInput32wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput16wFlag
{
public:
	AnalogInput16wFlag();
	~AnalogInput16wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int16 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput32woFlag
{
public:
	AnalogInput32woFlag();
	~AnalogInput32woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	int32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	int32 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput16woFlag
{
public:
	AnalogInput16woFlag();
	~AnalogInput16woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	int16 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	int16 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInputSPwFlag
{
public:
	AnalogInputSPwFlag();
	~AnalogInputSPwFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInputDPwFlag
{
public:
	AnalogInputDPwFlag();
	~AnalogInputDPwFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value_low() const { return value_low_; }
	uint32 value_high() const { return value_high_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 value_low_;
	uint32 value_high_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInput32wFlag
{
public:
	FrozenAnalogInput32wFlag();
	~FrozenAnalogInput32wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 frozen_value() const { return frozen_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 frozen_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInput16wFlag
{
public:
	FrozenAnalogInput16wFlag();
	~FrozenAnalogInput16wFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 frozen_value() const { return frozen_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int16 frozen_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInput32wTime
{
public:
	FrozenAnalogInput32wTime();
	~FrozenAnalogInput32wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 frozen_value() const { return frozen_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 frozen_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInput16wTime
{
public:
	FrozenAnalogInput16wTime();
	~FrozenAnalogInput16wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 frozen_value() const { return frozen_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int16 frozen_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInput32woFlag
{
public:
	FrozenAnalogInput32woFlag();
	~FrozenAnalogInput32woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	int32 frozen_value() const { return frozen_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	int32 frozen_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInput16woFlag
{
public:
	FrozenAnalogInput16woFlag();
	~FrozenAnalogInput16woFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint16 frozen_value() const { return frozen_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint16 frozen_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInputSPwFlag
{
public:
	FrozenAnalogInputSPwFlag();
	~FrozenAnalogInputSPwFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 frozen_value() const { return frozen_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 frozen_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnalogInputDPwFlag
{
public:
	FrozenAnalogInputDPwFlag();
	~FrozenAnalogInputDPwFlag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 frozen_value_low() const { return frozen_value_low_; }
	uint32 frozen_value_high() const { return frozen_value_high_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 frozen_value_low_;
	uint32 frozen_value_high_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput32woTime
{
public:
	AnalogInput32woTime();
	~AnalogInput32woTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput16woTime
{
public:
	AnalogInput16woTime();
	~AnalogInput16woTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int16 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput32wTime
{
public:
	AnalogInput32wTime();
	~AnalogInput32wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 value() const { return value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class AnalogInput16wTime
{
public:
	AnalogInput16wTime();
	~AnalogInput16wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 value() const { return value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int16 value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class AnalogInputSPwoTime
{
public:
	AnalogInputSPwoTime();
	~AnalogInputSPwoTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 value_;
	int byteorder_;
	bool process_request_;
};


class AnalogInputDPwoTime
{
public:
	AnalogInputDPwoTime();
	~AnalogInputDPwoTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value_low() const { return value_low_; }
	uint32 value_high() const { return value_high_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 value_low_;
	uint32 value_high_;
	int byteorder_;
	bool process_request_;
};


class AnalogInputSPwTime
{
public:
	AnalogInputSPwTime();
	~AnalogInputSPwTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value() const { return value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class AnalogInputDPwTime
{
public:
	AnalogInputDPwTime();
	~AnalogInputDPwTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value_low() const { return value_low_; }
	uint32 value_high() const { return value_high_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 value_low_;
	uint32 value_high_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEve32woTime
{
public:
	FrozenAnaInputEve32woTime();
	~FrozenAnaInputEve32woTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 f_value() const { return f_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 f_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEve16woTime
{
public:
	FrozenAnaInputEve16woTime();
	~FrozenAnaInputEve16woTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 f_value() const { return f_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int16 f_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEve32wTime
{
public:
	FrozenAnaInputEve32wTime();
	~FrozenAnaInputEve32wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 f_value() const { return f_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 f_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEve16wTime
{
public:
	FrozenAnaInputEve16wTime();
	~FrozenAnaInputEve16wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 f_value() const { return f_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	int32 f_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEveSPwoTime
{
public:
	FrozenAnaInputEveSPwoTime();
	~FrozenAnaInputEveSPwoTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 f_value() const { return f_value_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 f_value_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEveDPwoTime
{
public:
	FrozenAnaInputEveDPwoTime();
	~FrozenAnaInputEveDPwoTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 f_value_low() const { return f_value_low_; }
	uint32 f_value_high() const { return f_value_high_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 f_value_low_;
	uint32 f_value_high_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEveSPwTime
{
public:
	FrozenAnaInputEveSPwTime();
	~FrozenAnaInputEveSPwTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 f_value() const { return f_value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 f_value_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class FrozenAnaInputEveDPwTime
{
public:
	FrozenAnaInputEveDPwTime();
	~FrozenAnaInputEveDPwTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 f_value_low() const { return f_value_low_; }
	uint32 f_value_high() const { return f_value_high_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	bool process_request() const { return process_request_; }
	
protected:
	uint8 flag_;
	uint32 f_value_low_;
	uint32 f_value_high_;
	bytestring time48_;
	int byteorder_;
	bool process_request_;
};


class AnaOutStatus32
{
public:
	AnaOutStatus32();
	~AnaOutStatus32();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 status() const { return status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	int32 status_;
	int byteorder_;
};


class AnaOutStatus16
{
public:
	AnaOutStatus16();
	~AnaOutStatus16();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 status() const { return status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	int16 status_;
	int byteorder_;
};


class AnaOutStatusSP
{
public:
	AnaOutStatusSP();
	~AnaOutStatusSP();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 status() const { return status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 status_;
	int byteorder_;
};


class AnaOutStatusDP
{
public:
	AnaOutStatusDP();
	~AnaOutStatusDP();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 status_low() const { return status_low_; }
	uint32 status_high() const { return status_high_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 status_low_;
	uint32 status_high_;
	int byteorder_;
};


class AnaOut32
{
public:
	AnaOut32();
	~AnaOut32();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int32 value() const { return value_; }
	uint8 con_status() const { return con_status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int32 value_;
	uint8 con_status_;
	int byteorder_;
};


class AnaOut16
{
public:
	AnaOut16();
	~AnaOut16();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int16 value() const { return value_; }
	uint8 con_status() const { return con_status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int16 value_;
	uint8 con_status_;
	int byteorder_;
};


class AnaOutSP
{
public:
	AnaOutSP();
	~AnaOutSP();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 value() const { return value_; }
	uint8 con_status() const { return con_status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 value_;
	uint8 con_status_;
	int byteorder_;
};


class AnaOutDP
{
public:
	AnaOutDP();
	~AnaOutDP();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 value_low() const { return value_low_; }
	uint32 value_high() const { return value_high_; }
	uint8 con_status() const { return con_status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 value_low_;
	uint32 value_high_;
	uint8 con_status_;
	int byteorder_;
};


class AnaOutEve32woTime
{
public:
	AnaOutEve32woTime();
	~AnaOutEve32woTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	int32 value_;
	int byteorder_;
};


class AnaOutEve16woTime
{
public:
	AnaOutEve16woTime();
	~AnaOutEve16woTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	int16 value_;
	int byteorder_;
};


class AnaOutEve32wTime
{
public:
	AnaOutEve32wTime();
	~AnaOutEve32wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int32 value() const { return value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	int32 value_;
	bytestring time48_;
	int byteorder_;
};


class AnaOutEve16wTime
{
public:
	AnaOutEve16wTime();
	~AnaOutEve16wTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	int16 value() const { return value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	int16 value_;
	bytestring time48_;
	int byteorder_;
};


class AnaOutEveSPwoTime
{
public:
	AnaOutEveSPwoTime();
	~AnaOutEveSPwoTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 value_;
	int byteorder_;
};


class AnaOutEveDPwoTime
{
public:
	AnaOutEveDPwoTime();
	~AnaOutEveDPwoTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value_low() const { return value_low_; }
	uint32 value_high() const { return value_high_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 value_low_;
	uint32 value_high_;
	int byteorder_;
};


class AnaOutEveSPwTime
{
public:
	AnaOutEveSPwTime();
	~AnaOutEveSPwTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value() const { return value_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 value_;
	bytestring time48_;
	int byteorder_;
};


class AnaOutEveDPwTime
{
public:
	AnaOutEveDPwTime();
	~AnaOutEveDPwTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 flag() const { return flag_; }
	uint32 value_low() const { return value_low_; }
	uint32 value_high() const { return value_high_; }
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 flag_;
	uint32 value_low_;
	uint32 value_high_;
	bytestring time48_;
	int byteorder_;
};


class AbsTime
{
public:
	AbsTime();
	~AbsTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring time48_;
	int byteorder_;
};


class AbsTimeInterval
{
public:
	AbsTimeInterval();
	~AbsTimeInterval();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & time48() const { return time48_; }
	uint32 interval() const { return interval_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring time48_;
	uint32 interval_;
	int byteorder_;
};


class Last_AbsTime
{
public:
	Last_AbsTime();
	~Last_AbsTime();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & time48() const { return time48_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring time48_;
	int byteorder_;
};


class Record_Obj
{
public:
	Record_Obj();
	~Record_Obj();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 record_size() const { return record_size_; }
	bytestring const & record_oct() const { return record_oct_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 record_size_;
	bytestring record_oct_;
	int byteorder_;
};


class File_Control_ID
{
public:
	File_Control_ID();
	~File_Control_ID();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 name_size() const { return name_size_; }
	uint8 type_code() const { return type_code_; }
	uint8 attr_code() const { return attr_code_; }
	uint16 start_rec() const { return start_rec_; }
	uint16 end_rec() const { return end_rec_; }
	uint32 file_size() const { return file_size_; }
	bytestring const & time_create() const { return time_create_; }
	uint16 permission() const { return permission_; }
	uint32 file_id() const { return file_id_; }
	uint32 owner_id() const { return owner_id_; }
	uint32 group_id() const { return group_id_; }
	uint8 function_code() const { return function_code_; }
	uint8 status_code() const { return status_code_; }
	bytestring const & file_name() const { return file_name_; }
	vector<Record_Obj *> * records() const { return records_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 name_size_;
	uint8 type_code_;
	uint8 attr_code_;
	uint16 start_rec_;
	uint16 end_rec_;
	uint32 file_size_;
	bytestring time_create_;
	uint16 permission_;
	uint32 file_id_;
	uint32 owner_id_;
	uint32 group_id_;
	uint8 function_code_;
	uint8 status_code_;
	bytestring file_name_;
	vector<Record_Obj *> * records_;
	Record_Obj * records__elem_;
	int byteorder_;
};


class File_Control_Auth_Wrap
{
public:
	File_Control_Auth_Wrap(uint8 fc);
	~File_Control_Auth_Wrap();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int data_case_index() const	{ return data_case_index_; }
	File_Control_Auth * auth_file() const
		{
		switch ( data_case_index() )
			{
			case 29:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1208:auth_file", data_case_index(), "AUTHENTICATE_FILE");
				break;
			}
		return auth_file_;
		}
	uint8 fc() const { return fc_; }
	
protected:
	int data_case_index_;
	File_Control_Auth * auth_file_;
	uint8 fc_;
};


class File_Control_Auth
{
public:
	File_Control_Auth();
	~File_Control_Auth();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 usr_name_offset() const { return usr_name_offset_; }
	uint16 usr_name_size() const { return usr_name_size_; }
	uint16 pwd_offset() const { return pwd_offset_; }
	uint16 pwd_size() const { return pwd_size_; }
	uint32 auth_key() const { return auth_key_; }
	bytestring const & usr_name() const { return usr_name_; }
	bytestring const & pwd() const { return pwd_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 usr_name_offset_;
	uint16 usr_name_size_;
	uint16 pwd_offset_;
	uint16 pwd_size_;
	uint32 auth_key_;
	bytestring usr_name_;
	bytestring pwd_;
	int byteorder_;
};


class File_Control_Cmd_Wrap
{
public:
	File_Control_Cmd_Wrap(uint8 function_code);
	~File_Control_Cmd_Wrap();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int data_obj_case_index() const	{ return data_obj_case_index_; }
	File_Control_Cmd * fc_cmd_open() const
		{
		switch ( data_obj_case_index() )
			{
			case 25:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1226:fc_cmd_open", data_obj_case_index(), "OPEN_FILE");
				break;
			}
		return fc_cmd_open_;
		}
	File_Control_Cmd * fc_cmd_del() const
		{
		switch ( data_obj_case_index() )
			{
			case 27:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1227:fc_cmd_del", data_obj_case_index(), "DELETE_FILE");
				break;
			}
		return fc_cmd_del_;
		}
	uint8 function_code() const { return function_code_; }
	
protected:
	int data_obj_case_index_;
	File_Control_Cmd * fc_cmd_open_;
	File_Control_Cmd * fc_cmd_del_;
	uint8 function_code_;
};


class File_Control_Cmd
{
public:
	File_Control_Cmd();
	~File_Control_Cmd();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 name_offset() const { return name_offset_; }
	uint16 name_size() const { return name_size_; }
	bytestring const & time_create() const { return time_create_; }
	uint16 permission() const { return permission_; }
	uint32 auth_key() const { return auth_key_; }
	uint32 file_size() const { return file_size_; }
	uint16 op_mode() const { return op_mode_; }
	uint16 max_block_size() const { return max_block_size_; }
	uint16 req_id() const { return req_id_; }
	bytestring const & file_name() const { return file_name_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 name_offset_;
	uint16 name_size_;
	bytestring time_create_;
	uint16 permission_;
	uint32 auth_key_;
	uint32 file_size_;
	uint16 op_mode_;
	uint16 max_block_size_;
	uint16 req_id_;
	bytestring file_name_;
	int byteorder_;
};


class File_Control_Cmd_Status_Wrap
{
public:
	File_Control_Cmd_Status_Wrap(uint8 function_code, uint32 obj_size);
	~File_Control_Cmd_Status_Wrap();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int data_obj_case_index() const	{ return data_obj_case_index_; }
	File_Control_Cmd_Status * abort() const
		{
		switch ( data_obj_case_index() )
			{
			case 30:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1249:abort", data_obj_case_index(), "ABORT_FILE");
				break;
			}
		return abort_;
		}
	File_Control_Cmd_Status * fc_cmd_status() const
		{
		switch ( data_obj_case_index() )
			{
			case 129:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1250:fc_cmd_status", data_obj_case_index(), "RESPONSE");
				break;
			}
		return fc_cmd_status_;
		}
	uint8 function_code() const { return function_code_; }
	uint32 obj_size() const { return obj_size_; }
	
protected:
	int data_obj_case_index_;
	File_Control_Cmd_Status * abort_;
	File_Control_Cmd_Status * fc_cmd_status_;
	uint8 function_code_;
	uint32 obj_size_;
};


class File_Control_Cmd_Status
{
public:
	File_Control_Cmd_Status(uint32 obj_size);
	~File_Control_Cmd_Status();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 file_handle() const { return file_handle_; }
	uint32 file_size() const { return file_size_; }
	uint16 max_block_size() const { return max_block_size_; }
	uint16 req_id() const { return req_id_; }
	uint8 status_code() const { return status_code_; }
	bytestring const & opt_text() const { return opt_text_; }
	uint32 obj_size() const { return obj_size_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 file_handle_;
	uint32 file_size_;
	uint16 max_block_size_;
	uint16 req_id_;
	uint8 status_code_;
	bytestring opt_text_;
	uint32 obj_size_;
	int byteorder_;
};


class File_Transport
{
public:
	File_Transport(uint32 obj_size);
	~File_Transport();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextDNP3 * t_context);
	
	// Member access functions
	uint32 file_handle() const { return file_handle_; }
	uint32 block_num() const { return block_num_; }
	bytestring const & file_data() const { return file_data_; }
	uint32 obj_size() const { return obj_size_; }
	int byteorder() const { return byteorder_; }
	bool result() const { return result_; }
	
protected:
	uint32 file_handle_;
	uint32 block_num_;
	bytestring file_data_;
	uint32 obj_size_;
	int byteorder_;
	bool result_;
};


class File_Transport_Status
{
public:
	File_Transport_Status(uint32 obj_size);
	~File_Transport_Status();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 file_handle() const { return file_handle_; }
	uint32 block_num() const { return block_num_; }
	uint8 status() const { return status_; }
	bytestring const & opt_text() const { return opt_text_; }
	uint32 obj_size() const { return obj_size_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 file_handle_;
	uint32 block_num_;
	uint8 status_;
	bytestring opt_text_;
	uint32 obj_size_;
	int byteorder_;
};


class File_Desc_Wrap
{
public:
	File_Desc_Wrap(uint8 function_code);
	~File_Desc_Wrap();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int data_case_index() const	{ return data_case_index_; }
	File_Desc * get_file_info() const
		{
		switch ( data_case_index() )
			{
			case 28:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1285:get_file_info", data_case_index(), "GET_FILE_INFO");
				break;
			}
		return get_file_info_;
		}
	uint8 function_code() const { return function_code_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int data_case_index_;
	File_Desc * get_file_info_;
	uint8 function_code_;
	int byteorder_;
};


class File_Desc
{
public:
	File_Desc();
	~File_Desc();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 name_offset() const { return name_offset_; }
	uint16 name_size() const { return name_size_; }
	uint16 type() const { return type_; }
	uint32 f_size() const { return f_size_; }
	uint32 time_create_low() const { return time_create_low_; }
	uint16 time_create_high() const { return time_create_high_; }
	uint16 permission() const { return permission_; }
	uint16 req_id() const { return req_id_; }
	bytestring const & f_name() const { return f_name_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 name_offset_;
	uint16 name_size_;
	uint16 type_;
	uint32 f_size_;
	uint32 time_create_low_;
	uint16 time_create_high_;
	uint16 permission_;
	uint16 req_id_;
	bytestring f_name_;
	int byteorder_;
};


class File_Spec_Str
{
public:
	File_Spec_Str();
	~File_Spec_Str();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & f_spec() const { return f_spec_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring f_spec_;
	int byteorder_;
};


class Dev_Store
{
public:
	Dev_Store();
	~Dev_Store();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 overflow() const { return overflow_; }
	uint8 obj_group() const { return obj_group_; }
	uint8 variatiion() const { return variatiion_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 overflow_;
	uint8 obj_group_;
	uint8 variatiion_;
	int byteorder_;
};


class Dev_Profile
{
public:
	Dev_Profile();
	~Dev_Profile();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 fc_support_low() const { return fc_support_low_; }
	uint32 fc_support_high() const { return fc_support_high_; }
	uint16 count() const { return count_; }
	vector<Dev_Profile_OH *> * dev_headers() const { return dev_headers_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 fc_support_low_;
	uint32 fc_support_high_;
	uint16 count_;
	vector<Dev_Profile_OH *> * dev_headers_;
	Dev_Profile_OH * dev_headers__elem_;
	int byteorder_;
};


class Dev_Profile_OH
{
public:
	Dev_Profile_OH();
	~Dev_Profile_OH();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 group() const { return group_; }
	uint8 variation() const { return variation_; }
	uint8 qualifier() const { return qualifier_; }
	uint8 range() const { return range_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 group_;
	uint8 variation_;
	uint8 qualifier_;
	uint8 range_;
	int byteorder_;
};


class PrivRegObj
{
public:
	PrivRegObj();
	~PrivRegObj();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 vendor() const { return vendor_; }
	uint16 obj_id() const { return obj_id_; }
	uint16 len() const { return len_; }
	bytestring const & data_objs() const { return data_objs_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 vendor_;
	uint16 obj_id_;
	uint16 len_;
	bytestring data_objs_;
	int byteorder_;
};


class PrivRegObjDesc
{
public:
	PrivRegObjDesc();
	~PrivRegObjDesc();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 vendor() const { return vendor_; }
	uint16 obj_id() const { return obj_id_; }
	uint16 count() const { return count_; }
	vector<ObjDescSpec *> * data_objs() const { return data_objs_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 vendor_;
	uint16 obj_id_;
	uint16 count_;
	vector<ObjDescSpec *> * data_objs_;
	ObjDescSpec * data_objs__elem_;
	int byteorder_;
};


class ObjDescSpec
{
public:
	ObjDescSpec();
	~ObjDescSpec();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 obj_quantity() const { return obj_quantity_; }
	uint8 obj_group() const { return obj_group_; }
	uint8 obj_variation() const { return obj_variation_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 obj_quantity_;
	uint8 obj_group_;
	uint8 obj_variation_;
	int byteorder_;
};


class DescEle
{
public:
	DescEle();
	~DescEle();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 len() const { return len_; }
	uint8 desc_code() const { return desc_code_; }
	uint8 data_type() const { return data_type_; }
	uint8 max_len() const { return max_len_; }
	uint8 ancillary() const { return ancillary_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 len_;
	uint8 desc_code_;
	uint8 data_type_;
	uint8 max_len_;
	uint8 ancillary_;
	int byteorder_;
};


class App_Id
{
public:
	App_Id(uint8 qualifier_field, uint16 object_size16);
	~App_Id();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int app_id_case_index() const	{ return app_id_case_index_; }
	bytestring const & app_name() const
		{
		switch ( app_id_case_index() )
			{
			case 91:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dnp3/dnp3-objects.pac:1383:app_name", app_id_case_index(), "((int) 0x5B)");
				break;
			}
		return app_name_;
		}
	uint8 qualifier_field() const { return qualifier_field_; }
	uint16 object_size16() const { return object_size16_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int app_id_case_index_;
	bytestring app_name_;
	uint8 qualifier_field_;
	uint16 object_size16_;
	int byteorder_;
};


class ActivateConf
{
public:
	ActivateConf();
	~ActivateConf();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 time_delay() const { return time_delay_; }
	uint8 count() const { return count_; }
	vector<StatusEle *> * elements() const { return elements_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 time_delay_;
	uint8 count_;
	vector<StatusEle *> * elements_;
	StatusEle * elements__elem_;
	int byteorder_;
};


class StatusEle
{
public:
	StatusEle();
	~StatusEle();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 len() const { return len_; }
	uint8 status_code() const { return status_code_; }
	bytestring const & ancillary() const { return ancillary_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 len_;
	uint8 status_code_;
	bytestring ancillary_;
	int byteorder_;
};


class BCD_Large
{
public:
	BCD_Large();
	~BCD_Large();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 value_low() const { return value_low_; }
	uint32 vlaue_high() const { return vlaue_high_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 value_low_;
	uint32 vlaue_high_;
	int byteorder_;
};


class AuthChallenge
{
public:
	AuthChallenge(uint16 prefix);
	~AuthChallenge();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 csqUsr() const { return csqUsr_; }
	uint8 hal() const { return hal_; }
	uint8 reason() const { return reason_; }
	bytestring const & chan_data() const { return chan_data_; }
	uint16 prefix() const { return prefix_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 csqUsr_;
	uint8 hal_;
	uint8 reason_;
	bytestring chan_data_;
	uint16 prefix_;
	int byteorder_;
};


class AuthRely
{
public:
	AuthRely(uint16 prefix);
	~AuthRely();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 csqUsr() const { return csqUsr_; }
	bytestring const & chan_data() const { return chan_data_; }
	uint16 prefix() const { return prefix_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 csqUsr_;
	bytestring chan_data_;
	uint16 prefix_;
	int byteorder_;
};


class AuthAggrRequest
{
public:
	AuthAggrRequest(uint16 prefix);
	~AuthAggrRequest();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 csqUsr() const { return csqUsr_; }
	bytestring const & chan_data() const { return chan_data_; }
	uint16 prefix() const { return prefix_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 csqUsr_;
	bytestring chan_data_;
	uint16 prefix_;
	int byteorder_;
};


class AuthSessionKeyStatus
{
public:
	AuthSessionKeyStatus(uint16 prefix);
	~AuthSessionKeyStatus();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 csqUsr() const { return csqUsr_; }
	uint8 key_alg() const { return key_alg_; }
	uint8 key_status() const { return key_status_; }
	bytestring const & chan_data() const { return chan_data_; }
	uint16 prefix() const { return prefix_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 csqUsr_;
	uint8 key_alg_;
	uint8 key_status_;
	bytestring chan_data_;
	uint16 prefix_;
	int byteorder_;
};


class AuthSessionKeyChange
{
public:
	AuthSessionKeyChange(uint16 prefix);
	~AuthSessionKeyChange();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 csqUsr() const { return csqUsr_; }
	bytestring const & key_wrap_data() const { return key_wrap_data_; }
	uint16 prefix() const { return prefix_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 csqUsr_;
	bytestring key_wrap_data_;
	uint16 prefix_;
	int byteorder_;
};


class AuthError
{
public:
	AuthError(uint16 prefix);
	~AuthError();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 csqUsr() const { return csqUsr_; }
	uint8 error_code() const { return error_code_; }
	bytestring const & key_wrap_data() const { return key_wrap_data_; }
	uint16 prefix() const { return prefix_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 csqUsr_;
	uint8 error_code_;
	bytestring key_wrap_data_;
	uint16 prefix_;
	int byteorder_;
};


class DNP3_Conn : public binpac::ConnectionAnalyzer
{
public:
	DNP3_Conn(BroAnalyzer const & bro_analyzer);
	~DNP3_Conn();
	
	// Member access functions
	DNP3_Flow * upflow() const { return upflow_; }
	DNP3_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	DNP3_Flow * upflow_;
	DNP3_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class DNP3_Flow : public binpac::FlowAnalyzer
{
public:
	DNP3_Flow(DNP3_Conn * connection, bool is_orig);
	~DNP3_Flow();
	
	// Member access functions
	FlowBuffer * flow_buffer() const { return flow_buffer_; }
	DNP3_Conn * connection() const { return connection_; }
	bool is_orig() const { return is_orig_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool get_dnp3_header_block(uint16 start, uint16 len, uint8 ctrl, uint16 dest_addr, uint16 src_addr);
	bool get_dnp3_application_request_header(uint8 fc);
	bool get_dnp3_application_response_header(uint8 fc, uint16 iin);
	bool get_dnp3_object_header(uint16 obj_type, uint8 qua_field, uint32 number, uint32 rf_low, uint32 rf_high);
	bool get_dnp3_object_prefix(uint32 prefix_value);
	bool get_dnp3_response_data_object(uint8 data_value);
	bool get_dnp3_attribute_common(uint8 data_type_code, uint8 leng, const_bytestring const & attribute_obj);
	bool get_dnp3_crob(uint8 control_code, uint8 count8, uint32 on_time, uint32 off_time, uint8 status_code);
	bool get_dnp3_pcb(uint8 control_code, uint8 count8, uint32 on_time, uint32 off_time, uint8 status_code);
	bool get_dnp3_counter_32wFlag(uint8 flag, uint32 count_value);
	bool get_dnp3_counter_16wFlag(uint8 flag, uint16 count_value);
	bool get_dnp3_counter_32woFlag(uint32 count_value);
	bool get_dnp3_counter_16woFlag(uint16 count_value);
	bool get_dnp3_frozen_counter_32wFlag(uint8 flag, uint32 count_value);
	bool get_dnp3_frozen_counter_16wFlag(uint8 flag, uint16 count_value);
	bool get_dnp3_frozen_counter_32wFlagTime(uint8 flag, uint32 count_value, const_bytestring const & time48);
	bool get_dnp3_frozen_counter_16wFlagTime(uint8 flag, uint16 count_value, const_bytestring const & time48);
	bool get_dnp3_frozen_counter_32woFlag(uint32 count_value);
	bool get_dnp3_frozen_counter_16woFlag(uint16 count_value);
	bool get_dnp3_analog_input_32wFlag(uint8 flag, int32 value);
	bool get_dnp3_analog_input_16wFlag(uint8 flag, int16 value);
	bool get_dnp3_analog_input_32woFlag(int32 value);
	bool get_dnp3_analog_input_16woFlag(int16 value);
	bool get_dnp3_analog_input_SPwFlag(uint8 flag, uint32 value);
	bool get_dnp3_analog_input_DPwFlag(uint8 flag, uint32 value_low, uint32 value_high);
	bool get_dnp3_frozen_analog_input_32wFlag(uint8 flag, int32 frozen_value);
	bool get_dnp3_frozen_analog_input_16wFlag(uint8 flag, int16 frozen_value);
	bool get_dnp3_frozen_analog_input_32wTime(uint8 flag, int32 frozen_value, const_bytestring const & time48);
	bool get_dnp3_frozen_analog_input_16wTime(uint8 flag, int16 frozen_value, const_bytestring const & time48);
	bool get_dnp3_frozen_analog_input_32woFlag(int32 frozen_value);
	bool get_dnp3_frozen_analog_input_16woFlag(int16 frozen_value);
	bool get_dnp3_frozen_analog_input_SPwFlag(uint8 flag, uint32 frozen_value);
	bool get_dnp3_frozen_analog_input_DPwFlag(uint8 flag, uint32 frozen_value_low, uint32 frozen_value_high);
	bool get_dnp3_analog_input_event_32woTime(uint8 flag, int32 value);
	bool get_dnp3_analog_input_event_16woTime(uint8 flag, int16 value);
	bool get_dnp3_analog_input_event_32wTime(uint8 flag, int32 value, const_bytestring const & time48);
	bool get_dnp3_analog_input_event_16wTime(uint8 flag, int16 value, const_bytestring const & time48);
	bool get_dnp3_analog_input_event_SPwoTime(uint8 flag, uint32 value);
	bool get_dnp3_analog_input_event_DPwoTime(uint8 flag, uint32 value_low, uint32 value_high);
	bool get_dnp3_analog_input_event_SPwTime(uint8 flag, uint32 value, const_bytestring const & time48);
	bool get_dnp3_analog_input_event_DPwTime(uint8 flag, uint32 value_low, uint32 value_high, const_bytestring const & time48);
	bool get_dnp3_frozen_analog_input_event_32woTime(uint8 flag, int32 frozen_value);
	bool get_dnp3_frozen_analog_input_event_16woTime(uint8 flag, int16 frozen_value);
	bool get_dnp3_frozen_analog_input_event_32wTime(uint8 flag, int32 frozen_value, const_bytestring const & time48);
	bool get_dnp3_frozen_analog_input_event_16wTime(uint8 flag, int16 frozen_value, const_bytestring const & time48);
	bool get_dnp3_frozen_analog_input_event_SPwoTime(uint8 flag, uint32 frozen_value);
	bool get_dnp3_frozen_analog_input_event_DPwoTime(uint8 flag, uint32 frozen_value_low, uint32 frozen_value_high);
	bool get_dnp3_frozen_analog_input_event_SPwTime(uint8 flag, uint32 frozen_value, const_bytestring const & time48);
	bool get_dnp3_frozen_analog_input_event_DPwTime(uint8 flag, uint32 frozen_value_low, uint32 frozen_value_high, const_bytestring const & time48);
	bool get_dnp3_file_transport(uint32 file_handle, uint32 block_num, const_bytestring const & file_data);
	bool get_dnp3_debug_byte(const_bytestring const & debug);
	
protected:
	DNP3_PDU * dataunit_;
	ContextDNP3 * context_;
	FlowBuffer * flow_buffer_;
	DNP3_Conn * connection_;
	bool is_orig_;
};

} // namespace DNP3
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_dnp3_dnp3_pac_h */
