// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/file_analysis/analyzer/unified2/unified2.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_file_analysis_analyzer_unified2_unified2_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_file_analysis_analyzer_unified2_unified2_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "Event.h"
#include "file_analysis/File.h"
#include "events.bif.h"
#include "types.bif.h"
#include "IPAddr.h"

namespace binpac {

namespace Unified2 {
class ContextUnified2;
class Unified2_Analyzer;
enum Types {
	PACKET = 2,
	IDS_EVENT = 7,
	IDS_EVENT_IPV6 = 72,
	IDS_EVENT_2 = 104,
	IDS_EVENT_IPV6_2 = 105,
	EXTRA_DATA = 110,
};
class Time;
class Record;
class IDS_Event;
class IDS_Event_2;
class Packet;
class ExtraData;
class UnknownRecordType;
class Flow;
} // namespace Unified2

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace Unified2 {

class ContextUnified2
{
public:
	ContextUnified2(Unified2_Analyzer * analyzer, Flow * flow, FlowBuffer * flow_buffer);
	~ContextUnified2();
	
	// Member access functions
	Unified2_Analyzer * analyzer() const { return analyzer_; }
	Flow * flow() const { return flow_; }
	FlowBuffer * flow_buffer() const { return flow_buffer_; }
	
protected:
	Unified2_Analyzer * analyzer_;
	Flow * flow_;
	FlowBuffer * flow_buffer_;
};


class Unified2_Analyzer : public binpac::ConnectionAnalyzer
{
public:
	Unified2_Analyzer(BroFileAnalyzer * bro_analyzer);
	~Unified2_Analyzer();
	
	// Member access functions
	Flow * downflow() const { return downflow_; }
	Flow * upflow() const { return upflow_; }
	BroFileAnalyzer * bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	Flow * downflow_;
	Flow * upflow_;
	BroFileAnalyzer * bro_analyzer_;
};


class Time
{
public:
	Time();
	~Time();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 seconds() const { return seconds_; }
	uint32 microseconds() const { return microseconds_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 seconds_;
	uint32 microseconds_;
	int byteorder_;
};


class Record
{
public:
	Record();
	~Record();
	int initial_buffer_length() const { return 8; }
	bool ParseBuffer(flow_buffer_t t_flow_buffer, ContextUnified2 * t_context);
	
	// Member access functions
	uint32 rtype() const { return rtype_; }
	uint32 length() const { return length_; }
	int data_case_index() const	{ return data_case_index_; }
	Packet * packet() const
		{
		switch ( data_case_index() )
			{
			case 2:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/file_analysis/analyzer/unified2/unified2-file.pac:20:packet", data_case_index(), "PACKET");
				break;
			}
		return packet_;
		}
	IDS_Event * ids_event() const
		{
		switch ( data_case_index() )
			{
			case 7:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/file_analysis/analyzer/unified2/unified2-file.pac:21:ids_event", data_case_index(), "IDS_EVENT");
				break;
			}
		return ids_event_;
		}
	IDS_Event * ids_event_ipv6() const
		{
		switch ( data_case_index() )
			{
			case 72:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/file_analysis/analyzer/unified2/unified2-file.pac:22:ids_event_ipv6", data_case_index(), "IDS_EVENT_IPV6");
				break;
			}
		return ids_event_ipv6_;
		}
	IDS_Event_2 * ids_event_vlan() const
		{
		switch ( data_case_index() )
			{
			case 104:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/file_analysis/analyzer/unified2/unified2-file.pac:23:ids_event_vlan", data_case_index(), "IDS_EVENT_2");
				break;
			}
		return ids_event_vlan_;
		}
	IDS_Event_2 * ids_event_ipv6_vlan() const
		{
		switch ( data_case_index() )
			{
			case 105:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/file_analysis/analyzer/unified2/unified2-file.pac:24:ids_event_ipv6_vlan", data_case_index(), "IDS_EVENT_IPV6_2");
				break;
			}
		return ids_event_ipv6_vlan_;
		}
	UnknownRecordType * unknown_record_type() const
		{
		return unknown_record_type_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 rtype_;
	uint32 length_;
	int data_case_index_;
	Packet * packet_;
	IDS_Event * ids_event_;
	IDS_Event * ids_event_ipv6_;
	IDS_Event_2 * ids_event_vlan_;
	IDS_Event_2 * ids_event_ipv6_vlan_;
	UnknownRecordType * unknown_record_type_;
	int byteorder_;
	int buffering_state_;
};


class IDS_Event
{
public:
	IDS_Event(Record * rec, int ip_len);
	~IDS_Event();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextUnified2 * t_context);
	
	// Member access functions
	uint32 sensor_id() const { return sensor_id_; }
	uint32 event_id() const { return event_id_; }
	Time * ts() const { return ts_; }
	uint32 signature_id() const { return signature_id_; }
	uint32 generator_id() const { return generator_id_; }
	uint32 signature_revision() const { return signature_revision_; }
	uint32 classification_id() const { return classification_id_; }
	uint32 priority_id() const { return priority_id_; }
	vector<uint32> * src_ip() const { return src_ip_; }
	vector<uint32> * dst_ip() const { return dst_ip_; }
	uint16 src_p() const { return src_p_; }
	uint16 dst_p() const { return dst_p_; }
	uint8 protocol() const { return protocol_; }
	uint8 packet_action() const { return packet_action_; }
	Record * rec() const { return rec_; }
	int ip_len() const { return ip_len_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint32 sensor_id_;
	uint32 event_id_;
	Time * ts_;
	uint32 signature_id_;
	uint32 generator_id_;
	uint32 signature_revision_;
	uint32 classification_id_;
	uint32 priority_id_;
	vector<uint32> * src_ip_;
	uint32 src_ip__elem_;
	vector<uint32> * dst_ip_;
	uint32 dst_ip__elem_;
	uint16 src_p_;
	uint16 dst_p_;
	uint8 protocol_;
	uint8 packet_action_;
	Record * rec_;
	int ip_len_;
	int byteorder_;
	bool proc_;
};


class IDS_Event_2
{
public:
	IDS_Event_2(Record * rec, int ip_len);
	~IDS_Event_2();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextUnified2 * t_context);
	
	// Member access functions
	uint32 sensor_id() const { return sensor_id_; }
	uint32 event_id() const { return event_id_; }
	Time * ts() const { return ts_; }
	uint32 signature_id() const { return signature_id_; }
	uint32 generator_id() const { return generator_id_; }
	uint32 signature_revision() const { return signature_revision_; }
	uint32 classification_id() const { return classification_id_; }
	uint32 priority_id() const { return priority_id_; }
	vector<uint32> * src_ip() const { return src_ip_; }
	vector<uint32> * dst_ip() const { return dst_ip_; }
	uint16 src_p() const { return src_p_; }
	uint16 dst_p() const { return dst_p_; }
	uint8 protocol() const { return protocol_; }
	uint8 impact_flag() const { return impact_flag_; }
	uint8 impact() const { return impact_; }
	uint8 blocked() const { return blocked_; }
	uint32 mpls_label() const { return mpls_label_; }
	uint16 vlan_id() const { return vlan_id_; }
	uint16 pad() const { return pad_; }
	Record * rec() const { return rec_; }
	int ip_len() const { return ip_len_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint32 sensor_id_;
	uint32 event_id_;
	Time * ts_;
	uint32 signature_id_;
	uint32 generator_id_;
	uint32 signature_revision_;
	uint32 classification_id_;
	uint32 priority_id_;
	vector<uint32> * src_ip_;
	uint32 src_ip__elem_;
	vector<uint32> * dst_ip_;
	uint32 dst_ip__elem_;
	uint16 src_p_;
	uint16 dst_p_;
	uint8 protocol_;
	uint8 impact_flag_;
	uint8 impact_;
	uint8 blocked_;
	uint32 mpls_label_;
	uint16 vlan_id_;
	uint16 pad_;
	Record * rec_;
	int ip_len_;
	int byteorder_;
	bool proc_;
};


class Packet
{
public:
	Packet(Record * rec);
	~Packet();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextUnified2 * t_context);
	
	// Member access functions
	uint32 sensor_id() const { return sensor_id_; }
	uint32 event_id() const { return event_id_; }
	uint32 event_second() const { return event_second_; }
	Time * packet_ts() const { return packet_ts_; }
	uint32 link_type() const { return link_type_; }
	uint32 packet_len() const { return packet_len_; }
	bytestring const & packet_data() const { return packet_data_; }
	Record * rec() const { return rec_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint32 sensor_id_;
	uint32 event_id_;
	uint32 event_second_;
	Time * packet_ts_;
	uint32 link_type_;
	uint32 packet_len_;
	bytestring packet_data_;
	Record * rec_;
	int byteorder_;
	bool proc_;
};


class ExtraData
{
public:
	ExtraData(Record * rec);
	~ExtraData();
	int initial_buffer_length() const { return 0; }
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextUnified2 * t_context);
	
	// Member access functions
	uint32 sensor_id() const { return sensor_id_; }
	uint32 event_id() const { return event_id_; }
	uint32 event_second() const { return event_second_; }
	uint32 extra_type() const { return extra_type_; }
	uint32 data_type() const { return data_type_; }
	uint32 blob_len() const { return blob_len_; }
	bytestring const & blob() const { return blob_; }
	Record * rec() const { return rec_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 sensor_id_;
	uint32 event_id_;
	uint32 event_second_;
	uint32 extra_type_;
	uint32 data_type_;
	uint32 blob_len_;
	bytestring blob_;
	Record * rec_;
	int byteorder_;
};


class UnknownRecordType
{
public:
	UnknownRecordType(Record * rec);
	~UnknownRecordType();
	int initial_buffer_length() const { return 0; }
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextUnified2 * t_context);
	
	// Member access functions
	Record * rec() const { return rec_; }
	int byteorder() const { return byteorder_; }
	
protected:
	const_bytestring data_;
	Record * rec_;
	int byteorder_;
};


class Flow : public binpac::FlowAnalyzer
{
public:
	Flow(Unified2_Analyzer * connection);
	~Flow();
	
	// Member access functions
	FlowBuffer * flow_buffer() const { return flow_buffer_; }
	Unified2_Analyzer * connection() const { return connection_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	double ts_to_double(Time * ts);
	AddrVal * unified2_addr_to_bro_addr(vector<uint32> * a);
	PortVal * to_port(uint16 n, uint8 p);
	bool proc_ids_event(IDS_Event * ev);
	bool proc_ids_event_2(IDS_Event_2 * ev);
	bool proc_packet(Packet * pkt);
	
protected:
	Record * dataunit_;
	ContextUnified2 * context_;
	
	// Additional members

	
	FlowBuffer * flow_buffer_;
	Unified2_Analyzer * connection_;
};

} // namespace Unified2
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_file_analysis_analyzer_unified2_unified2_pac_h */
