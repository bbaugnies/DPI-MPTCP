// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/stepping-stone/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr stp_create_endp; 
void BifEvent::generate_stp_create_endp(analyzer::Analyzer* analyzer, Connection* c, bro_int_t e, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::stp_create_endp is NULL, which should happen *before*
	// BifEvent::generate_stp_create_endp is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(e, TYPE_BOOL));
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::stp_create_endp, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr stp_resume_endp; 
void BifEvent::generate_stp_resume_endp(analyzer::Analyzer* analyzer, bro_int_t e)
	{
	// Note that it is intentional that here we do not
	// check if ::stp_resume_endp is NULL, which should happen *before*
	// BifEvent::generate_stp_resume_endp is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(new Val(e, TYPE_BOOL));

	mgr.QueueEvent(::stp_resume_endp, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr stp_correlate_pair; 
void BifEvent::generate_stp_correlate_pair(analyzer::Analyzer* analyzer, bro_int_t e1, bro_int_t e2)
	{
	// Note that it is intentional that here we do not
	// check if ::stp_correlate_pair is NULL, which should happen *before*
	// BifEvent::generate_stp_correlate_pair is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(new Val(e1, TYPE_BOOL));
	vl->append(new Val(e2, TYPE_BOOL));

	mgr.QueueEvent(::stp_correlate_pair, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr stp_remove_pair; 
void BifEvent::generate_stp_remove_pair(analyzer::Analyzer* analyzer, bro_int_t e1, bro_int_t e2)
	{
	// Note that it is intentional that here we do not
	// check if ::stp_remove_pair is NULL, which should happen *before*
	// BifEvent::generate_stp_remove_pair is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(new Val(e1, TYPE_BOOL));
	vl->append(new Val(e2, TYPE_BOOL));

	mgr.QueueEvent(::stp_remove_pair, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr stp_remove_endp; 
void BifEvent::generate_stp_remove_endp(analyzer::Analyzer* analyzer, bro_int_t e)
	{
	// Note that it is intentional that here we do not
	// check if ::stp_remove_endp is NULL, which should happen *before*
	// BifEvent::generate_stp_remove_endp is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(new Val(e, TYPE_BOOL));

	mgr.QueueEvent(::stp_remove_endp, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
