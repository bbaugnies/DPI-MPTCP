// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/irc/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr irc_request; 
void BifEvent::generate_irc_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* command, StringVal* arguments)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_request is NULL, which should happen *before*
	// BifEvent::generate_irc_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(command);
	vl->append(arguments);

	mgr.QueueEvent(::irc_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_reply; 
void BifEvent::generate_irc_reply(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, bro_uint_t code, StringVal* params)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_reply is NULL, which should happen *before*
	// BifEvent::generate_irc_reply is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(new Val(code, TYPE_COUNT));
	vl->append(params);

	mgr.QueueEvent(::irc_reply, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_message; 
void BifEvent::generate_irc_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* command, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_message is NULL, which should happen *before*
	// BifEvent::generate_irc_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(command);
	vl->append(message);

	mgr.QueueEvent(::irc_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_quit_message; 
void BifEvent::generate_irc_quit_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* nick, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_quit_message is NULL, which should happen *before*
	// BifEvent::generate_irc_quit_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(nick);
	vl->append(message);

	mgr.QueueEvent(::irc_quit_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_privmsg_message; 
void BifEvent::generate_irc_privmsg_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* source, StringVal* target, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_privmsg_message is NULL, which should happen *before*
	// BifEvent::generate_irc_privmsg_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(source);
	vl->append(target);
	vl->append(message);

	mgr.QueueEvent(::irc_privmsg_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_notice_message; 
void BifEvent::generate_irc_notice_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* source, StringVal* target, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_notice_message is NULL, which should happen *before*
	// BifEvent::generate_irc_notice_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(source);
	vl->append(target);
	vl->append(message);

	mgr.QueueEvent(::irc_notice_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_squery_message; 
void BifEvent::generate_irc_squery_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* source, StringVal* target, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_squery_message is NULL, which should happen *before*
	// BifEvent::generate_irc_squery_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(source);
	vl->append(target);
	vl->append(message);

	mgr.QueueEvent(::irc_squery_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_join_message; 
void BifEvent::generate_irc_join_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* info_list)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_join_message is NULL, which should happen *before*
	// BifEvent::generate_irc_join_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(info_list);

	mgr.QueueEvent(::irc_join_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_part_message; 
void BifEvent::generate_irc_part_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* nick, Val* chans, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_part_message is NULL, which should happen *before*
	// BifEvent::generate_irc_part_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(nick);
	vl->append(chans);
	vl->append(message);

	mgr.QueueEvent(::irc_part_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_nick_message; 
void BifEvent::generate_irc_nick_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* who, StringVal* newnick)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_nick_message is NULL, which should happen *before*
	// BifEvent::generate_irc_nick_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(who);
	vl->append(newnick);

	mgr.QueueEvent(::irc_nick_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_invalid_nick; 
void BifEvent::generate_irc_invalid_nick(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_invalid_nick is NULL, which should happen *before*
	// BifEvent::generate_irc_invalid_nick is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::irc_invalid_nick, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_network_info; 
void BifEvent::generate_irc_network_info(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t users, bro_uint_t services, bro_uint_t servers)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_network_info is NULL, which should happen *before*
	// BifEvent::generate_irc_network_info is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(users, TYPE_COUNT));
	vl->append(new Val(services, TYPE_COUNT));
	vl->append(new Val(servers, TYPE_COUNT));

	mgr.QueueEvent(::irc_network_info, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_server_info; 
void BifEvent::generate_irc_server_info(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t users, bro_uint_t services, bro_uint_t servers)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_server_info is NULL, which should happen *before*
	// BifEvent::generate_irc_server_info is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(users, TYPE_COUNT));
	vl->append(new Val(services, TYPE_COUNT));
	vl->append(new Val(servers, TYPE_COUNT));

	mgr.QueueEvent(::irc_server_info, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_channel_info; 
void BifEvent::generate_irc_channel_info(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t chans)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_channel_info is NULL, which should happen *before*
	// BifEvent::generate_irc_channel_info is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(chans, TYPE_COUNT));

	mgr.QueueEvent(::irc_channel_info, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_who_line; 
void BifEvent::generate_irc_who_line(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* target_nick, StringVal* channel, StringVal* user, StringVal* host, StringVal* server, StringVal* nick, StringVal* params, bro_uint_t hops, StringVal* real_name)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_who_line is NULL, which should happen *before*
	// BifEvent::generate_irc_who_line is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(target_nick);
	vl->append(channel);
	vl->append(user);
	vl->append(host);
	vl->append(server);
	vl->append(nick);
	vl->append(params);
	vl->append(new Val(hops, TYPE_COUNT));
	vl->append(real_name);

	mgr.QueueEvent(::irc_who_line, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_names_info; 
void BifEvent::generate_irc_names_info(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* c_type, StringVal* channel, Val* users)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_names_info is NULL, which should happen *before*
	// BifEvent::generate_irc_names_info is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(c_type);
	vl->append(channel);
	vl->append(users);

	mgr.QueueEvent(::irc_names_info, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_whois_operator_line; 
void BifEvent::generate_irc_whois_operator_line(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* nick)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_whois_operator_line is NULL, which should happen *before*
	// BifEvent::generate_irc_whois_operator_line is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(nick);

	mgr.QueueEvent(::irc_whois_operator_line, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_whois_channel_line; 
void BifEvent::generate_irc_whois_channel_line(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* nick, Val* chans)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_whois_channel_line is NULL, which should happen *before*
	// BifEvent::generate_irc_whois_channel_line is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(nick);
	vl->append(chans);

	mgr.QueueEvent(::irc_whois_channel_line, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_whois_user_line; 
void BifEvent::generate_irc_whois_user_line(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* nick, StringVal* user, StringVal* host, StringVal* real_name)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_whois_user_line is NULL, which should happen *before*
	// BifEvent::generate_irc_whois_user_line is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(nick);
	vl->append(user);
	vl->append(host);
	vl->append(real_name);

	mgr.QueueEvent(::irc_whois_user_line, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_oper_response; 
void BifEvent::generate_irc_oper_response(analyzer::Analyzer* analyzer, Connection* c, int is_orig, int got_oper)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_oper_response is NULL, which should happen *before*
	// BifEvent::generate_irc_oper_response is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(got_oper, TYPE_BOOL));

	mgr.QueueEvent(::irc_oper_response, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_global_users; 
void BifEvent::generate_irc_global_users(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_global_users is NULL, which should happen *before*
	// BifEvent::generate_irc_global_users is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(msg);

	mgr.QueueEvent(::irc_global_users, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_channel_topic; 
void BifEvent::generate_irc_channel_topic(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* channel, StringVal* topic)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_channel_topic is NULL, which should happen *before*
	// BifEvent::generate_irc_channel_topic is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(channel);
	vl->append(topic);

	mgr.QueueEvent(::irc_channel_topic, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_who_message; 
void BifEvent::generate_irc_who_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* mask, int oper)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_who_message is NULL, which should happen *before*
	// BifEvent::generate_irc_who_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(mask);
	vl->append(new Val(oper, TYPE_BOOL));

	mgr.QueueEvent(::irc_who_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_whois_message; 
void BifEvent::generate_irc_whois_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* server, StringVal* users)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_whois_message is NULL, which should happen *before*
	// BifEvent::generate_irc_whois_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(server);
	vl->append(users);

	mgr.QueueEvent(::irc_whois_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_oper_message; 
void BifEvent::generate_irc_oper_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* user, StringVal* password)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_oper_message is NULL, which should happen *before*
	// BifEvent::generate_irc_oper_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(user);
	vl->append(password);

	mgr.QueueEvent(::irc_oper_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_kick_message; 
void BifEvent::generate_irc_kick_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* chans, StringVal* users, StringVal* comment)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_kick_message is NULL, which should happen *before*
	// BifEvent::generate_irc_kick_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(chans);
	vl->append(users);
	vl->append(comment);

	mgr.QueueEvent(::irc_kick_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_error_message; 
void BifEvent::generate_irc_error_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_error_message is NULL, which should happen *before*
	// BifEvent::generate_irc_error_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(message);

	mgr.QueueEvent(::irc_error_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_invite_message; 
void BifEvent::generate_irc_invite_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* nickname, StringVal* channel)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_invite_message is NULL, which should happen *before*
	// BifEvent::generate_irc_invite_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(nickname);
	vl->append(channel);

	mgr.QueueEvent(::irc_invite_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_mode_message; 
void BifEvent::generate_irc_mode_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* params)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_mode_message is NULL, which should happen *before*
	// BifEvent::generate_irc_mode_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(params);

	mgr.QueueEvent(::irc_mode_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_squit_message; 
void BifEvent::generate_irc_squit_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* server, StringVal* message)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_squit_message is NULL, which should happen *before*
	// BifEvent::generate_irc_squit_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(server);
	vl->append(message);

	mgr.QueueEvent(::irc_squit_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_dcc_message; 
void BifEvent::generate_irc_dcc_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* prefix, StringVal* target, StringVal* dcc_type, StringVal* argument, AddrVal* address, bro_uint_t dest_port, bro_uint_t size)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_dcc_message is NULL, which should happen *before*
	// BifEvent::generate_irc_dcc_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(prefix);
	vl->append(target);
	vl->append(dcc_type);
	vl->append(argument);
	vl->append(address);
	vl->append(new Val(dest_port, TYPE_COUNT));
	vl->append(new Val(size, TYPE_COUNT));

	mgr.QueueEvent(::irc_dcc_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_user_message; 
void BifEvent::generate_irc_user_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* user, StringVal* host, StringVal* server, StringVal* real_name)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_user_message is NULL, which should happen *before*
	// BifEvent::generate_irc_user_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(user);
	vl->append(host);
	vl->append(server);
	vl->append(real_name);

	mgr.QueueEvent(::irc_user_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr irc_password_message; 
void BifEvent::generate_irc_password_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* password)
	{
	// Note that it is intentional that here we do not
	// check if ::irc_password_message is NULL, which should happen *before*
	// BifEvent::generate_irc_password_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(password);

	mgr.QueueEvent(::irc_password_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
