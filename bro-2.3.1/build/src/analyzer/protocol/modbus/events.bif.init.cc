// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/modbus/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_Modbus {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::modbus_message = internal_handler("modbus_message");
	bifs.push_back(std::make_pair("modbus_message", 2));
	::modbus_exception = internal_handler("modbus_exception");
	bifs.push_back(std::make_pair("modbus_exception", 2));
	::modbus_read_coils_request = internal_handler("modbus_read_coils_request");
	bifs.push_back(std::make_pair("modbus_read_coils_request", 2));
	::modbus_read_coils_response = internal_handler("modbus_read_coils_response");
	bifs.push_back(std::make_pair("modbus_read_coils_response", 2));
	::modbus_read_discrete_inputs_request = internal_handler("modbus_read_discrete_inputs_request");
	bifs.push_back(std::make_pair("modbus_read_discrete_inputs_request", 2));
	::modbus_read_discrete_inputs_response = internal_handler("modbus_read_discrete_inputs_response");
	bifs.push_back(std::make_pair("modbus_read_discrete_inputs_response", 2));
	::modbus_read_holding_registers_request = internal_handler("modbus_read_holding_registers_request");
	bifs.push_back(std::make_pair("modbus_read_holding_registers_request", 2));
	::modbus_read_holding_registers_response = internal_handler("modbus_read_holding_registers_response");
	bifs.push_back(std::make_pair("modbus_read_holding_registers_response", 2));
	::modbus_read_input_registers_request = internal_handler("modbus_read_input_registers_request");
	bifs.push_back(std::make_pair("modbus_read_input_registers_request", 2));
	::modbus_read_input_registers_response = internal_handler("modbus_read_input_registers_response");
	bifs.push_back(std::make_pair("modbus_read_input_registers_response", 2));
	::modbus_write_single_coil_request = internal_handler("modbus_write_single_coil_request");
	bifs.push_back(std::make_pair("modbus_write_single_coil_request", 2));
	::modbus_write_single_coil_response = internal_handler("modbus_write_single_coil_response");
	bifs.push_back(std::make_pair("modbus_write_single_coil_response", 2));
	::modbus_write_single_register_request = internal_handler("modbus_write_single_register_request");
	bifs.push_back(std::make_pair("modbus_write_single_register_request", 2));
	::modbus_write_single_register_response = internal_handler("modbus_write_single_register_response");
	bifs.push_back(std::make_pair("modbus_write_single_register_response", 2));
	::modbus_write_multiple_coils_request = internal_handler("modbus_write_multiple_coils_request");
	bifs.push_back(std::make_pair("modbus_write_multiple_coils_request", 2));
	::modbus_write_multiple_coils_response = internal_handler("modbus_write_multiple_coils_response");
	bifs.push_back(std::make_pair("modbus_write_multiple_coils_response", 2));
	::modbus_write_multiple_registers_request = internal_handler("modbus_write_multiple_registers_request");
	bifs.push_back(std::make_pair("modbus_write_multiple_registers_request", 2));
	::modbus_write_multiple_registers_response = internal_handler("modbus_write_multiple_registers_response");
	bifs.push_back(std::make_pair("modbus_write_multiple_registers_response", 2));
	::modbus_read_file_record_request = internal_handler("modbus_read_file_record_request");
	bifs.push_back(std::make_pair("modbus_read_file_record_request", 2));
	::modbus_read_file_record_response = internal_handler("modbus_read_file_record_response");
	bifs.push_back(std::make_pair("modbus_read_file_record_response", 2));
	::modbus_write_file_record_request = internal_handler("modbus_write_file_record_request");
	bifs.push_back(std::make_pair("modbus_write_file_record_request", 2));
	::modbus_write_file_record_response = internal_handler("modbus_write_file_record_response");
	bifs.push_back(std::make_pair("modbus_write_file_record_response", 2));
	::modbus_mask_write_register_request = internal_handler("modbus_mask_write_register_request");
	bifs.push_back(std::make_pair("modbus_mask_write_register_request", 2));
	::modbus_mask_write_register_response = internal_handler("modbus_mask_write_register_response");
	bifs.push_back(std::make_pair("modbus_mask_write_register_response", 2));
	::modbus_read_write_multiple_registers_request = internal_handler("modbus_read_write_multiple_registers_request");
	bifs.push_back(std::make_pair("modbus_read_write_multiple_registers_request", 2));
	::modbus_read_write_multiple_registers_response = internal_handler("modbus_read_write_multiple_registers_response");
	bifs.push_back(std::make_pair("modbus_read_write_multiple_registers_response", 2));
	::modbus_read_fifo_queue_request = internal_handler("modbus_read_fifo_queue_request");
	bifs.push_back(std::make_pair("modbus_read_fifo_queue_request", 2));
	::modbus_read_fifo_queue_response = internal_handler("modbus_read_fifo_queue_response");
	bifs.push_back(std::make_pair("modbus_read_fifo_queue_response", 2));

	return bifs;
	}
} }

