// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/bittorrent/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr bittorrent_peer_handshake; 
void BifEvent::generate_bittorrent_peer_handshake(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* reserved, StringVal* info_hash, StringVal* peer_id)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_handshake is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_handshake is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(reserved);
	vl->append(info_hash);
	vl->append(peer_id);

	mgr.QueueEvent(::bittorrent_peer_handshake, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_keep_alive; 
void BifEvent::generate_bittorrent_peer_keep_alive(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_keep_alive is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_keep_alive is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::bittorrent_peer_keep_alive, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_choke; 
void BifEvent::generate_bittorrent_peer_choke(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_choke is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_choke is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::bittorrent_peer_choke, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_unchoke; 
void BifEvent::generate_bittorrent_peer_unchoke(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_unchoke is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_unchoke is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::bittorrent_peer_unchoke, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_interested; 
void BifEvent::generate_bittorrent_peer_interested(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_interested is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_interested is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::bittorrent_peer_interested, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_not_interested; 
void BifEvent::generate_bittorrent_peer_not_interested(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_not_interested is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_not_interested is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::bittorrent_peer_not_interested, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_have; 
void BifEvent::generate_bittorrent_peer_have(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t piece_index)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_have is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_have is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(piece_index, TYPE_COUNT));

	mgr.QueueEvent(::bittorrent_peer_have, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_bitfield; 
void BifEvent::generate_bittorrent_peer_bitfield(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* bitfield)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_bitfield is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_bitfield is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(bitfield);

	mgr.QueueEvent(::bittorrent_peer_bitfield, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_request; 
void BifEvent::generate_bittorrent_peer_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t index, bro_uint_t begin, bro_uint_t length)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_request is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(index, TYPE_COUNT));
	vl->append(new Val(begin, TYPE_COUNT));
	vl->append(new Val(length, TYPE_COUNT));

	mgr.QueueEvent(::bittorrent_peer_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_piece; 
void BifEvent::generate_bittorrent_peer_piece(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t index, bro_uint_t begin, bro_uint_t piece_length)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_piece is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_piece is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(index, TYPE_COUNT));
	vl->append(new Val(begin, TYPE_COUNT));
	vl->append(new Val(piece_length, TYPE_COUNT));

	mgr.QueueEvent(::bittorrent_peer_piece, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_cancel; 
void BifEvent::generate_bittorrent_peer_cancel(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t index, bro_uint_t begin, bro_uint_t length)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_cancel is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_cancel is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(index, TYPE_COUNT));
	vl->append(new Val(begin, TYPE_COUNT));
	vl->append(new Val(length, TYPE_COUNT));

	mgr.QueueEvent(::bittorrent_peer_cancel, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_port; 
void BifEvent::generate_bittorrent_peer_port(analyzer::Analyzer* analyzer, Connection* c, int is_orig, PortVal* listen_port)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_port is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_port is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(listen_port);

	mgr.QueueEvent(::bittorrent_peer_port, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_unknown; 
void BifEvent::generate_bittorrent_peer_unknown(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t message_id, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_unknown is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_unknown is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(message_id, TYPE_COUNT));
	vl->append(data);

	mgr.QueueEvent(::bittorrent_peer_unknown, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bittorrent_peer_weird; 
void BifEvent::generate_bittorrent_peer_weird(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::bittorrent_peer_weird is NULL, which should happen *before*
	// BifEvent::generate_bittorrent_peer_weird is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(msg);

	mgr.QueueEvent(::bittorrent_peer_weird, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bt_tracker_request; 
void BifEvent::generate_bt_tracker_request(analyzer::Analyzer* analyzer, Connection* c, StringVal* uri, Val* headers)
	{
	// Note that it is intentional that here we do not
	// check if ::bt_tracker_request is NULL, which should happen *before*
	// BifEvent::generate_bt_tracker_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(uri);
	vl->append(headers);

	mgr.QueueEvent(::bt_tracker_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bt_tracker_response; 
void BifEvent::generate_bt_tracker_response(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t status, Val* headers, Val* peers, Val* benc)
	{
	// Note that it is intentional that here we do not
	// check if ::bt_tracker_response is NULL, which should happen *before*
	// BifEvent::generate_bt_tracker_response is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(status, TYPE_COUNT));
	vl->append(headers);
	vl->append(peers);
	vl->append(benc);

	mgr.QueueEvent(::bt_tracker_response, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bt_tracker_response_not_ok; 
void BifEvent::generate_bt_tracker_response_not_ok(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t status, Val* headers)
	{
	// Note that it is intentional that here we do not
	// check if ::bt_tracker_response_not_ok is NULL, which should happen *before*
	// BifEvent::generate_bt_tracker_response_not_ok is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(status, TYPE_COUNT));
	vl->append(headers);

	mgr.QueueEvent(::bt_tracker_response_not_ok, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr bt_tracker_weird; 
void BifEvent::generate_bt_tracker_weird(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* msg)
	{
	// Note that it is intentional that here we do not
	// check if ::bt_tracker_weird is NULL, which should happen *before*
	// BifEvent::generate_bt_tracker_weird is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(msg);

	mgr.QueueEvent(::bt_tracker_weird, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
