#line 2 "/home/benjamin/Bro/bro-2.3.1/build/src/rule-scan.cc"

#line 4 "/home/benjamin/Bro/bro-2.3.1/build/src/rule-scan.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer rules__create_buffer
#define yy_delete_buffer rules__delete_buffer
#define yy_flex_debug rules__flex_debug
#define yy_init_buffer rules__init_buffer
#define yy_flush_buffer rules__flush_buffer
#define yy_load_buffer_state rules__load_buffer_state
#define yy_switch_to_buffer rules__switch_to_buffer
#define yyin rules_in
#define yyleng rules_leng
#define yylex rules_lex
#define yylineno rules_lineno
#define yyout rules_out
#define yyrestart rules_restart
#define yytext rules_text
#define yywrap rules_wrap
#define yyalloc rules_alloc
#define yyrealloc rules_realloc
#define yyfree rules_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE rules_restart(rules_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int rules_leng;

extern FILE *rules_in, *rules_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rules_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up rules_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via rules_restart()), so that the user can continue scanning by
	 * just pointing rules_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when rules_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int rules_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow rules_wrap()'s to do buffer switches
 * instead of setting up a fresh rules_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void rules_restart (FILE *input_file  );
void rules__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE rules__create_buffer (FILE *file,int size  );
void rules__delete_buffer (YY_BUFFER_STATE b  );
void rules__flush_buffer (YY_BUFFER_STATE b  );
void rules_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void rules_pop_buffer_state (void );

static void rules_ensure_buffer_stack (void );
static void rules__load_buffer_state (void );
static void rules__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER rules__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE rules__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE rules__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE rules__scan_bytes (yyconst char *bytes,int len  );

void *rules_alloc (yy_size_t  );
void *rules_realloc (void *,yy_size_t  );
void rules_free (void *  );

#define yy_new_buffer rules__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        rules_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules__create_buffer(rules_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        rules_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            rules__create_buffer(rules_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *rules_in = (FILE *) 0, *rules_out = (FILE *) 0;

typedef int yy_state_type;

extern int rules_lineno;

int rules_lineno = 1;

extern char *rules_text;
#define yytext_ptr rules_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up rules_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	rules_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[365] =
    {   0,
        0,    0,    0,    0,   71,   69,    2,    4,    7,   69,
        1,    7,   69,   69,   63,   63,   10,   12,   11,   66,
        7,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   67,    2,   14,    0,   65,    0,
        1,    0,    0,   68,    0,   66,    0,   63,    0,   66,
        8,   13,    9,    0,    0,    0,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   15,   66,
       66,   66,   66,   29,   66,   66,   66,   66,   66,   66,
       66,   66,   67,    0,   65,    0,    0,    0,   68,    0,
        0,    0,   64,    0,    0,    0,    0,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   59,   66,   66,
       66,   66,   16,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   19,   66,   20,    0,    3,    3,   68,
        0,   66,    0,    0,    0,    0,    0,    5,   66,   66,
       66,   66,   66,   35,   66,   66,   66,   66,   66,   58,
       17,   66,   66,   27,   66,   66,   66,   66,   66,   66,
       66,   30,   66,   66,   21,   67,    0,   66,    0,    0,
        0,    0,    0,    0,    0,   66,   66,   66,   66,   66,
       66,   36,   22,   66,   66,   66,   66,   18,   66,   66,
       28,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   67,    0,    0,    0,    0,    0,    0,    6,   49,
       66,   32,   66,   34,   66,   66,   60,   38,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   46,   66,
       66,   66,   62,    0,    0,    0,    0,   31,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   51,   66,   66,
       45,   66,   66,   66,   66,    0,    0,    0,    0,    0,
       33,   66,   66,   66,   66,   66,   66,   66,   40,   66,
       66,   66,   66,   66,   47,   66,   66,    0,   61,    0,
        0,   66,   66,   37,   55,   66,   66,   66,   66,   66,
       66,   25,   44,   26,   48,    0,    0,   66,   50,   66,

       66,   39,   24,   66,   66,   66,    0,   23,   66,   66,
       66,   66,   66,    0,   66,   66,   52,   41,   66,   66,
        0,   66,   66,   66,   66,   66,    0,   66,   66,   66,
       66,   66,   66,    0,   54,   66,   66,   66,   66,   66,
        0,   66,   66,   66,   66,   66,   57,   53,   66,   66,
       66,   66,   66,   42,   56,   66,   66,   66,   66,   66,
       66,   66,   43,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    1,    1,
        1,    1,    1,    7,    8,    9,   10,   11,   12,   12,
       12,   12,   12,   13,   12,   12,   12,   14,    1,   15,
       16,   17,    1,    1,   18,   18,   18,   18,   18,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       20,   21,   22,    1,   19,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   19,   19,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   19,   43,
       44,   45,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    4,    5,    1,
        6,    6,    6,    7,    1,    1,    1,    8,    9,    1,
        1,   10,    8,    8,    8,    8,    8,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[389] =
    {   0,
        0,    0,   45,    0,  644, 1215,  638, 1215,  617,   86,
        0, 1215,    0,   82,   84,   97,  597,  587,  584,   85,
       90,   91,  103,  104,  105,  112,  115,  111,  121,  135,
      139,  169,  146,  147,  580,  591, 1215,  110, 1215,  136,
        0,  588,  112,  556,  144,  123,  151,  176,  559,  201,
     1215, 1215, 1215,  133,  547,  536,  158,  160,  161,  172,
      182,  207,  188,  209,  197,  222,  223,  226,  238,  230,
      239,  240,  241,  247,  248,  257,  251,  255,  265,  258,
      268,  276,  495,  483,  237,  469,  158,  452,  172,  184,
      286,    0,    0,  438,    0,  421,  302,  287,  294,  296,

      278,  322,  323,  324,  325,  326,  332,  297,  333,  334,
      335,  342,  343,  351,  353,  354,  360,  366,  367,  370,
      379,  376,  382,  389,  386,  396,    0,    0,  427,  279,
      310,  411,  394,  385,  397,    0,  378,  273,  398,  406,
      407,  409,  410,  417,  418,  419,  428,  430,  436,  439,
      442,  440,  450,  451,  452,  458,  459,  460,  471,  461,
      468,  472,  478,  480,  482,  369,  489,  359,  358,  352,
      340,  495,    0,  407,  501,  501,  502,  508,  511,  509,
      515,  512,  518,  521,  524,  528,  531,  534,  542,  543,
      544,  550,  551,  554,  561,  558,  562,  571,  574,  572,

      582,  336,  586,  305,  293,  517,  599,  603,  606,  592,
      611,  612,  614,  615,  618,  622,  621,  625,  628,  632,
      634,  641,  647,  648,  655,  657,  658,  659,  666,  670,
      676,  678,  686,  277,  527,  565,  665,  677,  693,  695,
      696,  697,  703,  704,  707,  710,  706,  714,  717,  723,
      729,  730,  738,  740,  744,  725,  749,  259,  741,  758,
      750,  763,  766,  767,  773,  774,  777,  776,  786,  787,
      789,  799,  795,  802,  805,  806,  812,  823,  819,  224,
      829,  829,  835,  837,  838,  839,  841,  845,  848,  849,
      852,  855,  856,  858,  862,  203,  866,  873,  880,  884,

      886,  887,  888,  894,  895,  896,  190,  897,  904,  898,
      905,  906,  907,  189,  915,  917,  932,  921,  928,  938,
      166,  940,  942,  944,  948,  950,  109,  961,  962,  968,
      969,  970,  971,   88,  978,  980,  984,  981,  988,  992,
      743,  999, 1003, 1005, 1012, 1013, 1009, 1015, 1016, 1025,
     1026, 1027, 1035, 1036, 1043, 1045, 1046, 1047, 1049, 1053,
     1059, 1063, 1062, 1215, 1097, 1107, 1117, 1127, 1134, 1138,
     1141, 1145, 1153, 1158, 1162, 1165, 1166, 1172, 1176, 1179,
     1183, 1186, 1189, 1194, 1197, 1200, 1203, 1206
    } ;

static yyconst flex_int16_t yy_def[389] =
    {   0,
      364,    1,  364,    3,  364,  364,  364,  364,  364,  365,
      366,  364,  367,  368,  369,  369,  364,  364,  364,  369,
      370,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  371,  364,  364,  365,  364,  365,
      366,  367,  368,  364,  368,  369,  364,  369,  364,  369,
      364,  364,  364,  370,  370,  372,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  371,  364,  365,  373,  368,  364,  368,  368,
      364,  374,   50,  375,  376,  372,  364,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  377,  373,  373,  368,
      364,  378,  375,  379,   97,   97,   97,  364,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  380,  364,  378,  381,  379,
      382,  364,   97,  364,  364,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  380,  364,  381,  382,  383,  364,  364,  364,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  364,  384,  383,  383,  364,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  364,  364,  384,  383,  364,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  364,  364,  385,
      364,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  385,  364,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  386,  369,  369,  369,
      369,  369,  369,  386,  369,  369,  369,  369,  369,  369,
      387,  369,  369,  369,  369,  369,  387,  369,  369,  369,
      369,  369,  369,  388,  369,  369,  369,  369,  369,  369,
      388,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,    0,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364
    } ;

static yyconst flex_int16_t yy_nxt[1261] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   12,   13,   14,
       15,   16,   16,   12,   17,   18,   19,   20,   20,   21,
        6,   12,   22,   20,   20,   23,   24,   25,   20,   26,
       27,   28,   20,   20,   29,   30,   20,   31,   32,   33,
       34,   20,   20,   20,   20,    6,    7,    8,    6,    6,
       11,    6,    6,   13,    6,    6,    6,    6,    6,    6,
        6,    6,   35,   35,    6,    6,    6,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       39,   44,   47,  364,   48,   48,   48,   49,   49,  364,

       54,   97,   45,   56,   49,   47,   40,   48,   48,   48,
       49,  364,  364,  364,   39,   57,   49,   49,   49,  364,
      364,   44,  334,  364,   49,   49,   50,   63,   49,  364,
       40,  364,   87,   58,   49,   64,   49,   60,   66,   68,
       85,   59,   61,  364,   65,   62,   94,  364,   49,   70,
       69,   67,   49,   89,  364,  364,   40,   72,   71,   49,
       49,   91,   91,   91,   90,   73,  364,  130,  364,  364,
       80,   49,   82,   49,   49,   95,   74,  364,   90,   97,
      364,   44,   49,   81,   47,   49,   48,   48,   48,   49,
      364,   75,   87,   44,  101,   49,  364,   98,   99,   76,

      100,   49,  321,   97,   90,  364,   77,   78,   79,  364,
       49,   93,   93,   93,   49,  364,  307,  364,   93,  105,
       49,  102,   49,   93,   93,   93,   93,   93,   93,  103,
      364,  364,  108,  104,  364,   49,   49,   97,  364,   49,
      106,   39,  107,   49,  109,  112,  364,  364,  364,  364,
      113,   49,   49,   49,   49,  364,  364,   40,  111,  364,
       49,   49,  110,  364,   49,  364,  364,  114,   49,  115,
       49,   49,  280,  364,  174,  121,  364,  117,   49,  118,
      119,   49,  175,  116,  364,  120,  364,  123,   44,   49,
       97,   49,  122,  124,  131,  364,   91,   91,   91,   87,

       49,  142,  364,  141,  364,  364,  171,   49,  125,   49,
       49,  126,  135,  135,  135,  136,  140,  139,  234,  137,
      167,  167,  167,  138,  137,  137,  137,  137,  137,  137,
      364,  364,  364,  364,  364,   49,   49,   49,   49,   49,
      364,  364,  364,  364,  143,   49,   49,   49,   49,   84,
      364,  364,  147,  206,  144,   49,   49,  145,  149,  364,
      148,  364,  364,  146,   49,  171,   49,   49,  364,  150,
      151,   97,   49,   49,  364,  364,  152,  153,  364,   49,
       49,  155,   84,   49,  364,  156,  161,  364,  154,   49,
      364,  173,   49,  159,  364,   49,  164,  364,  171,   49,

      157,  158,   49,  160,  364,  172,  364,  169,  174,   49,
      173,   49,  165,  162,  364,  364,  175,  364,  364,   49,
       49,  163,   49,   49,   49,  364,  364,  364,  129,  177,
       49,   49,   49,  181,   56,  184,  364,  178,  364,  176,
      180,   49,  179,   49,  364,  183,  187,  364,  364,   49,
      364,   97,   49,   49,  188,   49,  185,  182,  364,  364,
      364,   90,  186,   49,   49,   49,  364,  364,  364,  364,
      129,   49,   49,   49,   49,  189,  364,  191,  196,  364,
      364,   49,  192,  197,   49,   49,  364,  190,  364,  194,
      364,   49,  193,   49,  195,   49,  127,  203,  198,  167,

      167,  167,  208,  199,  200,  207,  207,  207,   84,  364,
      364,  209,  209,  209,   49,   49,  364,  364,  201,  364,
      364,   49,   49,  364,   49,   49,  364,  210,   49,  364,
      236,   49,  364,  211,   49,  214,  364,   49,  138,  364,
      259,   49,  364,  212,   49,  213,  215,   49,  138,   97,
      364,  364,  364,  216,  219,   49,   49,   49,  364,  364,
       94,  217,  364,   49,   49,  218,  364,   49,  220,  364,
      364,   49,   92,  224,   49,   49,   88,  222,  236,  364,
      364,  221,  364,  223,   49,   49,  138,   49,  227,   86,
      364,  225,   36,   84,  226,   49,  233,  233,  233,   53,

      364,  228,   52,  231,  208,   49,  229,  237,  230,  207,
      207,  207,   51,  209,  209,  209,  209,  209,  209,  364,
      364,  232,  364,  364,   49,   49,  364,   49,   49,  364,
      364,   49,   37,  364,   49,   49,  364,  238,   49,   36,
      364,   49,  364,  364,  241,   49,  364,   49,  240,  364,
      364,  239,  242,  364,   49,  364,  364,  364,  244,  364,
       49,   49,  243,  364,  245,  364,  364,  364,   49,  247,
       49,   49,   49,  248,  364,  260,  260,  260,  364,   49,
      246,  249,  250,   49,  364,  364,  364,  256,  364,   49,
       49,   49,  364,  251,  364,  257,  233,  233,  233,  252,

      255,  364,  254,  364,  364,  364,   49,  253,   49,   49,
       49,  364,  364,  364,  364,  364,   49,   49,  364,   49,
       49,  271,  364,   49,  263,  364,  256,   49,  265,  264,
       49,  364,  261,  262,  257,  364,   49,  364,  364,  266,
      267,  268,   49,   49,  269,  270,  364,  364,  364,  273,
      278,   49,  364,   49,  236,  272,   56,   49,  364,  279,
      279,  279,  138,   49,  138,  364,  281,  274,  260,  260,
      260,  364,  364,  364,  364,  364,   49,  275,  276,   49,
       49,  364,  364,  277,  364,  364,   49,   49,  364,   49,
       49,  364,  282,  284,  364,  364,  283,  364,  364,   49,

       49,  364,   49,  364,  364,  286,  291,  364,   49,  288,
      364,  364,   49,  364,  364,   49,  285,  287,   49,   49,
      364,  289,  364,  364,  278,   49,  364,  290,  293,  279,
      279,  279,  292,  279,  279,  279,  364,  364,  295,  297,
      297,  297,   49,  364,  294,  364,  364,  364,   49,  364,
       49,   49,   49,  364,   49,  298,  364,  364,   49,  299,
      364,   49,   49,  364,  364,   49,  364,  301,   49,   49,
      364,   49,  364,  364,  364,   49,  297,  297,  297,  304,
      364,  364,  300,  302,  364,  303,   49,  138,  364,  305,
      306,  309,  364,   49,  364,  364,  364,   49,  308,   49,

       49,   49,  364,  364,  364,  364,  364,   49,   49,   49,
       49,   49,  364,  364,  364,  364,  364,   49,   49,   49,
       49,  312,  364,  364,  310,  364,  313,  315,   49,  364,
       49,  318,  364,  316,   49,  320,  364,  317,  311,  324,
      364,   49,  364,  323,  364,   49,  364,  319,  364,  322,
      364,   49,  364,   49,  325,   49,  364,   49,  364,  364,
      364,   49,  364,   49,  329,  328,  364,  330,  364,  364,
      364,  326,  333,  331,   49,   49,  364,  364,  364,  364,
      364,   49,   49,   49,   49,  332,  364,  336,  364,  364,
      364,   49,  364,   49,   49,  338,  364,   49,  364,  364,

      364,   49,  337,  344,  335,   49,  342,  364,  339,  343,
      340,  364,   49,  364,  345,  364,   49,  364,   49,  350,
      364,  364,   49,  364,  364,   49,   49,  364,   49,   49,
      349,  364,  346,  364,  364,  364,  347,  364,   49,   49,
       49,  364,  352,  364,  364,  364,  348,  364,   49,   49,
      351,  364,  354,  364,  364,  364,   49,  364,   49,   49,
       49,  364,   49,  353,  355,  356,   49,  364,  364,  359,
      364,  364,   49,  357,  364,   49,   49,  364,  364,  358,
      364,  364,  364,  364,  364,  364,  364,  364,  360,  363,
      364,  364,  364,  361,  364,  364,  362,   38,   38,  364,

       38,   38,   38,   38,   38,   38,   38,   41,   41,  364,
       41,   41,   41,   41,   41,   41,   41,   42,  364,   42,
       42,   42,   42,   42,   42,   42,   42,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   46,   46,   46,
       46,   46,   46,   55,   55,   55,   83,   83,   83,   83,
       96,   96,   96,  128,  128,  364,  128,  128,  128,  128,
      128,  128,  128,  132,  364,  132,  132,  133,  133,  133,
      134,  364,  134,  166,  166,  168,  364,  168,  168,  168,
      168,  170,  170,  170,  202,  202,  202,  202,  204,  204,
      204,  205,  205,  205,  235,  235,  235,  364,  235,  258,

      258,  258,  296,  296,  296,  314,  314,  314,  327,  327,
      327,  341,  341,  341,    5,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364
    } ;

static yyconst flex_int16_t yy_chk[1261] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       10,   14,   15,   20,   15,   15,   15,   15,   20,   22,

       21,  334,   14,   21,   22,   16,   10,   16,   16,   16,
       16,   23,   24,   25,   38,   22,   23,   24,   25,   28,
       26,   43,  327,   27,   28,   26,   15,   25,   27,   29,
       38,   46,   43,   23,   29,   25,   46,   24,   26,   27,
       40,   23,   24,   30,   25,   24,   54,   31,   30,   28,
       27,   26,   31,   45,   33,   34,   40,   30,   29,   33,
       34,   47,   47,   47,   45,   31,   57,   87,   58,   59,
       33,   57,   34,   58,   59,   54,   31,   32,   87,  321,
       60,   89,   32,   33,   48,   60,   48,   48,   48,   48,
       61,   32,   89,   90,   60,   61,   63,   57,   58,   32,

       59,   63,  314,  307,   90,   65,   32,   32,   32,   50,
       65,   50,   50,   50,   50,   62,  296,   64,   50,   63,
       62,   61,   64,   50,   50,   50,   50,   50,   50,   62,
       66,   67,   65,   62,   68,   66,   67,  280,   70,   68,
       64,   85,   64,   70,   66,   69,   69,   71,   72,   73,
       69,   69,   71,   72,   73,   74,   75,   85,   68,   77,
       74,   75,   67,   78,   77,   76,   80,   70,   78,   71,
       76,   80,  258,   79,  138,   77,   81,   73,   79,   73,
       75,   81,  138,   72,   82,   76,  101,   79,  130,   82,
      234,  101,   78,   80,   91,   98,   91,   91,   91,  130,

       98,  101,   99,  100,  100,  108,  205,   99,   81,  100,
      108,   82,   97,   97,   97,   97,   99,   98,  204,   97,
      131,  131,  131,   97,   97,   97,   97,   97,   97,   97,
      102,  103,  104,  105,  106,  102,  103,  104,  105,  106,
      107,  109,  110,  111,  102,  107,  109,  110,  111,  202,
      112,  113,  106,  171,  103,  112,  113,  104,  109,  114,
      107,  115,  116,  105,  114,  170,  115,  116,  117,  110,
      111,  169,  168,  117,  118,  119,  112,  112,  120,  118,
      119,  115,  166,  120,  122,  116,  121,  121,  114,  122,
      123,  137,  121,  119,  125,  123,  124,  124,  134,  125,

      117,  118,  124,  120,  126,  135,  139,  133,  174,  126,
      135,  139,  125,  122,  140,  141,  174,  142,  143,  140,
      141,  123,  142,  143,  132,  144,  145,  146,  129,  140,
      144,  145,  146,  143,   96,  147,  147,  141,  148,  139,
      142,  147,  141,  148,  149,  146,  150,  150,  152,  149,
      151,   94,  150,  152,  151,  151,  148,  145,  153,  154,
      155,   88,  149,  153,  154,  155,  156,  157,  158,  160,
       86,  156,  157,  158,  160,  152,  161,  154,  159,  159,
      162,  161,  155,  160,  159,  162,  163,  153,  164,  157,
      165,  163,  156,  164,  158,  165,   84,  167,  161,  167,

      167,  167,  175,  161,  163,  172,  172,  172,   83,  176,
      177,  175,  175,  175,  176,  177,  178,  180,  164,  179,
      182,  178,  180,  181,  179,  182,  183,  176,  181,  184,
      206,  183,  185,  177,  184,  180,  186,  185,  206,  187,
      235,  186,  188,  178,  187,  179,  181,  188,  235,   56,
      189,  190,  191,  184,  187,  189,  190,  191,  192,  193,
       55,  185,  194,  192,  193,  186,  196,  194,  187,  195,
      197,  196,   49,  193,  195,  197,   44,  190,  236,  198,
      200,  189,  199,  192,  198,  200,  236,  199,  196,   42,
      201,  194,   36,   35,  195,  201,  203,  203,  203,   19,

      210,  197,   18,  200,  208,  210,  198,  207,  199,  207,
      207,  207,   17,  208,  208,  208,  209,  209,  209,  211,
      212,  201,  213,  214,  211,  212,  215,  213,  214,  217,
      216,  215,    9,  218,  217,  216,  219,  211,  218,    7,
      220,  219,  221,    5,  216,  220,    0,  221,  215,  222,
        0,  213,  216,    0,  222,  223,  224,    0,  220,    0,
      223,  224,  219,  225,  221,  226,  227,  228,  225,  223,
      226,  227,  228,  224,  229,  237,  237,  237,  230,  229,
      222,  225,  226,  230,  231,  238,  232,  233,    0,  231,
      238,  232,    0,  227,    0,  233,  233,  233,  233,  228,

      232,  239,  231,  240,  241,  242,  239,  230,  240,  241,
      242,  243,  244,    0,  247,  245,  243,  244,  246,  247,
      245,  248,  248,  246,  241,  249,  256,  248,  243,  242,
      249,  250,  239,  240,  256,    0,  250,  251,  252,  244,
      244,  245,  251,  252,  246,  247,  253,    0,  254,  250,
      257,  253,  255,  254,  259,  249,  341,  255,  261,  257,
      257,  257,  259,  261,  341,    0,  260,  252,  260,  260,
      260,  262,    0,    0,  263,  264,  262,  253,  254,  263,
      264,  265,  266,  255,  268,  267,  265,  266,    0,  268,
      267,    0,  262,  264,  269,  270,  263,  271,    0,  269,

      270,    0,  271,  273,    0,  266,  272,  272,  273,  268,
      274,    0,  272,  275,  276,  274,  265,  267,  275,  276,
      277,  270,    0,    0,  278,  277,    0,  271,  274,  279,
      279,  279,  273,  278,  278,  278,    0,  282,  277,  281,
      281,  281,  282,  283,  276,  284,  285,  286,  283,  287,
      284,  285,  286,  288,  287,  282,  289,  290,  288,  283,
      291,  289,  290,  292,  293,  291,  294,  287,  292,  293,
      295,  294,    0,    0,    0,  295,  297,  297,  297,  290,
        0,  298,  286,  288,    0,  289,  298,  297,  299,  291,
      291,  300,  300,  299,  301,  302,  303,  300,  298,  301,

      302,  303,  304,  305,  306,  308,  310,  304,  305,  306,
      308,  310,  309,  311,  312,  313,    0,  309,  311,  312,
      313,  305,    0,  315,  301,  316,  306,  309,  315,  318,
      316,  311,    0,  309,  318,  313,  319,  310,  304,  317,
      317,  319,    0,  316,    0,  317,  320,  312,  322,  315,
      323,  320,  324,  322,  319,  323,  325,  324,  326,    0,
        0,  325,    0,  326,  323,  322,    0,  324,    0,  328,
      329,  320,  326,  324,  328,  329,  330,  331,  332,  333,
        0,  330,  331,  332,  333,  325,  335,  329,  336,  338,
        0,  335,  337,  336,  338,  331,  339,  337,    0,    0,

      340,  339,  330,  338,  328,  340,  336,  342,  332,  337,
      333,  343,  342,  344,  339,    0,  343,  347,  344,  345,
      345,  346,  347,  348,  349,  345,  346,    0,  348,  349,
      344,    0,  340,  350,  351,  352,  342,    0,  350,  351,
      352,    0,  349,  353,  354,    0,  343,    0,  353,  354,
      346,  355,  351,  356,  357,  358,  355,  359,  356,  357,
      358,  360,  359,  350,  352,  353,  360,  361,    0,  358,
      363,  362,  361,  356,    0,  363,  362,    0,    0,  357,
        0,    0,    0,    0,    0,    0,    0,    0,  359,  362,
        0,    0,    0,  360,    0,    0,  361,  365,  365,    0,

      365,  365,  365,  365,  365,  365,  365,  366,  366,    0,
      366,  366,  366,  366,  366,  366,  366,  367,    0,  367,
      367,  367,  367,  367,  367,  367,  367,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  369,  369,  369,
      369,  369,  369,  370,  370,  370,  371,  371,  371,  371,
      372,  372,  372,  373,  373,    0,  373,  373,  373,  373,
      373,  373,  373,  374,    0,  374,  374,  375,  375,  375,
      376,    0,  376,  377,  377,  378,    0,  378,  378,  378,
      378,  379,  379,  379,  380,  380,  380,  380,  381,  381,
      381,  382,  382,  382,  383,  383,  383,    0,  383,  384,

      384,  384,  385,  385,  385,  386,  386,  386,  387,  387,
      387,  388,  388,  388,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int rules__flex_debug;
int rules__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *rules_text;
#line 1 "rule-scan.l"
#line 2 "rule-scan.l"
#include <string.h>
#include <string>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "RuleMatcher.h"
#include "IPAddr.h"
#include "util.h"
#include "rule-parse.h"

int rules_line_number = 0;

#line 891 "/home/benjamin/Bro/bro-2.3.1/build/src/rule-scan.cc"

#define INITIAL 0
#define PS 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int rules_lex_destroy (void );

int rules_get_debug (void );

void rules_set_debug (int debug_flag  );

YY_EXTRA_TYPE rules_get_extra (void );

void rules_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *rules_get_in (void );

void rules_set_in  (FILE * in_str  );

FILE *rules_get_out (void );

void rules_set_out  (FILE * out_str  );

int rules_get_leng (void );

char *rules_get_text (void );

int rules_get_lineno (void );

void rules_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int rules_wrap (void );
#else
extern int rules_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( rules_text, rules_leng, 1, rules_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( rules_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( rules_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, rules_in))==0 && ferror(rules_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(rules_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int rules_lex (void);

#define YY_DECL int rules_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after rules_text and rules_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 34 "rule-scan.l"


#line 1080 "/home/benjamin/Bro/bro-2.3.1/build/src/rule-scan.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! rules_in )
			rules_in = stdin;

		if ( ! rules_out )
			rules_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			rules_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				rules__create_buffer(rules_in,YY_BUF_SIZE );
		}

		rules__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of rules_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 365 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1215 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "rule-scan.l"
/* eat comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 38 "rule-scan.l"
/* eat white space */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 39 "rule-scan.l"
/* eat any meta-data/comments */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 40 "rule-scan.l"
++rules_line_number;
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 43 "rule-scan.l"
{
	rules_lval.prefixval = new IPPrefix(IPAddr(extract_ip(rules_text)), 128, true);
	return TOK_IP6;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "rule-scan.l"
{
	int len = 0;
	string ip = extract_ip_and_len(rules_text, &len);
	rules_lval.prefixval = new IPPrefix(IPAddr(ip), len, true);
	return TOK_IP6;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "rule-scan.l"
return rules_text[0];
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 57 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::LE; return TOK_COMP; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 58 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::GE; return TOK_COMP; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 59 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::LT; return TOK_COMP; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 60 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::GT; return TOK_COMP; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::EQ; return TOK_COMP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::EQ; return TOK_COMP; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::NE; return TOK_COMP; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::IP; return TOK_PROT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 66 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::IPv6; return TOK_PROT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 67 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::ICMP; return TOK_PROT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 68 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::ICMPv6; return TOK_PROT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::TCP; return TOK_PROT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "rule-scan.l"
{ rules_lval.val = RuleHdrTest::UDP; return TOK_PROT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 72 "rule-scan.l"
{ rules_lval.val = true; return TOK_BOOL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 73 "rule-scan.l"
{ rules_lval.val = false; return TOK_BOOL; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "rule-scan.l"
{
		rules_lval.val = RuleConditionTCPState::STATE_ESTABLISHED;
		return TOK_TCP_STATE_SYM;
		}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "rule-scan.l"
{
		rules_lval.val = RuleConditionTCPState::STATE_ORIG;
		return TOK_TCP_STATE_SYM;
		}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "rule-scan.l"
{
		rules_lval.val = RuleConditionTCPState::STATE_RESP;
		return TOK_TCP_STATE_SYM;
		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 90 "rule-scan.l"
{
		rules_lval.val = RuleConditionTCPState::STATE_STATELESS;
		return TOK_TCP_STATE_SYM;
		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "rule-scan.l"
{
		rules_lval.val = RuleConditionIPOptions::OPT_LSRR;
		return TOK_IP_OPTION_SYM;
		}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "rule-scan.l"
{
		rules_lval.val = RuleConditionIPOptions::OPT_LSRRE;
		return TOK_IP_OPTION_SYM;
		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 105 "rule-scan.l"
{
		rules_lval.val = RuleConditionIPOptions::OPT_RR;
		return TOK_IP_OPTION_SYM;
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 110 "rule-scan.l"
{
		rules_lval.val = RuleConditionIPOptions::OPT_SSRR;
		return TOK_IP_OPTION_SYM;
		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 115 "rule-scan.l"
return TOK_DISABLE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "rule-scan.l"
return TOK_DST_IP;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "rule-scan.l"
return TOK_DST_PORT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "rule-scan.l"
return TOK_ENABLE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "rule-scan.l"
return TOK_EVAL;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "rule-scan.l"
return TOK_EVENT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "rule-scan.l"
return TOK_MIME;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "rule-scan.l"
return TOK_HEADER;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "rule-scan.l"
return TOK_IP_OPTIONS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "rule-scan.l"
return TOK_IP_PROTO;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "rule-scan.l"
return TOK_PAYLOAD_SIZE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 126 "rule-scan.l"
return TOK_REQUIRES_SIGNATURE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "rule-scan.l"
return TOK_REQUIRES_REVERSE_SIGNATURE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "rule-scan.l"
return TOK_SIGNATURE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "rule-scan.l"
return TOK_SAME_IP;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "rule-scan.l"
return TOK_SRC_IP;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "rule-scan.l"
return TOK_SRC_PORT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "rule-scan.l"
return TOK_TCP_STATE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "rule-scan.l"
return TOK_ACTIVE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "rule-scan.l"
{ rules_lval.val = Rule::FILE_MAGIC; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "rule-scan.l"
{ rules_lval.val = Rule::PAYLOAD; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 137 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REQUEST; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 138 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REQUEST_BODY; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 139 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REPLY_BODY; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 140 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REPLY_BODY; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 141 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REQUEST_HEADER; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 142 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REPLY_HEADER; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 143 "rule-scan.l"
{ rules_lval.val = Rule::HTTP_REQUEST; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 145 "rule-scan.l"
{ rules_lval.val = Rule::FTP; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "rule-scan.l"
{ rules_lval.val = Rule::FINGER; return TOK_PATTERN_TYPE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 148 "rule-scan.l"
{
	char* s = strchr(rules_text, '/');
	*s++ = '\0';

	rules_lval.mval.mask = ~((1 << (32 - atoi(s))) - 1);
	rules_lval.mval.val = ntohl(inet_addr(rules_text)) & rules_lval.mval.mask;

	return TOK_IP;
	}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 158 "rule-scan.l"
{
	rules_lval.mval.val = ntohl(inet_addr(rules_text));
	rules_lval.mval.mask = 0xffffffff;
	return TOK_IP;
	}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 164 "rule-scan.l"
{
	rules_lval.val = (uint32) atoi(rules_text);
	return TOK_INT;
	}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 169 "rule-scan.l"
{
	rules_lval.val = (uint32) strtol(rules_text, 0, 16);
	return TOK_INT;
	}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 175 "rule-scan.l"
{
	*(rules_text + strlen(rules_text) - 1) = '\0';
	rules_lval.str = rules_text + 1;
	return TOK_STRING;
	}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 181 "rule-scan.l"
{
	rules_lval.str = rules_text;
	return TOK_IDENT;
	}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 186 "rule-scan.l"
{
	rules_lval.str = rules_text;
	return TOK_POLICY_SYMBOL;
	}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 191 "rule-scan.l"
{
	*(rules_text + strlen(rules_text) - 1) = '\0';
	rules_lval.str = rules_text + 1;
	return TOK_PATTERN;
	}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 197 "rule-scan.l"
rules_error("unrecognized character in input", rules_text);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 199 "rule-scan.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1581 "/home/benjamin/Bro/bro-2.3.1/build/src/rule-scan.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed rules_in at a new source and called
			 * rules_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = rules_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( rules_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * rules_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of rules_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					rules_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			rules_restart(rules_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) rules_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 365 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 365 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 364);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					rules_restart(rules_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( rules_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve rules_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void rules_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        rules_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            rules__create_buffer(rules_in,YY_BUF_SIZE );
	}

	rules__init_buffer(YY_CURRENT_BUFFER,input_file );
	rules__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void rules__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		rules_pop_buffer_state();
	 *		rules_push_buffer_state(new_buffer);
     */
	rules_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	rules__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (rules_wrap()) processing, but the only time this flag
	 * is looked at is after rules_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void rules__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	rules_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE rules__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) rules_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) rules_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules__create_buffer()" );

	b->yy_is_our_buffer = 1;

	rules__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with rules__create_buffer()
 * 
 */
    void rules__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		rules_free((void *) b->yy_ch_buf  );

	rules_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a rules_restart() or at EOF.
 */
    static void rules__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	rules__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then rules__init_buffer was _probably_
     * called from rules_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void rules__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		rules__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void rules_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	rules_ensure_buffer_stack();

	/* This block is copied from rules__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from rules__switch_to_buffer. */
	rules__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void rules_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	rules__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		rules__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void rules_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)rules_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rules_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)rules_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in rules_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE rules__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) rules_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in rules__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	rules__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to rules_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       rules__scan_bytes() instead.
 */
YY_BUFFER_STATE rules__scan_string (yyconst char * yystr )
{
    
	return rules__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to rules_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE rules__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) rules_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in rules__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = rules__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in rules__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up rules_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		rules_text[rules_leng] = (yy_hold_char); \
		(yy_c_buf_p) = rules_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		rules_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int rules_get_lineno  (void)
{
        
    return rules_lineno;
}

/** Get the input stream.
 * 
 */
FILE *rules_get_in  (void)
{
        return rules_in;
}

/** Get the output stream.
 * 
 */
FILE *rules_get_out  (void)
{
        return rules_out;
}

/** Get the length of the current token.
 * 
 */
int rules_get_leng  (void)
{
        return rules_leng;
}

/** Get the current token.
 * 
 */

char *rules_get_text  (void)
{
        return rules_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void rules_set_lineno (int  line_number )
{
    
    rules_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see rules__switch_to_buffer
 */
void rules_set_in (FILE *  in_str )
{
        rules_in = in_str ;
}

void rules_set_out (FILE *  out_str )
{
        rules_out = out_str ;
}

int rules_get_debug  (void)
{
        return rules__flex_debug;
}

void rules_set_debug (int  bdebug )
{
        rules__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from rules_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    rules_in = stdin;
    rules_out = stdout;
#else
    rules_in = (FILE *) 0;
    rules_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * rules_lex_init()
     */
    return 0;
}

/* rules_lex_destroy is for both reentrant and non-reentrant scanners. */
int rules_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		rules__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		rules_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	rules_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * rules_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *rules_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *rules_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void rules_free (void * ptr )
{
	free( (char *) ptr );	/* see rules_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 199 "rule-scan.l"



// We're about to parse a Bro policy-layer symbol.
void begin_PS()
	{
	BEGIN(PS);
	}

void end_PS()
	{
	BEGIN(INITIAL);
	}

