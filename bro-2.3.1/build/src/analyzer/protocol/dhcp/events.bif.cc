// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dhcp/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr dhcp_discover; 
void BifEvent::generate_dhcp_discover(analyzer::Analyzer* analyzer, Connection* c, Val* msg, AddrVal* req_addr, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_discover is NULL, which should happen *before*
	// BifEvent::generate_dhcp_discover is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(req_addr);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_discover, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_offer; 
void BifEvent::generate_dhcp_offer(analyzer::Analyzer* analyzer, Connection* c, Val* msg, AddrVal* mask, Val* router, double lease, AddrVal* serv_addr, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_offer is NULL, which should happen *before*
	// BifEvent::generate_dhcp_offer is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(mask);
	vl->append(router);
	vl->append(new IntervalVal(lease, Seconds));
	vl->append(serv_addr);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_offer, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_request; 
void BifEvent::generate_dhcp_request(analyzer::Analyzer* analyzer, Connection* c, Val* msg, AddrVal* req_addr, AddrVal* serv_addr, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_request is NULL, which should happen *before*
	// BifEvent::generate_dhcp_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(req_addr);
	vl->append(serv_addr);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_decline; 
void BifEvent::generate_dhcp_decline(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_decline is NULL, which should happen *before*
	// BifEvent::generate_dhcp_decline is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_decline, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_ack; 
void BifEvent::generate_dhcp_ack(analyzer::Analyzer* analyzer, Connection* c, Val* msg, AddrVal* mask, Val* router, double lease, AddrVal* serv_addr, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_ack is NULL, which should happen *before*
	// BifEvent::generate_dhcp_ack is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(mask);
	vl->append(router);
	vl->append(new IntervalVal(lease, Seconds));
	vl->append(serv_addr);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_ack, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_nak; 
void BifEvent::generate_dhcp_nak(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_nak is NULL, which should happen *before*
	// BifEvent::generate_dhcp_nak is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_nak, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_release; 
void BifEvent::generate_dhcp_release(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_release is NULL, which should happen *before*
	// BifEvent::generate_dhcp_release is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_release, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dhcp_inform; 
void BifEvent::generate_dhcp_inform(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* host_name)
	{
	// Note that it is intentional that here we do not
	// check if ::dhcp_inform is NULL, which should happen *before*
	// BifEvent::generate_dhcp_inform is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(msg);
	vl->append(host_name);

	mgr.QueueEvent(::dhcp_inform, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
