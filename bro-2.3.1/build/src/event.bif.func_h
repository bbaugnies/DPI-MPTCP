// This file was automatically generated by bifcl from event.bif.

namespace BifEvent {  void generate_bro_init(analyzer::Analyzer* analyzer);  } 
namespace BifEvent {  void generate_bro_done(analyzer::Analyzer* analyzer);  } 
namespace BifEvent {  void generate_new_connection(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_tunnel_changed(analyzer::Analyzer* analyzer, Connection* c, Val* e);  } 
namespace BifEvent {  void generate_connection_timeout(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_connection_state_remove(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_connection_reused(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_connection_status_update(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_connection_flow_label_changed(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t old_label, bro_uint_t new_label);  } 
namespace BifEvent {  void generate_connection_external(analyzer::Analyzer* analyzer, Connection* c, StringVal* tag);  } 
namespace BifEvent {  void generate_udp_session_done(analyzer::Analyzer* analyzer, Connection* u);  } 
namespace BifEvent {  void generate_scheduled_analyzer_applied(analyzer::Analyzer* analyzer, Connection* c, Val* a);  } 
namespace BifEvent {  void generate_new_packet(analyzer::Analyzer* analyzer, Connection* c, Val* p);  } 
namespace BifEvent {  void generate_ipv6_ext_headers(analyzer::Analyzer* analyzer, Connection* c, Val* p);  } 
namespace BifEvent {  void generate_esp_packet(analyzer::Analyzer* analyzer, Val* p);  } 
namespace BifEvent {  void generate_mobile_ipv6_message(analyzer::Analyzer* analyzer, Val* p);  } 
namespace BifEvent {  void generate_packet_contents(analyzer::Analyzer* analyzer, Connection* c, StringVal* contents);  } 
namespace BifEvent {  void generate_rexmit_inconsistency(analyzer::Analyzer* analyzer, Connection* c, StringVal* t1, StringVal* t2);  } 
namespace BifEvent {  void generate_ack_above_hole(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_content_gap(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t seq, bro_uint_t length);  } 
namespace BifEvent {  void generate_gap_report(analyzer::Analyzer* analyzer, double dt, Val* info);  } 
namespace BifEvent {  void generate_protocol_confirmation(analyzer::Analyzer* analyzer, Connection* c, Val* atype, bro_uint_t aid);  } 
namespace BifEvent {  void generate_protocol_violation(analyzer::Analyzer* analyzer, Connection* c, Val* atype, bro_uint_t aid, StringVal* reason);  } 
namespace BifEvent {  void generate_conn_stats(analyzer::Analyzer* analyzer, Connection* c, Val* os, Val* rs);  } 
namespace BifEvent {  void generate_conn_weird(analyzer::Analyzer* analyzer, StringVal* name, Connection* c, StringVal* addl);  } 
namespace BifEvent {  void generate_flow_weird(analyzer::Analyzer* analyzer, StringVal* name, AddrVal* src, AddrVal* dst);  } 
namespace BifEvent {  void generate_net_weird(analyzer::Analyzer* analyzer, StringVal* name);  } 
namespace BifEvent {  void generate_load_sample(analyzer::Analyzer* analyzer, Val* samples, double CPU, bro_int_t dmem);  } 
namespace BifEvent {  void generate_signature_match(analyzer::Analyzer* analyzer, Val* state, StringVal* msg, StringVal* data);  } 
namespace BifEvent {  void generate_software_version_found(analyzer::Analyzer* analyzer, Connection* c, AddrVal* host, Val* s, StringVal* descr);  } 
namespace BifEvent {  void generate_software_parse_error(analyzer::Analyzer* analyzer, Connection* c, AddrVal* host, StringVal* descr);  } 
namespace BifEvent {  void generate_software_unparsed_version_found(analyzer::Analyzer* analyzer, Connection* c, AddrVal* host, StringVal* str);  } 
namespace BifEvent {  void generate_OS_version_found(analyzer::Analyzer* analyzer, Connection* c, AddrVal* host, Val* OS);  } 
namespace BifEvent {  void generate_remote_connection_established(analyzer::Analyzer* analyzer, Val* p);  } 
namespace BifEvent {  void generate_remote_connection_closed(analyzer::Analyzer* analyzer, Val* p);  } 
namespace BifEvent {  void generate_remote_connection_handshake_done(analyzer::Analyzer* analyzer, Val* p);  } 
namespace BifEvent {  void generate_remote_event_registered(analyzer::Analyzer* analyzer, Val* p, StringVal* name);  } 
namespace BifEvent {  void generate_remote_connection_error(analyzer::Analyzer* analyzer, Val* p, StringVal* reason);  } 
namespace BifEvent {  void generate_remote_capture_filter(analyzer::Analyzer* analyzer, Val* p, StringVal* filter);  } 
namespace BifEvent {  void generate_finished_send_state(analyzer::Analyzer* analyzer, Val* p);  } 
namespace BifEvent {  void generate_remote_state_inconsistency(analyzer::Analyzer* analyzer, StringVal* operation, StringVal* id, StringVal* expected_old, StringVal* real_old);  } 
namespace BifEvent {  void generate_remote_log(analyzer::Analyzer* analyzer, bro_uint_t level, bro_uint_t src, StringVal* msg);  } 
namespace BifEvent {  void generate_remote_log_peer(analyzer::Analyzer* analyzer, Val* p, bro_uint_t level, bro_uint_t src, StringVal* msg);  } 
namespace BifEvent {  void generate_remote_pong(analyzer::Analyzer* analyzer, Val* p, bro_uint_t seq, double d1, double d2, double d3);  } 
namespace BifEvent {  void generate_remote_state_access_performed(analyzer::Analyzer* analyzer, StringVal* id, Val* v);  } 
namespace BifEvent {  void generate_profiling_update(analyzer::Analyzer* analyzer, BroFile* f, int expensive);  } 
namespace BifEvent {  void generate_reporter_info(analyzer::Analyzer* analyzer, double t, StringVal* msg, StringVal* location);  } 
namespace BifEvent {  void generate_reporter_warning(analyzer::Analyzer* analyzer, double t, StringVal* msg, StringVal* location);  } 
namespace BifEvent {  void generate_reporter_error(analyzer::Analyzer* analyzer, double t, StringVal* msg, StringVal* location);  } 
namespace BifEvent {  void generate_bro_script_loaded(analyzer::Analyzer* analyzer, StringVal* path, bro_uint_t level);  } 
namespace BifEvent {  void generate_file_opened(analyzer::Analyzer* analyzer, BroFile* f);  } 
namespace BifEvent {  void generate_event_queue_flush_point(analyzer::Analyzer* analyzer);  } 
namespace BifEvent {  void generate_get_file_handle(analyzer::Analyzer* analyzer, Val* tag, Connection* c, int is_orig);  } 
namespace BifEvent {  void generate_file_new(analyzer::Analyzer* analyzer, Val* f);  } 
namespace BifEvent {  void generate_file_over_new_connection(analyzer::Analyzer* analyzer, Val* f, Connection* c, int is_orig);  } 
namespace BifEvent {  void generate_file_timeout(analyzer::Analyzer* analyzer, Val* f);  } 
namespace BifEvent {  void generate_file_gap(analyzer::Analyzer* analyzer, Val* f, bro_uint_t offset, bro_uint_t len);  } 
namespace BifEvent {  void generate_file_state_remove(analyzer::Analyzer* analyzer, Val* f);  } 
namespace BifEvent {  void generate_dns_mapping_valid(analyzer::Analyzer* analyzer, Val* dm);  } 
namespace BifEvent {  void generate_dns_mapping_unverified(analyzer::Analyzer* analyzer, Val* dm);  } 
namespace BifEvent {  void generate_dns_mapping_new_name(analyzer::Analyzer* analyzer, Val* dm);  } 
namespace BifEvent {  void generate_dns_mapping_lost_name(analyzer::Analyzer* analyzer, Val* dm);  } 
namespace BifEvent {  void generate_dns_mapping_altered(analyzer::Analyzer* analyzer, Val* dm, Val* old_addrs, Val* new_addrs);  } 
namespace BifEvent {  void generate_new_event(analyzer::Analyzer* analyzer, StringVal* name, Val* params);  } 
namespace BifEvent {  void generate_root_backdoor_signature_found(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_napster_signature_found(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_kazaa_signature_found(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_gaobot_signature_found(analyzer::Analyzer* analyzer, Connection* c);  } 
namespace BifEvent {  void generate_anonymization_mapping(analyzer::Analyzer* analyzer, AddrVal* orig, AddrVal* mapped);  } 
namespace BifEvent {  void generate_rotate_interval(analyzer::Analyzer* analyzer, BroFile* f);  } 
namespace BifEvent {  void generate_rotate_size(analyzer::Analyzer* analyzer, BroFile* f);  } 
namespace BifEvent {  void generate_print_hook(analyzer::Analyzer* analyzer, BroFile* f, StringVal* s);  } 
