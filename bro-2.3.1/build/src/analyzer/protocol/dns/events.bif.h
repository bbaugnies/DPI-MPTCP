// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dns/events.bif (plugin mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_dns_events_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_dns_events_bif
#define _home_benjamin_Bro_bro_2_3_1_build_src_analyzer_protocol_dns_events_bif
#include "bro-bif.h"
#endif
#endif

extern EventHandlerPtr dns_message; 
namespace BifEvent {  void generate_dns_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* msg, bro_uint_t len);  } 
extern EventHandlerPtr dns_request; 
namespace BifEvent {  void generate_dns_request(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* query, bro_uint_t qtype, bro_uint_t qclass);  } 
extern EventHandlerPtr dns_rejected; 
namespace BifEvent {  void generate_dns_rejected(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* query, bro_uint_t qtype, bro_uint_t qclass);  } 
extern EventHandlerPtr dns_query_reply; 
namespace BifEvent {  void generate_dns_query_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, StringVal* query, bro_uint_t qtype, bro_uint_t qclass);  } 
extern EventHandlerPtr dns_A_reply; 
namespace BifEvent {  void generate_dns_A_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, AddrVal* a);  } 
extern EventHandlerPtr dns_AAAA_reply; 
namespace BifEvent {  void generate_dns_AAAA_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, AddrVal* a);  } 
extern EventHandlerPtr dns_A6_reply; 
namespace BifEvent {  void generate_dns_A6_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, AddrVal* a);  } 
extern EventHandlerPtr dns_NS_reply; 
namespace BifEvent {  void generate_dns_NS_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, StringVal* name);  } 
extern EventHandlerPtr dns_CNAME_reply; 
namespace BifEvent {  void generate_dns_CNAME_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, StringVal* name);  } 
extern EventHandlerPtr dns_PTR_reply; 
namespace BifEvent {  void generate_dns_PTR_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, StringVal* name);  } 
extern EventHandlerPtr dns_SOA_reply; 
namespace BifEvent {  void generate_dns_SOA_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, Val* soa);  } 
extern EventHandlerPtr dns_WKS_reply; 
namespace BifEvent {  void generate_dns_WKS_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans);  } 
extern EventHandlerPtr dns_HINFO_reply; 
namespace BifEvent {  void generate_dns_HINFO_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans);  } 
extern EventHandlerPtr dns_MX_reply; 
namespace BifEvent {  void generate_dns_MX_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, StringVal* name, bro_uint_t preference);  } 
extern EventHandlerPtr dns_TXT_reply; 
namespace BifEvent {  void generate_dns_TXT_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, Val* strs);  } 
extern EventHandlerPtr dns_SRV_reply; 
namespace BifEvent {  void generate_dns_SRV_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans, StringVal* target, bro_uint_t priority, bro_uint_t weight, bro_uint_t p);  } 
extern EventHandlerPtr dns_unknown_reply; 
namespace BifEvent {  void generate_dns_unknown_reply(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans);  } 
extern EventHandlerPtr dns_EDNS_addl; 
namespace BifEvent {  void generate_dns_EDNS_addl(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans);  } 
extern EventHandlerPtr dns_TSIG_addl; 
namespace BifEvent {  void generate_dns_TSIG_addl(analyzer::Analyzer* analyzer, Connection* c, Val* msg, Val* ans);  } 
extern EventHandlerPtr dns_end; 
namespace BifEvent {  void generate_dns_end(analyzer::Analyzer* analyzer, Connection* c, Val* msg);  } 
extern EventHandlerPtr dns_full_request; 
namespace BifEvent {  void generate_dns_full_request(analyzer::Analyzer* analyzer);  } 
extern EventHandlerPtr non_dns_request; 
namespace BifEvent {  void generate_non_dns_request(analyzer::Analyzer* analyzer, Connection* c, StringVal* msg);  } 

#endif
