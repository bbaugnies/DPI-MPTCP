// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/dce_rpc.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_dce_rpc_dce_rpc_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_dce_rpc_dce_rpc_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "events.bif.h"

namespace binpac {

namespace DCE_RPC {
class ContextDCE_RPC;
enum dce_rpc_ptype {
	DCE_RPC_REQUEST,
	DCE_RPC_PING,
	DCE_RPC_RESPONSE,
	DCE_RPC_FAULT,
	DCE_RPC_WORKING,
	DCE_RPC_NOCALL,
	DCE_RPC_REJECT,
	DCE_RPC_ACK,
	DCE_RPC_CL_CANCEL,
	DCE_RPC_FACK,
	DCE_RPC_CANCEL_ACK,
	DCE_RPC_BIND,
	DCE_RPC_BIND_ACK,
	DCE_RPC_BIND_NAK,
	DCE_RPC_ALTER_CONTEXT,
	DCE_RPC_ALTER_CONTEXT_RESP,
	DCE_RPC_SHUTDOWN,
	DCE_RPC_CO_CANCEL,
	DCE_RPC_ORPHANED,
};
class uuid;
class context_handle;
class rpc_if_id_t;
class NDR_Format;
class DCE_RPC_Header;
class p_context_id_t;
class p_syntax_id_t;
class p_cont_elem_t;
class p_cont_list_t;
class DCE_RPC_Bind;
class DCE_RPC_AlterContext;
class DCE_RPC_Request;
class DCE_RPC_Response;
class DCE_RPC_Body;
class DCE_RPC_Auth;
class epmapper_lookup_req;
class epmapper_map_req;
class epm_uuid;
class epm_port;
class epm_ip;
enum epm_protocol {
	EPM_PROTOCOL_TCP = 7,
	EPM_PROTOCOL_UDP = 8,
	EPM_PROTOCOL_IP = 9,
	EPM_PROTOCOL_UUID = 13,
};
class epm_lhs_data;
class epm_rhs_data;
class epm_lhs;
class epm_rhs;
class epm_floor;
class epm_tower;
class epm_twr_p;
class epm_tower_array;
class epmapper_map_resp;
class DCE_RPC_PDU;
class DCE_RPC_Conn;
class DCE_RPC_Flow;
} // namespace DCE_RPC

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace DCE_RPC {

class ContextDCE_RPC
{
public:
	ContextDCE_RPC(DCE_RPC_Conn * connection, DCE_RPC_Flow * flow, FlowBuffer * flow_buffer);
	~ContextDCE_RPC();
	
	// Member access functions
	DCE_RPC_Conn * connection() const { return connection_; }
	DCE_RPC_Flow * flow() const { return flow_; }
	FlowBuffer * flow_buffer() const { return flow_buffer_; }
	
protected:
	DCE_RPC_Conn * connection_;
	DCE_RPC_Flow * flow_;
	FlowBuffer * flow_buffer_;
};


class context_handle
{
public:
	context_handle();
	~context_handle();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 cxt_attributes() const { return cxt_attributes_; }
	bytestring const & cxt_uuid() const { return cxt_uuid_; }
	
protected:
	uint32 cxt_attributes_;
	bytestring cxt_uuid_;
};


class rpc_if_id_t
{
public:
	rpc_if_id_t();
	~rpc_if_id_t();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	bytestring const & if_uuid() const { return if_uuid_; }
	uint16 vers_major() const { return vers_major_; }
	uint16 vers_minor() const { return vers_minor_; }
	
protected:
	bytestring if_uuid_;
	uint16 vers_major_;
	uint16 vers_minor_;
};


class NDR_Format
{
public:
	NDR_Format();
	~NDR_Format();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 intchar() const { return intchar_; }
	uint8 floatspec() const { return floatspec_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 intchar_;
	uint8 floatspec_;
	int byteorder_;
};


class DCE_RPC_Header
{
public:
	DCE_RPC_Header();
	~DCE_RPC_Header();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 rpc_vers() const { return rpc_vers_; }
	uint8 rpc_vers_minor() const { return rpc_vers_minor_; }
	uint8 PTYPE() const { return PTYPE_; }
	uint8 pfc_flags() const { return pfc_flags_; }
	NDR_Format * packed_drep() const { return packed_drep_; }
	uint16 frag_length() const { return frag_length_; }
	uint16 auth_length() const { return auth_length_; }
	uint32 call_id() const { return call_id_; }
	int byteorder() const { return byteorder_; }
	int frag() const { return frag_; }
	int lastfrag() const { return lastfrag_; }
	
protected:
	uint8 rpc_vers_;
	uint8 rpc_vers_minor_;
	uint8 PTYPE_;
	uint8 pfc_flags_;
	NDR_Format * packed_drep_;
	uint16 frag_length_;
	uint16 auth_length_;
	uint32 call_id_;
	int byteorder_;
	int frag_;
	int lastfrag_;
};


class p_context_id_t
{
public:
	p_context_id_t();
	~p_context_id_t();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 val() const { return val_; }
	
protected:
	uint16 val_;
};


class p_syntax_id_t
{
public:
	p_syntax_id_t();
	~p_syntax_id_t();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	bytestring const & if_uuid() const { return if_uuid_; }
	uint32 if_version() const { return if_version_; }
	
protected:
	bytestring if_uuid_;
	uint32 if_version_;
};


class p_cont_elem_t
{
public:
	p_cont_elem_t();
	~p_cont_elem_t();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 p_cont_id() const { return p_cont_id_; }
	uint8 n_transfer_syn() const { return n_transfer_syn_; }
	p_syntax_id_t * abstract_syntax() const { return abstract_syntax_; }
	vector<p_syntax_id_t *> * transfer_syntaxes() const { return transfer_syntaxes_; }
	
protected:
	uint16 p_cont_id_;
	uint8 n_transfer_syn_;
	p_syntax_id_t * abstract_syntax_;
	vector<p_syntax_id_t *> * transfer_syntaxes_;
	p_syntax_id_t * transfer_syntaxes__elem_;
};


class p_cont_list_t
{
public:
	p_cont_list_t();
	~p_cont_list_t();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint8 n_context_elem() const { return n_context_elem_; }
	vector<p_cont_elem_t *> * p_cont_elem() const { return p_cont_elem_; }
	
protected:
	uint8 n_context_elem_;
	vector<p_cont_elem_t *> * p_cont_elem_;
	p_cont_elem_t * p_cont_elem__elem_;
};


class DCE_RPC_Bind
{
public:
	DCE_RPC_Bind();
	~DCE_RPC_Bind();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 max_xmit_frag() const { return max_xmit_frag_; }
	uint16 max_recv_frag() const { return max_recv_frag_; }
	uint32 assoc_group_id() const { return assoc_group_id_; }
	p_cont_list_t * p_context_elem() const { return p_context_elem_; }
	
protected:
	uint16 max_xmit_frag_;
	uint16 max_recv_frag_;
	uint32 assoc_group_id_;
	p_cont_list_t * p_context_elem_;
};


class DCE_RPC_AlterContext
{
public:
	DCE_RPC_AlterContext();
	~DCE_RPC_AlterContext();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint16 max_xmit_frag() const { return max_xmit_frag_; }
	uint16 max_recv_frag() const { return max_recv_frag_; }
	uint32 assoc_group_id() const { return assoc_group_id_; }
	p_cont_list_t * p_context_elem() const { return p_context_elem_; }
	
protected:
	uint16 max_xmit_frag_;
	uint16 max_recv_frag_;
	uint32 assoc_group_id_;
	p_cont_list_t * p_context_elem_;
};


class DCE_RPC_Request
{
public:
	DCE_RPC_Request();
	~DCE_RPC_Request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 alloc_hint() const { return alloc_hint_; }
	uint16 p_cont_id() const { return p_cont_id_; }
	uint16 opnum() const { return opnum_; }
	bytestring const & stub() const { return stub_; }
	
protected:
	uint32 alloc_hint_;
	uint16 p_cont_id_;
	uint16 opnum_;
	bytestring stub_;
};


class DCE_RPC_Response
{
public:
	DCE_RPC_Response();
	~DCE_RPC_Response();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 alloc_hint() const { return alloc_hint_; }
	uint16 p_cont_id() const { return p_cont_id_; }
	uint8 cancel_count() const { return cancel_count_; }
	uint8 reserved() const { return reserved_; }
	bytestring const & stub() const { return stub_; }
	
protected:
	uint32 alloc_hint_;
	uint16 p_cont_id_;
	uint8 cancel_count_;
	uint8 reserved_;
	bytestring stub_;
};


class DCE_RPC_Body
{
public:
	DCE_RPC_Body(DCE_RPC_Header * header);
	~DCE_RPC_Body();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	DCE_RPC_Bind * bind() const
		{
		switch ( val_case_index() )
			{
			case 11:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/dce_rpc-protocol.pac:117:bind", val_case_index(), "DCE_RPC_BIND");
				break;
			}
		return bind_;
		}
	DCE_RPC_Request * request() const
		{
		switch ( val_case_index() )
			{
			case 0:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/dce_rpc-protocol.pac:118:request", val_case_index(), "DCE_RPC_REQUEST");
				break;
			}
		return request_;
		}
	DCE_RPC_Response * response() const
		{
		switch ( val_case_index() )
			{
			case 2:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/dce_rpc-protocol.pac:119:response", val_case_index(), "DCE_RPC_RESPONSE");
				break;
			}
		return response_;
		}
	bytestring const & other() const
		{
		return other_;
		}
	DCE_RPC_Header * header() const { return header_; }
	
protected:
	int val_case_index_;
	DCE_RPC_Bind * bind_;
	DCE_RPC_Request * request_;
	DCE_RPC_Response * response_;
	bytestring other_;
	DCE_RPC_Header * header_;
};


class DCE_RPC_Auth
{
public:
	DCE_RPC_Auth(DCE_RPC_Header * header);
	~DCE_RPC_Auth();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	vector<uint8> * val() const { return val_; }
	DCE_RPC_Header * header() const { return header_; }
	int size() const	{ return val() ? val()->size() : 0; }
	uint8 operator[](int index) const { BINPAC_ASSERT(val()); return (*val())[index]; }
	
protected:
	vector<uint8> * val_;
	DCE_RPC_Header * header_;
	uint8 val__elem_;
};


class epmapper_lookup_req
{
public:
	epmapper_lookup_req();
	~epmapper_lookup_req();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 inquiry_type() const { return inquiry_type_; }
	uint32 object() const { return object_; }
	uint32 interface_id() const { return interface_id_; }
	uint32 vers_option() const { return vers_option_; }
	context_handle * entry_handle() const { return entry_handle_; }
	
protected:
	uint32 inquiry_type_;
	uint32 object_;
	uint32 interface_id_;
	uint32 vers_option_;
	context_handle * entry_handle_;
};


class epmapper_map_req
{
public:
	epmapper_map_req();
	~epmapper_map_req();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	
protected:
};


class epm_uuid
{
public:
	epm_uuid();
	~epm_uuid();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & if_uuid() const { return if_uuid_; }
	uint16 if_version() const { return if_version_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring if_uuid_;
	uint16 if_version_;
	int byteorder_;
};


class epm_port
{
public:
	epm_port();
	~epm_port();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 val() const { return val_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 val_;
	int byteorder_;
};


class epm_ip
{
public:
	epm_ip();
	~epm_ip();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 val() const { return val_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 val_;
	int byteorder_;
};


class epm_lhs_data
{
public:
	epm_lhs_data(uint16 length, uint8 protocol);
	~epm_lhs_data();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	epm_uuid * uuid() const
		{
		switch ( val_case_index() )
			{
			case 13:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/epmapper.pac:30:uuid", val_case_index(), "EPM_PROTOCOL_UUID");
				break;
			}
		return uuid_;
		}
	bytestring const & other() const
		{
		return other_;
		}
	uint16 length() const { return length_; }
	uint8 protocol() const { return protocol_; }
	
protected:
	int val_case_index_;
	epm_uuid * uuid_;
	bytestring other_;
	uint16 length_;
	uint8 protocol_;
};


class epm_rhs_data
{
public:
	epm_rhs_data(uint16 length, uint8 protocol);
	~epm_rhs_data();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	uint16 tcp() const
		{
		switch ( val_case_index() )
			{
			case 7:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/epmapper.pac:35:tcp", val_case_index(), "EPM_PROTOCOL_TCP");
				break;
			}
		return tcp_;
		}
	uint16 udp() const
		{
		switch ( val_case_index() )
			{
			case 8:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/epmapper.pac:36:udp", val_case_index(), "EPM_PROTOCOL_UDP");
				break;
			}
		return udp_;
		}
	uint32 ip() const
		{
		switch ( val_case_index() )
			{
			case 9:
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/dce-rpc/epmapper.pac:37:ip", val_case_index(), "EPM_PROTOCOL_IP");
				break;
			}
		return ip_;
		}
	bytestring const & other() const
		{
		return other_;
		}
	uint16 length() const { return length_; }
	uint8 protocol() const { return protocol_; }
	
protected:
	int val_case_index_;
	uint16 tcp_;
	uint16 udp_;
	uint32 ip_;
	bytestring other_;
	uint16 length_;
	uint8 protocol_;
};


class epm_lhs
{
public:
	epm_lhs();
	~epm_lhs();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 length() const { return length_; }
	uint8 protocol() const { return protocol_; }
	epm_lhs_data * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 length_;
	uint8 protocol_;
	epm_lhs_data * data_;
	int byteorder_;
};


class epm_rhs
{
public:
	epm_rhs(uint8 protocol);
	~epm_rhs();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 length() const { return length_; }
	epm_rhs_data * data() const { return data_; }
	uint8 protocol() const { return protocol_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 length_;
	epm_rhs_data * data_;
	uint8 protocol_;
	int byteorder_;
};


class epm_floor
{
public:
	epm_floor();
	~epm_floor();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	epm_lhs * lhs() const { return lhs_; }
	epm_rhs * rhs() const { return rhs_; }
	uint8 protocol() const { return protocol_; }
	
protected:
	epm_lhs * lhs_;
	epm_rhs * rhs_;
	uint8 protocol_;
};


class epm_tower
{
public:
	epm_tower();
	~epm_tower();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 num_floors() const { return num_floors_; }
	vector<epm_floor *> * floors() const { return floors_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 num_floors_;
	vector<epm_floor *> * floors_;
	epm_floor * floors__elem_;
	int byteorder_;
};


class epm_twr_p
{
public:
	epm_twr_p();
	~epm_twr_p();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 ref() const { return ref_; }
	uint32 length() const { return length_; }
	uint32 tower_length() const { return tower_length_; }
	epm_tower * tower() const { return tower_; }
	
protected:
	uint32 ref_;
	uint32 length_;
	uint32 tower_length_;
	epm_tower * tower_;
};


class epm_tower_array
{
public:
	epm_tower_array();
	~epm_tower_array();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	uint32 max_count() const { return max_count_; }
	uint32 offset() const { return offset_; }
	uint32 actual_count() const { return actual_count_; }
	vector<epm_twr_p *> * towers() const { return towers_; }
	
protected:
	uint32 max_count_;
	uint32 offset_;
	uint32 actual_count_;
	vector<epm_twr_p *> * towers_;
	epm_twr_p * towers__elem_;
};


class epmapper_map_resp
{
public:
	epmapper_map_resp();
	~epmapper_map_resp();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, int t_byteorder);
	
	// Member access functions
	context_handle * entry_handle() const { return entry_handle_; }
	uint32 num_towers() const { return num_towers_; }
	epm_tower_array * towers() const { return towers_; }
	uint32 return_code() const { return return_code_; }
	
protected:
	context_handle * entry_handle_;
	uint32 num_towers_;
	epm_tower_array * towers_;
	uint32 return_code_;
};


class DCE_RPC_PDU
{
public:
	DCE_RPC_PDU();
	~DCE_RPC_PDU();
	int initial_buffer_length() const { return 16; }
	bool ParseBuffer(flow_buffer_t t_flow_buffer, ContextDCE_RPC * t_context);
	
	// Member access functions
	DCE_RPC_Header * header() const { return header_; }
	bytestring const & frag() const { return frag_; }
	DCE_RPC_Auth * auth() const { return auth_; }
	int byteorder() const { return byteorder_; }
	int body_length() const { return body_length_; }
	bool frag_reassembled() const { return frag_reassembled_; }
	DCE_RPC_Body * body() const { BINPAC_ASSERT(has_body()); return body_; }
	bool has_body() const { return has_body_; }
	
protected:
	DCE_RPC_Header * header_;
	bytestring frag_;
	DCE_RPC_Auth * auth_;
	int byteorder_;
	int body_length_;
	bool frag_reassembled_;
	DCE_RPC_Body * body_;
	bool has_body_;
	int buffering_state_;
};


class DCE_RPC_Conn : public binpac::ConnectionAnalyzer
{
public:
	DCE_RPC_Conn(BroAnalyzer const & bro_analyzer);
	~DCE_RPC_Conn();
	
	// Member access functions
	DCE_RPC_Flow * upflow() const { return upflow_; }
	DCE_RPC_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
	// Functions
	uint16 get_cont_id_opnum_map(uint16 cont_id);
	bool set_cont_id_opnum_map(uint16 cont_id, uint16 opnum);
	
protected:
	
	// Additional members

	map<uint16, uint16> cont_id_opnum_map;
	
	DCE_RPC_Flow * upflow_;
	DCE_RPC_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class DCE_RPC_Flow : public binpac::FlowAnalyzer
{
public:
	DCE_RPC_Flow(DCE_RPC_Conn * connection, bool is_orig);
	~DCE_RPC_Flow();
	
	// Member access functions
	FlowBuffer * flow_buffer() const { return flow_buffer_; }
	DCE_RPC_Conn * connection() const { return connection_; }
	bool is_orig() const { return is_orig_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool reassemble_fragment(bytestring const & frag, bool lastfrag);
	const_bytestring reassembled_body();
	bool process_dce_rpc_bind(DCE_RPC_Bind * bind);
	bool process_dce_rpc_request(DCE_RPC_Request * req);
	bool process_dce_rpc_response(DCE_RPC_Response * resp);
	
protected:
	DCE_RPC_PDU * dataunit_;
	ContextDCE_RPC * context_;
	
	// Additional members

	FlowBuffer frag_reassembler_;
	
	FlowBuffer * flow_buffer_;
	DCE_RPC_Conn * connection_;
	bool is_orig_;
};

} // namespace DCE_RPC
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_dce_rpc_dce_rpc_pac_h */
