// This file is automatically generated from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/ayiya/ayiya.pac.

#ifndef _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_ayiya_ayiya_pac_h
#define _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_ayiya_ayiya_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


#include "events.bif.h"

namespace binpac {

namespace AYIYA {
class ContextAYIYA;
class PDU;
class AYIYA_Conn;
class AYIYA_Flow;
} // namespace AYIYA

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace AYIYA {

class ContextAYIYA
{
public:
	ContextAYIYA(AYIYA_Conn * connection, AYIYA_Flow * flow);
	~ContextAYIYA();
	
	// Member access functions
	AYIYA_Conn * connection() const { return connection_; }
	AYIYA_Flow * flow() const { return flow_; }
	
protected:
	AYIYA_Conn * connection_;
	AYIYA_Flow * flow_;
};


class PDU
{
public:
	PDU();
	~PDU();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextAYIYA * t_context);
	
	// Member access functions
	uint8 identity_byte() const { return identity_byte_; }
	uint8 signature_byte() const { return signature_byte_; }
	uint8 auth_and_op() const { return auth_and_op_; }
	uint8 next_header() const { return next_header_; }
	uint32 epoch() const { return epoch_; }
	bytestring const & identity() const { return identity_; }
	bytestring const & signature() const { return signature_; }
	bytestring const & packet() const { return packet_; }
	int byteorder() const { return byteorder_; }
	int identity_len() const { return identity_len_; }
	int signature_len() const { return signature_len_; }
	int auth() const { return auth_; }
	int op() const { return op_; }
	int proc_ayiya() const { return proc_ayiya_; }
	
protected:
	uint8 identity_byte_;
	uint8 signature_byte_;
	uint8 auth_and_op_;
	uint8 next_header_;
	uint32 epoch_;
	bytestring identity_;
	bytestring signature_;
	bytestring packet_;
	int byteorder_;
	int identity_len_;
	int signature_len_;
	int auth_;
	int op_;
	int proc_ayiya_;
};


class AYIYA_Conn : public binpac::ConnectionAnalyzer
{
public:
	AYIYA_Conn(BroAnalyzer const & bro_analyzer);
	~AYIYA_Conn();
	
	// Member access functions
	AYIYA_Flow * upflow() const { return upflow_; }
	AYIYA_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	AYIYA_Flow * upflow_;
	AYIYA_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class AYIYA_Flow : public binpac::FlowAnalyzer
{
public:
	AYIYA_Flow(AYIYA_Conn * connection);
	~AYIYA_Flow();
	
	// Member access functions
	AYIYA_Conn * connection() const { return connection_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool process_ayiya(PDU * pdu);
	
protected:
	PDU * dataunit_;
	ContextAYIYA * context_;
	AYIYA_Conn * connection_;
};

} // namespace AYIYA
}  // namespace binpac
#endif /* _home_benjamin_Bro_bro_2_3_1_src_analyzer_protocol_ayiya_ayiya_pac_h */
