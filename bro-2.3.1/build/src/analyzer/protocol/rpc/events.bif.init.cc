// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/rpc/events.bif (plugin mode).


#include <list>
#include <string>
#include "events.bif.h"

namespace plugin { namespace  Bro_RPC {

std::list<std::pair<const char*, int> > __bif_events_init()
	{
	std::list<std::pair<const char*, int> > bifs;

	::nfs_proc_null = internal_handler("nfs_proc_null");
	bifs.push_back(std::make_pair("nfs_proc_null", 2));
	::nfs_proc_getattr = internal_handler("nfs_proc_getattr");
	bifs.push_back(std::make_pair("nfs_proc_getattr", 2));
	::nfs_proc_lookup = internal_handler("nfs_proc_lookup");
	bifs.push_back(std::make_pair("nfs_proc_lookup", 2));
	::nfs_proc_read = internal_handler("nfs_proc_read");
	bifs.push_back(std::make_pair("nfs_proc_read", 2));
	::nfs_proc_readlink = internal_handler("nfs_proc_readlink");
	bifs.push_back(std::make_pair("nfs_proc_readlink", 2));
	::nfs_proc_write = internal_handler("nfs_proc_write");
	bifs.push_back(std::make_pair("nfs_proc_write", 2));
	::nfs_proc_create = internal_handler("nfs_proc_create");
	bifs.push_back(std::make_pair("nfs_proc_create", 2));
	::nfs_proc_mkdir = internal_handler("nfs_proc_mkdir");
	bifs.push_back(std::make_pair("nfs_proc_mkdir", 2));
	::nfs_proc_remove = internal_handler("nfs_proc_remove");
	bifs.push_back(std::make_pair("nfs_proc_remove", 2));
	::nfs_proc_rmdir = internal_handler("nfs_proc_rmdir");
	bifs.push_back(std::make_pair("nfs_proc_rmdir", 2));
	::nfs_proc_readdir = internal_handler("nfs_proc_readdir");
	bifs.push_back(std::make_pair("nfs_proc_readdir", 2));
	::nfs_proc_not_implemented = internal_handler("nfs_proc_not_implemented");
	bifs.push_back(std::make_pair("nfs_proc_not_implemented", 2));
	::nfs_reply_status = internal_handler("nfs_reply_status");
	bifs.push_back(std::make_pair("nfs_reply_status", 2));
	::pm_request_null = internal_handler("pm_request_null");
	bifs.push_back(std::make_pair("pm_request_null", 2));
	::pm_request_set = internal_handler("pm_request_set");
	bifs.push_back(std::make_pair("pm_request_set", 2));
	::pm_request_unset = internal_handler("pm_request_unset");
	bifs.push_back(std::make_pair("pm_request_unset", 2));
	::pm_request_getport = internal_handler("pm_request_getport");
	bifs.push_back(std::make_pair("pm_request_getport", 2));
	::pm_request_dump = internal_handler("pm_request_dump");
	bifs.push_back(std::make_pair("pm_request_dump", 2));
	::pm_request_callit = internal_handler("pm_request_callit");
	bifs.push_back(std::make_pair("pm_request_callit", 2));
	::pm_attempt_null = internal_handler("pm_attempt_null");
	bifs.push_back(std::make_pair("pm_attempt_null", 2));
	::pm_attempt_set = internal_handler("pm_attempt_set");
	bifs.push_back(std::make_pair("pm_attempt_set", 2));
	::pm_attempt_unset = internal_handler("pm_attempt_unset");
	bifs.push_back(std::make_pair("pm_attempt_unset", 2));
	::pm_attempt_getport = internal_handler("pm_attempt_getport");
	bifs.push_back(std::make_pair("pm_attempt_getport", 2));
	::pm_attempt_dump = internal_handler("pm_attempt_dump");
	bifs.push_back(std::make_pair("pm_attempt_dump", 2));
	::pm_attempt_callit = internal_handler("pm_attempt_callit");
	bifs.push_back(std::make_pair("pm_attempt_callit", 2));
	::pm_bad_port = internal_handler("pm_bad_port");
	bifs.push_back(std::make_pair("pm_bad_port", 2));
	::rpc_dialogue = internal_handler("rpc_dialogue");
	bifs.push_back(std::make_pair("rpc_dialogue", 2));
	::rpc_call = internal_handler("rpc_call");
	bifs.push_back(std::make_pair("rpc_call", 2));
	::rpc_reply = internal_handler("rpc_reply");
	bifs.push_back(std::make_pair("rpc_reply", 2));

	return bifs;
	}
} }

