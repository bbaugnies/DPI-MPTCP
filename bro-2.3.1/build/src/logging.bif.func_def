// This file was automatically generated by bifcl from logging.bif.


#line 5 "logging.bif"

#include "NetVar.h"

#include "logging/Manager.h"

#line 15 "logging.bif"
Val* BifFunc::Log::bro___create_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 16 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__create_stream() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	Val* stream = (Val*) ((*BiF_ARGS)[1]);

#line 16 "logging.bif"

	bool result = log_mgr->CreateStream(id->AsEnumVal(), stream->AsRecordVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___create_stream

#line 19 "logging.bif"

#line 21 "logging.bif"
Val* BifFunc::Log::bro___remove_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 22 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__remove_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 22 "logging.bif"

	bool result = log_mgr->RemoveStream(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___remove_stream

#line 25 "logging.bif"

#line 27 "logging.bif"
Val* BifFunc::Log::bro___enable_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 28 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__enable_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 28 "logging.bif"

	bool result = log_mgr->EnableStream(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___enable_stream

#line 31 "logging.bif"

#line 33 "logging.bif"
Val* BifFunc::Log::bro___disable_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 34 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__disable_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 34 "logging.bif"

	bool result = log_mgr->DisableStream(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___disable_stream

#line 37 "logging.bif"

#line 39 "logging.bif"
Val* BifFunc::Log::bro___add_filter(Frame* frame, val_list* BiF_ARGS) 
	
#line 40 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__add_filter() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	Val* filter = (Val*) ((*BiF_ARGS)[1]);

#line 40 "logging.bif"

	bool result = log_mgr->AddFilter(id->AsEnumVal(), filter->AsRecordVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___add_filter

#line 43 "logging.bif"

#line 45 "logging.bif"
Val* BifFunc::Log::bro___remove_filter(Frame* frame, val_list* BiF_ARGS) 
	
#line 46 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__remove_filter() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	StringVal* name = (StringVal*) ((*BiF_ARGS)[1]->AsStringVal());

#line 46 "logging.bif"

	bool result = log_mgr->RemoveFilter(id->AsEnumVal(), name);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___remove_filter

#line 49 "logging.bif"

#line 51 "logging.bif"
Val* BifFunc::Log::bro___write(Frame* frame, val_list* BiF_ARGS) 
	
#line 52 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__write() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	Val* columns = (Val*) ((*BiF_ARGS)[1]);

#line 52 "logging.bif"

	bool result = log_mgr->Write(id->AsEnumVal(), columns->AsRecordVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___write

#line 55 "logging.bif"

#line 57 "logging.bif"
Val* BifFunc::Log::bro___set_buf(Frame* frame, val_list* BiF_ARGS)
	
#line 58 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__set_buf() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	int buffered = (int) ((*BiF_ARGS)[1]->AsBool());

#line 58 "logging.bif"

	bool result = log_mgr->SetBuf(id->AsEnumVal(), buffered);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___set_buf

#line 61 "logging.bif"

#line 63 "logging.bif"
Val* BifFunc::Log::bro___flush(Frame* frame, val_list* BiF_ARGS)
	
#line 64 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__flush() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 64 "logging.bif"

	bool result = log_mgr->Flush(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___flush

#line 67 "logging.bif"
