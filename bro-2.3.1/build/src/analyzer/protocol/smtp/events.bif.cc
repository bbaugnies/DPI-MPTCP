// This file was automatically generated by bifcl from /home/benjamin/Bro/bro-2.3.1/src/analyzer/protocol/smtp/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr smtp_request; 
void BifEvent::generate_smtp_request(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* command, StringVal* arg)
	{
	// Note that it is intentional that here we do not
	// check if ::smtp_request is NULL, which should happen *before*
	// BifEvent::generate_smtp_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(command);
	vl->append(arg);

	mgr.QueueEvent(::smtp_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smtp_reply; 
void BifEvent::generate_smtp_reply(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t code, StringVal* cmd, StringVal* msg, int cont_resp)
	{
	// Note that it is intentional that here we do not
	// check if ::smtp_reply is NULL, which should happen *before*
	// BifEvent::generate_smtp_reply is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(code, TYPE_COUNT));
	vl->append(cmd);
	vl->append(msg);
	vl->append(new Val(cont_resp, TYPE_BOOL));

	mgr.QueueEvent(::smtp_reply, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smtp_data; 
void BifEvent::generate_smtp_data(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::smtp_data is NULL, which should happen *before*
	// BifEvent::generate_smtp_data is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(data);

	mgr.QueueEvent(::smtp_data, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smtp_unexpected; 
void BifEvent::generate_smtp_unexpected(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* msg, StringVal* detail)
	{
	// Note that it is intentional that here we do not
	// check if ::smtp_unexpected is NULL, which should happen *before*
	// BifEvent::generate_smtp_unexpected is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(msg);
	vl->append(detail);

	mgr.QueueEvent(::smtp_unexpected, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smtp_starttls; 
void BifEvent::generate_smtp_starttls(analyzer::Analyzer* analyzer, Connection* c)
	{
	// Note that it is intentional that here we do not
	// check if ::smtp_starttls is NULL, which should happen *before*
	// BifEvent::generate_smtp_starttls is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());

	mgr.QueueEvent(::smtp_starttls, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
